gsub("Hotspot_|_window", "", Hotspots_and_Causative_windows_comparison_sorted$Model),
Hotspots_and_Causative_windows_comparison_sorted$Model
)
# Create a new column for identifying the type
Hotspots_and_Causative_windows_comparison_sorted$Type <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
"Hotspot",
"Selection Coefficient"
)
# Create the scatter plot with ggplot2
p <- ggplot(Hotspots_and_Causative_windows_comparison_sorted, aes(x = Lengths_Mb_Normalized, y = Avg_ROH_Freq_Normalized)) +
geom_point(aes(color = Type), size = 3) +                # Use 'Type' for color mapping
scale_color_manual(values = c("Hotspot" = "red", "Selection Coefficient" = "blue")) +
labs(title = "Hotspots and Selection Coefficients",
x = "Normalized Lengths_Mb",
y = "Normalized Avg_ROH_Freq",
color = "Type") +                                  # Legend title
theme_minimal() +
theme(legend.position = "top") +                         # Position legend at the top
geom_text(aes(label = Label), vjust = -1, size = 3)      # Add text labels with modified labels
# # Save the plot with specified dimensions
# ggsave("Hotspots_and_Selection_Coefficients_plot.png", plot = p, width = 10, height = 8)
# Function to normalize a vector
min_max_normalization_fun <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Normalize Lengths_Mb and Avg_ROH_Freq
Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb)
Hotspots_and_Causative_windows_comparison_sorted$Avg_ROH_Freq_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$Avg_ROH_Freq)
# Modify the labels by removing "Hotspot_" prefix and "_window" suffix from hotspot models
Hotspots_and_Causative_windows_comparison_sorted$Label <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
gsub("Hotspot_|_window", "", Hotspots_and_Causative_windows_comparison_sorted$Model),
Hotspots_and_Causative_windows_comparison_sorted$Model
)
# Create a new column for identifying the type
Hotspots_and_Causative_windows_comparison_sorted$Type <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
"Hotspot",
"Selection Coefficient"
)
# Create the scatter plot with ggplot2
p <- ggplot(Hotspots_and_Causative_windows_comparison_sorted, aes(x = Lengths_Mb_Normalized, y = Avg_ROH_Freq_Normalized)) +
geom_point(aes(color = Type), size = 3) +                # Use 'Type' for color mapping
scale_color_manual(values = c("Hotspot" = "red", "Selection Coefficient" = "blue")) +
labs(title = "Hotspots and Selection Coefficients",
x = "Normalized Lengths_Mb",
y = "Normalized Avg_ROH_Freq",
color = "Type") +                                  # Legend title
theme_minimal() +
theme(legend.position = "top") +                         # Position legend at the top
geom_text(aes(label = Label), vjust = -1, size = 3)      # Add text labels with modified labels
print(p)
# # Save the plot with specified dimensions
# ggsave("Hotspots_and_Selection_Coefficients_plot.png", plot = p, width = 10, height = 8)
# Function to normalize a vector
min_max_normalization_fun <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Normalize Lengths_Mb and Avg_ROH_Freq
Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb)
Hotspots_and_Causative_windows_comparison_sorted$Avg_ROH_Freq_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$Avg_ROH_Freq)
# Modify the labels by removing "Hotspot_" prefix and "_window" suffix from hotspot models
Hotspots_and_Causative_windows_comparison_sorted$Label <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
gsub("Hotspot_|_window", "", Hotspots_and_Causative_windows_comparison_sorted$Model),
Hotspots_and_Causative_windows_comparison_sorted$Model
)
# Create a new column for identifying the type
Hotspots_and_Causative_windows_comparison_sorted$Type <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
"Hotspot",
"Selection Coefficient"
)
plot_title <- paste("Length And ROH % Comparison - ROH Hotspot/Causative Window")
# Create the scatter plot with ggplot2
p <- ggplot(Hotspots_and_Causative_windows_comparison_sorted, aes(x = Lengths_Mb_Normalized, y = Avg_ROH_Freq_Normalized)) +
geom_point(aes(color = Type), size = 3) +                # Use 'Type' for color mapping
scale_color_manual(values = c("Hotspot" = "red", "Selection Coefficient" = "blue")) +
labs(title = "Hotspots and Selection Coefficients",
x = "Normalized Lengths_Mb",
y = "Normalized Avg_ROH_Freq",
color = "Type") +                                  # Legend title
theme_minimal() +
theme(legend.position = "top") +                         # Position legend at the top
geom_text(aes(label = Label), vjust = -1, size = 3)      # Add text labels with modified labels
print(p)
# # Save the plot with specified dimensions
# ggsave("Hotspots_and_Selection_Coefficients_plot.png", plot = p, width = 10, height = 8)
# Function to normalize a vector
min_max_normalization_fun <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Normalize Lengths_Mb and Avg_ROH_Freq
Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb)
Hotspots_and_Causative_windows_comparison_sorted$Avg_ROH_Freq_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$Avg_ROH_Freq)
# Modify the labels by removing "Hotspot_" prefix and "_window" suffix from hotspot models
Hotspots_and_Causative_windows_comparison_sorted$Label <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
gsub("Hotspot_|_window", "", Hotspots_and_Causative_windows_comparison_sorted$Model),
Hotspots_and_Causative_windows_comparison_sorted$Model
)
# Create a new column for identifying the type
Hotspots_and_Causative_windows_comparison_sorted$Type <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
"Hotspot",
"Selection Coefficient"
)
plot_title <- paste("Length And ROH % Comparison - ROH Hotspot/Causative Window")
# Create the scatter plot with ggplot2
p <- ggplot(Hotspots_and_Causative_windows_comparison_sorted, aes(x = Lengths_Mb_Normalized, y = Avg_ROH_Freq_Normalized)) +
geom_point(aes(color = Type), size = 3) +                # Use 'Type' for color mapping
scale_color_manual(values = c("Hotspot" = "red", "Selection Coefficient" = "blue")) +
labs(title = plot_title,
x = "Normalized Lengths_Mb",
y = "Normalized Avg_ROH_Freq",
color = "Type") +                                  # Legend title
theme_minimal() +
theme(legend.position = "top") +                         # Position legend at the top
geom_text(aes(label = Label), vjust = -1, size = 3)      # Add text labels with modified labels
print(p)
# # Save the plot with specified dimensions
# ggsave("Hotspots_and_Selection_Coefficients_plot.png", plot = p, width = 10, height = 8)
# Function to normalize a vector
min_max_normalization_fun <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Normalize Lengths_Mb and Avg_ROH_Freq
Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb)
Hotspots_and_Causative_windows_comparison_sorted$Avg_ROH_Freq_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$Avg_ROH_Freq)
# Modify the labels by removing "Hotspot_" prefix and "_window" suffix from hotspot models
Hotspots_and_Causative_windows_comparison_sorted$Label <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
gsub("Hotspot_|_window", "", Hotspots_and_Causative_windows_comparison_sorted$Model),
Hotspots_and_Causative_windows_comparison_sorted$Model
)
# Create a new column for identifying the type
Hotspots_and_Causative_windows_comparison_sorted$Type <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
"Hotspot",
"Selection Coefficient"
)
plot_title <- paste("Length And Average ROH % Comparison - ROH Hotspots & Causative Windows")
# Create the scatter plot with ggplot2
p <- ggplot(Hotspots_and_Causative_windows_comparison_sorted, aes(x = Lengths_Mb_Normalized, y = Avg_ROH_Freq_Normalized)) +
geom_point(aes(color = Type), size = 3) +                # Use 'Type' for color mapping
scale_color_manual(values = c("Hotspot" = "red", "Selection Coefficient" = "blue")) +
labs(title = plot_title,
x = "Normalized Lengths_Mb",
y = "Normalized Avg_ROH_Freq",
color = "Type") +                                  # Legend title
theme_minimal() +
theme(legend.position = "top") +                         # Position legend at the top
geom_text(aes(label = Label), vjust = -1, size = 3)      # Add text labels with modified labels
print(p)
# # Save the plot with specified dimensions
# ggsave("Hotspots_and_Selection_Coefficients_plot.png", plot = p, width = 10, height = 8)
# Function to normalize a vector
min_max_normalization_fun <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Normalize Lengths_Mb and Avg_ROH_Freq
Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb)
Hotspots_and_Causative_windows_comparison_sorted$Avg_ROH_Freq_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$Avg_ROH_Freq)
# Modify the labels by removing "Hotspot_" prefix and "_window" suffix from hotspot models
Hotspots_and_Causative_windows_comparison_sorted$Label <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
gsub("Hotspot_|_window", "", Hotspots_and_Causative_windows_comparison_sorted$Model),
Hotspots_and_Causative_windows_comparison_sorted$Model
)
# Create a new column for identifying the type
Hotspots_and_Causative_windows_comparison_sorted$Type <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
"Hotspot",
"Selection Coefficient"
)
plot_title <- paste("Length And Average ROH % Comparison - ROH Hotspots & Causative Windows")
# Create the scatter plot with ggplot2
p <- ggplot(Hotspots_and_Causative_windows_comparison_sorted, aes(x = Lengths_Mb_Normalized, y = Avg_ROH_Freq_Normalized)) +
geom_point(aes(color = Type), size = 3) +                # Use 'Type' for color mapping
scale_color_manual(values = c("Hotspot" = "red", "Selection Coefficient" = "blue")) +
labs(title = plot_title,
x = "Normalized Lengths",
y = "Normalized Average ROH Frequency",
color = "Type") +                                  # Legend title
theme_minimal() +
theme(legend.position = "top") +                         # Position legend at the top
geom_text(aes(label = Label), vjust = -1, size = 3)      # Add text labels with modified labels
print(p)
# # Save the plot with specified dimensions
# ggsave("Hotspots_and_Selection_Coefficients_plot.png", plot = p, width = 10, height = 8)
# Function to normalize a vector
min_max_normalization_fun <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Normalize Lengths_Mb and Avg_ROH_Freq
Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb)
Hotspots_and_Causative_windows_comparison_sorted$Avg_ROH_Freq_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$Avg_ROH_Freq)
# Modify the labels by removing "Hotspot_" prefix and "_window" suffix from hotspot models
Hotspots_and_Causative_windows_comparison_sorted$Label <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
gsub("Hotspot_|_window", "", Hotspots_and_Causative_windows_comparison_sorted$Model),
Hotspots_and_Causative_windows_comparison_sorted$Model
)
# Create a new column for identifying the type
Hotspots_and_Causative_windows_comparison_sorted$Type <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
"Hotspot",
"Selection Coefficient"
)
plot_title <- paste("Length And Average ROH % Comparison - ROH Hotspots & Causative Windows")
# Create the scatter plot with ggplot2
p <- ggplot(Hotspots_and_Causative_windows_comparison_sorted, aes(x = Lengths_Mb_Normalized, y = Avg_ROH_Freq_Normalized)) +
geom_point(aes(color = Type), size = 3) +                # Use 'Type' for color mapping
scale_color_manual(values = c("Hotspot" = "red", "Selection Coefficient" = "blue")) +
labs(title = plot_title,
x = "Normalized Lengths",
y = "Normalized Mean ROH Frequency",
color = "Type") +                                  # Legend title
theme_minimal() +
theme(legend.position = "top") +                         # Position legend at the top
geom_text(aes(label = Label), vjust = -1, size = 3)      # Add text labels with modified labels
print(p)
# # Save the plot with specified dimensions
# ggsave("Hotspots_and_Selection_Coefficients_plot.png", plot = p, width = 10, height = 8)
H_e_values$Upper_CI
H_e_values$H_e
H_e_values$Lower_CI
Selection_testing_results
Causative_windows_under_selection
Hotspot_Avg_H_e
Hotspot_Avg_H_e
View(hotspot_under_selection_H_e_table)
hotspot_under_selection_H_e_table[["Hotspot_chr3_window_1"]][["Hotspot_Avg_H_e"]]
# Initialize an empty list to store the new table
hotspot_under_selection_H_e_table <- list()
# If no Hotspot is under selection, then display all hotspots instead
if (nrow(under_selection_rows) == 0) {
under_selection_rows <- Selection_testing_results
}
# Loop through each row in under_selection_rows
for (i in 1:nrow(under_selection_rows)) {
# Extract information for the current ROH-hotspot window
current_window <- under_selection_rows[i, "Name"]
under_selection <- under_selection_rows[i, "Under_selection"]
Hotspot_Avg_H_e <- under_selection_rows[i, "Window_based_Average_H_e"]
# Initialize a subtable for the current ROH-hotspot window
subtable <- list()
# Remove the 'Under_Selection' column from the table
subtable <- Causative_windows_under_selection
# # Loop through each selection coefficient
# for (j in seq_along(Selection_Strength_test_results_tables)) {
#   # Get the selection coefficient and its corresponding table
#   selection_coefficient <- names(Selection_Strength_test_results_tables)[j]
#   table <- Selection_Strength_test_results_tables[[j]]
#
#   # Extract the filename and the fifth percentile H_e threshold
#   filename <- table$file_name
#   fifth_percentile_H_e_threshold <- table$fifth_percentile_H_e_threshold
#
#   if( fifth_percentile_H_e_threshold < fifth_percentile_H_e_neutral_model) {
#
#   # Create a subtable for the current selection coefficient
#   subtable[[selection_coefficient]] <- list(
#     fifth_percentile_H_e_threshold = fifth_percentile_H_e_threshold
#   )
#   }
# }
# Add the subtable for the current ROH-hotspot window to the new table
hotspot_under_selection_H_e_table[[current_window]] <- c(hotspot_under_selection_H_e_table[[current_window]], subtable)
hotspot_under_selection_H_e_table[[current_window]]$Hotspot_Avg_H_e <- Hotspot_Avg_H_e
}
# View the new table
# View(hotspot_under_selection_H_e_table)
View(hotspot_under_selection_H_e_table)
# Initialize an empty list to store the new table
hotspot_under_selection_H_e_table <- list()
# If no Hotspot is under selection, then display all hotspots instead
if (nrow(under_selection_rows) == 0) {
under_selection_rows <- Selection_testing_results
}
# Loop through each row in under_selection_rows
for (i in 1:nrow(under_selection_rows)) {
# Extract information for the current ROH-hotspot window
current_window <- under_selection_rows[i, "Name"]
under_selection <- under_selection_rows[i, "Under_selection"]
Hotspot_Avg_H_e <- under_selection_rows[i, "Window_based_Average_H_e"]
# Initialize a subtable for the current ROH-hotspot window
subtable <- list()
# Remove the 'Under_Selection' column from the table
subtable <- Causative_windows_under_selection
# # Loop through each selection coefficient
# for (j in seq_along(Selection_Strength_test_results_tables)) {
#   # Get the selection coefficient and its corresponding table
#   selection_coefficient <- names(Selection_Strength_test_results_tables)[j]
#   table <- Selection_Strength_test_results_tables[[j]]
#
#   # Extract the filename and the fifth percentile H_e threshold
#   filename <- table$file_name
#   fifth_percentile_H_e_threshold <- table$fifth_percentile_H_e_threshold
#
#   if( fifth_percentile_H_e_threshold < fifth_percentile_H_e_neutral_model) {
#
#   # Create a subtable for the current selection coefficient
#   subtable[[selection_coefficient]] <- list(
#     fifth_percentile_H_e_threshold = fifth_percentile_H_e_threshold
#   )
#   }
# }
# Add the subtable for the current ROH-hotspot window to the new table
hotspot_under_selection_H_e_table[[current_window]] <- c(hotspot_under_selection_H_e_table[[current_window]], list(subtable))
hotspot_under_selection_H_e_table[[current_window]]$Hotspot_Avg_H_e <- Hotspot_Avg_H_e
}
# View the new table
View(hotspot_under_selection_H_e_table)
# Initialize an empty list to store the new table
hotspot_under_selection_H_e_table <- list()
# If no Hotspot is under selection, then display all hotspots instead
if (nrow(under_selection_rows) == 0) {
under_selection_rows <- Selection_testing_results
}
# Loop through each row in under_selection_rows
for (i in 1:nrow(under_selection_rows)) {
# Extract information for the current ROH-hotspot window
current_window <- under_selection_rows[i, "Name"]
under_selection <- under_selection_rows[i, "Under_selection"]
Hotspot_Avg_H_e <- under_selection_rows[i, "Window_based_Average_H_e"]
# Initialize a subtable for the current ROH-hotspot window
subtable <- list()
# Remove the 'Under_Selection' column from the table
subtable <- Causative_windows_under_selection
# # Loop through each selection coefficient
# for (j in seq_along(Selection_Strength_test_results_tables)) {
#   # Get the selection coefficient and its corresponding table
#   selection_coefficient <- names(Selection_Strength_test_results_tables)[j]
#   table <- Selection_Strength_test_results_tables[[j]]
#
#   # Extract the filename and the fifth percentile H_e threshold
#   filename <- table$file_name
#   fifth_percentile_H_e_threshold <- table$fifth_percentile_H_e_threshold
#
#   if( fifth_percentile_H_e_threshold < fifth_percentile_H_e_neutral_model) {
#
#   # Create a subtable for the current selection coefficient
#   subtable[[selection_coefficient]] <- list(
#     fifth_percentile_H_e_threshold = fifth_percentile_H_e_threshold
#   )
#   }
# }
# Create a list with table name and corresponding data frame
table_info <- list(Hotspot_Avg_H_e = Hotspot_Avg_H_e, coefficient_data = subtable)
# Add the subtable for the current ROH-hotspot window to the new table
hotspot_under_selection_H_e_table[[current_window]] <- c(hotspot_under_selection_H_e_table[[current_window]], list(table_info))
# hotspot_under_selection_H_e_table[[current_window]]$Hotspot_Avg_H_e <- Hotspot_Avg_H_e
}
# View the new table
View(hotspot_under_selection_H_e_table)
# Initialize an empty list to store the new table
hotspot_under_selection_H_e_table <- list()
# If no Hotspot is under selection, then display all hotspots instead
if (nrow(under_selection_rows) == 0) {
under_selection_rows <- Selection_testing_results
}
# Loop through each row in under_selection_rows
for (i in 1:nrow(under_selection_rows)) {
# Extract information for the current ROH-hotspot window
current_window <- under_selection_rows[i, "Name"]
under_selection <- under_selection_rows[i, "Under_selection"]
Hotspot_Avg_H_e <- under_selection_rows[i, "Window_based_Average_H_e"]
# Initialize a subtable for the current ROH-hotspot window
subtable <- list()
# Remove the 'Under_Selection' column from the table
subtable <- Causative_windows_under_selection
# # Loop through each selection coefficient
# for (j in seq_along(Selection_Strength_test_results_tables)) {
#   # Get the selection coefficient and its corresponding table
#   selection_coefficient <- names(Selection_Strength_test_results_tables)[j]
#   table <- Selection_Strength_test_results_tables[[j]]
#
#   # Extract the filename and the fifth percentile H_e threshold
#   filename <- table$file_name
#   fifth_percentile_H_e_threshold <- table$fifth_percentile_H_e_threshold
#
#   if( fifth_percentile_H_e_threshold < fifth_percentile_H_e_neutral_model) {
#
#   # Create a subtable for the current selection coefficient
#   subtable[[selection_coefficient]] <- list(
#     fifth_percentile_H_e_threshold = fifth_percentile_H_e_threshold
#   )
#   }
# }
# Create a list with table name and corresponding data frame
table_info <- list(Hotspot_Avg_H_e = Hotspot_Avg_H_e, coefficient_data = subtable)
# Add the subtable for the current ROH-hotspot window to the new table
hotspot_under_selection_H_e_table[[current_window]] <- c(hotspot_under_selection_H_e_table[[current_window]],table_info)
# hotspot_under_selection_H_e_table[[current_window]]$Hotspot_Avg_H_e <- Hotspot_Avg_H_e
}
# View the new table
View(hotspot_under_selection_H_e_table)
# Initialize an empty data frame to store the results
results_df <- data.frame()
hotspot_lengths_mb <- c()
hotspot_names <- c()
hotspot_avg_roh_freq <- c()
for (i in seq_along(empirical_hotspot_tables)) {
hotspot_name <- names(empirical_hotspot_tables)[i]
if (hotspot_name %in% under_selection_rows$Name) {
hotspot_length <- empirical_hotspot_tables[[i]][["Hotspot_length_Mb"]]
hotspot_avg_freq <- empirical_hotspot_tables[[i]][["Avg_frequency"]]
hotspot_lengths_mb <- c(hotspot_lengths_mb,hotspot_length)
hotspot_names <- c(hotspot_names,hotspot_name)
hotspot_avg_roh_freq <- c(hotspot_avg_roh_freq,hotspot_avg_freq)
} else {
}
}
# Scaling to percentage
hotspot_avg_roh_freq <- 100*hotspot_avg_roh_freq
selection_coefficient_variant_windows_length_mb <- causative_variant_window_results_df$Avg_Length_Mb
selection_coefficient_variant_windows_avg_freq <- causative_variant_window_results_df$Avg_window_freq
selection_coefficient_name <- causative_variant_window_results_df$Selection_coefficient
# hotspot_lengths_mb
# hotspot_names
# hotspot_avg_roh_freq
# Combine all values into a data frame
Hotspots_and_Causative_windows_comparison <- data.frame(
Model = c(hotspot_names,selection_coefficient_name),
Lengths_Mb = c(hotspot_lengths_mb, selection_coefficient_variant_windows_length_mb),
Avg_ROH_Freq = c(hotspot_avg_roh_freq,selection_coefficient_variant_windows_avg_freq)
)
Hotspots_and_Causative_windows_comparison$Avg_ROH_Freq <- round(Hotspots_and_Causative_windows_comparison$Avg_ROH_Freq,ROH_frequency_decimals)
# Sort the data frame based on average fixation time, in descending order
Hotspots_and_Causative_windows_comparison_sorted <- Hotspots_and_Causative_windows_comparison[order(-Hotspots_and_Causative_windows_comparison$Lengths_Mb), ]
kable(Hotspots_and_Causative_windows_comparison_sorted, row.names = FALSE)
# View(causative_variant_window_results_df)
# Function to normalize a vector
min_max_normalization_fun <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Normalize Lengths_Mb and Avg_ROH_Freq
Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb)
Hotspots_and_Causative_windows_comparison_sorted$Avg_ROH_Freq_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$Avg_ROH_Freq)
# Modify the labels by removing "Hotspot_" prefix and "_window" suffix from hotspot models
Hotspots_and_Causative_windows_comparison_sorted$Label <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
gsub("Hotspot_|_window", "", Hotspots_and_Causative_windows_comparison_sorted$Model),
Hotspots_and_Causative_windows_comparison_sorted$Model
)
# Create a new column for identifying the type
Hotspots_and_Causative_windows_comparison_sorted$Type <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
"Hotspot",
"Selection Coefficient"
)
plot_title <- paste("Length And Average ROH % Comparison - ROH Hotspots & Causative Windows")
# Create the scatter plot with ggplot2
p <- ggplot(Hotspots_and_Causative_windows_comparison_sorted, aes(x = Lengths_Mb_Normalized, y = Avg_ROH_Freq_Normalized)) +
geom_point(aes(color = Type), size = 3) +                # Use 'Type' for color mapping
scale_color_manual(values = c("Hotspot" = "red", "Selection Coefficient" = "blue")) +
labs(title = plot_title,
x = "Normalized Lengths",
y = "Normalized Mean ROH Frequency",
color = "Type") +                                  # Legend title
theme_minimal() +
theme(legend.position = "top") +                         # Position legend at the top
geom_text(aes(label = Label), vjust = -1, size = 3)      # Add text labels with modified labels
print(p)
# # Save the plot with specified dimensions
# ggsave("Hotspots_and_Selection_Coefficients_plot.png", plot = p, width = 10, height = 8)
# Function to generate plot for each hotspot
generate_plot <- function(hotspot_name, empirical_value) {
# Remove the empirical model from the plotting data
# plotting_data <- H_e_5th_percentile_values[H_e_5th_percentile_values$Model != "Empirical", ]
plotting_data <- Causative_windows_under_selection
# Add a column indicating whether the empirical H_e is within the CI of each model
plotting_data$Empirical_Within_CI <- (plotting_data$Lower_CI <= empirical_value) & (plotting_data$Upper_CI >= empirical_value)
cat(plotting_data$Empirical_Within_CI)
# Determine the y-axis limits
min_y <- min(c(plotting_data$Lower_CI, empirical_value))
max_y <- max(c(plotting_data$Upper_CI, empirical_value))
# Create the plot
p <- ggplot(plotting_data, aes(x = Model, y = H_e, color = Empirical_Within_CI)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
geom_hline(aes(yintercept = empirical_value), linetype = "dashed", color = "red", linewidth = 1, show.legend = TRUE) +
labs(title = paste("Avg H_e % and CI for", hotspot_name),
x = "Model",
y = "H_e",
color = "Hotspot Avg H_e %\nwithin CI",
linetype = "Empirical H_e") +
scale_linetype_manual(name = "Empirical H_e", values = c("dashed")) +
scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "black"), labels = c("TRUE" = "Inside CI", "FALSE" = "Outside CI")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(limits = c(min_y, max_y),
breaks = round(seq(min_y, max_y, length.out = 10), 5))
# Print the plot
print(p)
# Print which models the empirical H_e is inside of
inside_models <- plotting_data$Model[plotting_data$Empirical_Within_CI]
outside_models <- plotting_data$Model[!plotting_data$Empirical_Within_CI]
cat("Models where empirical H_e is within CI for", hotspot_name, ":\n")
print(inside_models)
cat("\nModels where empirical H_e is outside CI for", hotspot_name, ":\n")
print(outside_models)
}
# Loop through each hotspot and generate plots
for (i in 1:nrow(Selection_testing_results)) {
hotspot_name <- Selection_testing_results$Name[i]
empirical_value <- Selection_testing_results$Window_based_Average_H_e[i]
generate_plot(hotspot_name, empirical_value)
}
hotspot_under_selection_H_e_table[["Hotspot_chr3_window_1"]][["coefficient_data"]]
