}
# Assign the calculated expected heterozygosity list to the H_e attribute of table_info
empirical_hotspot_tables[[i]]$H_e_list <- window_H_e_list
empirical_hotspot_tables[[i]]$Average_H_e <- mean(empirical_hotspot_tables[[i]]$H_e_list)
}
View(empirical_hotspot_tables)
for (i in seq_along(neutral_model_tables)) {
# Extract table name and data frame
table_info <- neutral_model_tables[[i]]
table_data <- table_info$data
# Calculate expected heterozygosity for each window
window_H_e_list <- c()  # Initialize an empty list to store expected heterozygosity values
# Loop through each row in the table data
for (j in 1:nrow(table_data)) {
# Extract the MAF (p value)
p <- table_data[j, "MAF"]
# Calculate expected heterozygosity using the provided function
expected_heterozygosity <- calculate_expected_heterozygosity(p)
# Append the calculated expected heterozygosity to the list
window_H_e_list <- c(window_H_e_list, expected_heterozygosity)
}
# Assign the calculated expected heterozygosity list to the H_e attribute of table_info
neutral_model_tables[[i]]$H_e_list <- window_H_e_list
neutral_model_tables[[i]]$Average_H_e <- mean(neutral_model_tables[[i]]$H_e_list)
}
View(neutral_model_tables)
# Clean the working environment
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
# Set the path to your GitHub folder
YOUR_GITHUB_ROOT_DIRECTORY <- "C:/Users/jonat/GitHub"
# Defining the relative path in the repository
repository_path <- "Computational-modelling-of-genomic-inbreeding-and-roh-islands-in-extremely-small-populations"
####################################
# Defining the input files
####################################
ROH_hotspot_allele_freq_dir <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"results/ROH-Hotspots/empirical/german_shepherd/gosling_plots/hotspots_allele_freq")
neutral_model_allele_freq_dir <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"results/PLINK/simulated/allele_freq")
####################################
# Defining the working directory
####################################
output_dir_sweep_test <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"results/Sweep_test/german_shepherd")
if (!dir.exists(output_dir_sweep_test)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_sweep_test,recursive = TRUE)
}
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir_sweep_test)
library(knitr)
# Set the working directory to the directory with allele frequencies for the different ROH-hotspots
setwd(ROH_hotspot_allele_freq_dir)
# Get a list of all .bed files in the directory
bed_files <- list.files(pattern = "\\.bed$")
# Create an empty list to store information for the different ROH-hotspots in
empirical_hotspot_tables <- list()
# Loop through each .bed file (ROH-hotspot allele frequency window-file)
for (file in bed_files) {
# Extract chromosome number and window number from file name
chromosome <- sub(".*chr([0-9]+)_.*", "\\1", file)
window <- sub(".*window_([0-9]+)_.*", "\\1", file)
# Create table name
table_name <- paste("Hotspot_chr", chromosome, "_window_", window, "_allele_freq", sep = "")
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header and split it into column names
column_names <- sub("#", "", header)
column_names <- strsplit(column_names, "\t")[[1]]
# Read the .bed file into a data frame, skipping commented lines
bed_data <- read.table(file, header = FALSE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names)
# Create a list with table name and corresponding data frame
table_info <- list(name = table_name, data = bed_data)
# Append the table info to the list
empirical_hotspot_tables <- c(empirical_hotspot_tables, list(table_info))
}
# Print the list of empirical_hotspot_tables
#print(empirical_hotspot_tables)
# Set the working directory to the directory containing the frequency files for the simulated data
setwd(neutral_model_allele_freq_dir)
# Get a list of all the .tsv frequency files in the current directory
# (these .tsv files are identical to the .frq files, but with a POS-column added, to associate the SNP-markers with a genomic position)
frq_files <- list.files(pattern = "\\.tsv$")
# Initialize an empty list to store neutral model tables
neutral_model_tables <- list()
# Loop through each .frq file
for (file in frq_files) {
# Extract the table name from the file name
table_name <- gsub(".frq$", "", file)
# Read the .frq file into a data frame
frq_data <- read.table(file, header = TRUE)
# Create a list with table name and corresponding data frame
table_info <- list(name = table_name, data = frq_data)
# Append the table info to the list
neutral_model_tables <- c(neutral_model_tables, list(table_info))
}
# Print the list of neutral_model_tables
#print(neutral_model_tables)
calculate_expected_heterozygosity <- function(p) {
# Calculate expected heterozygosity
heterozygosity <- 2 * p * (1 - p)
# Return the result
return(heterozygosity)
}
for (i in seq_along(empirical_hotspot_tables)) {
# Extract table name and data frame
table_info <- empirical_hotspot_tables[[i]]
table_data <- table_info$data
# Calculate expected heterozygosity for each window
window_H_e_list <- c()  # Initialize an empty list to store expected heterozygosity values
# Loop through each row in the table data
for (j in 1:nrow(table_data)) {
# Extract the MAF (p value)
p <- table_data[j, "MAF"]
# Calculate expected heterozygosity using the provided function
expected_heterozygosity <- calculate_expected_heterozygosity(p)
# Append the calculated expected heterozygosity to the list
window_H_e_list <- c(window_H_e_list, expected_heterozygosity)
}
# Assign the calculated expected heterozygosity list to the H_e attribute of table_info
empirical_hotspot_tables[[i]]$H_e_list <- window_H_e_list
empirical_hotspot_tables[[i]]$Average_H_e <- mean(empirical_hotspot_tables[[i]]$H_e_list)
}
View(empirical_hotspot_tables)
for (i in seq_along(neutral_model_tables)) {
# Extract table name and data frame
table_info <- neutral_model_tables[[i]]
table_data <- table_info$data
# Calculate expected heterozygosity for each window
window_H_e_list <- c()  # Initialize an empty list to store expected heterozygosity values
# Loop through each row in the table data
for (j in 1:nrow(table_data)) {
# Extract the MAF (p value)
p <- table_data[j, "MAF"]
# Calculate expected heterozygosity using the provided function
expected_heterozygosity <- calculate_expected_heterozygosity(p)
# Append the calculated expected heterozygosity to the list
window_H_e_list <- c(window_H_e_list, expected_heterozygosity)
}
# Assign the calculated expected heterozygosity list to the H_e attribute of table_info
neutral_model_tables[[i]]$H_e_list <- window_H_e_list
neutral_model_tables[[i]]$Average_H_e <- mean(neutral_model_tables[[i]]$H_e_list)
}
View(neutral_model_tables)
# Clean the working environment
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
# Set the path to your GitHub folder
YOUR_GITHUB_ROOT_DIRECTORY <- "C:/Users/jonat/GitHub"
# Defining the relative path in the repository
repository_path <- "Computational-modelling-of-genomic-inbreeding-and-roh-islands-in-extremely-small-populations"
####################################
# Defining the input files
####################################
ROH_hotspot_allele_freq_dir <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"results/ROH-Hotspots/empirical/german_shepherd/gosling_plots/hotspots_allele_freq")
neutral_model_allele_freq_dir <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"results/PLINK/simulated/allele_freq")
####################################
# Defining the working directory
####################################
output_dir_sweep_test <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"results/Sweep_test/german_shepherd")
if (!dir.exists(output_dir_sweep_test)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_sweep_test,recursive = TRUE)
}
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir_sweep_test)
library(knitr)
# Set the working directory to the directory with allele frequencies for the different ROH-hotspots
setwd(ROH_hotspot_allele_freq_dir)
# Get a list of all .bed files in the directory
bed_files <- list.files(pattern = "\\.bed$")
# Create an empty list to store information for the different ROH-hotspots in
empirical_hotspot_tables <- list()
# Loop through each .bed file (ROH-hotspot allele frequency window-file)
for (file in bed_files) {
# Extract chromosome number and window number from file name
chromosome <- sub(".*chr([0-9]+)_.*", "\\1", file)
window <- sub(".*window_([0-9]+)_.*", "\\1", file)
# Create table name
table_name <- paste("Hotspot_chr", chromosome, "_window_", window, "_allele_freq", sep = "")
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header and split it into column names
column_names <- sub("#", "", header)
column_names <- strsplit(column_names, "\t")[[1]]
# Read the .bed file into a data frame, skipping commented lines
bed_data <- read.table(file, header = FALSE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names)
# Create a list with table name and corresponding data frame
table_info <- list(name = table_name, data = bed_data)
# Append the table info to the list
empirical_hotspot_tables <- c(empirical_hotspot_tables, list(table_info))
}
# Print the list of empirical_hotspot_tables
#print(empirical_hotspot_tables)
# Set the working directory to the directory containing the frequency files for the simulated data
setwd(neutral_model_allele_freq_dir)
# Get a list of all the .tsv frequency files in the current directory
# (these .tsv files are identical to the .frq files, but with a POS-column added, to associate the SNP-markers with a genomic position)
frq_files <- list.files(pattern = "\\.tsv$")
# Initialize an empty list to store neutral model tables
neutral_model_tables <- list()
# Loop through each .frq file
for (file in frq_files) {
# Extract the table name from the file name
table_name <- gsub(".frq$", "", file)
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header and split it into column names
column_names <- sub("#", "", header)
column_names <- strsplit(column_names, "\t")[[1]]
# Read the .tsv frequency file into a data frame
#frq_data <- read.table(file, header = TRUE)
frq_data <- read.table(file, header = FALSE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names)
# Create a list with table name and corresponding data frame
table_info <- list(name = table_name, data = frq_data)
# Append the table info to the list
neutral_model_tables <- c(neutral_model_tables, list(table_info))
}
# Print the list of neutral_model_tables
#print(neutral_model_tables)
calculate_expected_heterozygosity <- function(p) {
# Calculate expected heterozygosity
heterozygosity <- 2 * p * (1 - p)
# Return the result
return(heterozygosity)
}
for (i in seq_along(empirical_hotspot_tables)) {
# Extract table name and data frame
table_info <- empirical_hotspot_tables[[i]]
table_data <- table_info$data
# Calculate expected heterozygosity for each window
window_H_e_list <- c()  # Initialize an empty list to store expected heterozygosity values
# Loop through each row in the table data
for (j in 1:nrow(table_data)) {
# Extract the MAF (p value)
p <- table_data[j, "MAF"]
# Calculate expected heterozygosity using the provided function
expected_heterozygosity <- calculate_expected_heterozygosity(p)
# Append the calculated expected heterozygosity to the list
window_H_e_list <- c(window_H_e_list, expected_heterozygosity)
}
# Assign the calculated expected heterozygosity list to the H_e attribute of table_info
empirical_hotspot_tables[[i]]$H_e_list <- window_H_e_list
empirical_hotspot_tables[[i]]$Average_H_e <- mean(empirical_hotspot_tables[[i]]$H_e_list)
}
View(empirical_hotspot_tables)
for (i in seq_along(neutral_model_tables)) {
# Extract table name and data frame
table_info <- neutral_model_tables[[i]]
table_data <- table_info$data
# Calculate expected heterozygosity for each window
window_H_e_list <- c()  # Initialize an empty list to store expected heterozygosity values
# Loop through each row in the table data
for (j in 1:nrow(table_data)) {
# Extract the MAF (p value)
p <- table_data[j, "MAF"]
# Calculate expected heterozygosity using the provided function
expected_heterozygosity <- calculate_expected_heterozygosity(p)
# Append the calculated expected heterozygosity to the list
window_H_e_list <- c(window_H_e_list, expected_heterozygosity)
}
# Assign the calculated expected heterozygosity list to the H_e attribute of table_info
neutral_model_tables[[i]]$H_e_list <- window_H_e_list
neutral_model_tables[[i]]$Average_H_e <- mean(neutral_model_tables[[i]]$H_e_list)
}
View(neutral_model_tables)
neutral_model_tables[[1]][["data"]][["POS"]]
neutral_model_tables[[1]][["data"]][["POS"]][1]
neutral_model_tables[[1]][["H_e_list"]][1]
# Clean the working environment
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
# Set the path to your GitHub folder
YOUR_GITHUB_ROOT_DIRECTORY <- "C:/Users/jonat/GitHub"
# Defining the relative path in the repository
repository_path <- "Computational-modelling-of-genomic-inbreeding-and-roh-islands-in-extremely-small-populations"
####################################
# Defining the input files
####################################
ROH_hotspot_allele_freq_dir <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"results/ROH-Hotspots/empirical/german_shepherd/gosling_plots/hotspots_allele_freq")
neutral_model_allele_freq_dir <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"results/PLINK/simulated/allele_freq")
####################################
# Defining the working directory
####################################
output_dir_sweep_test <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"results/Sweep_test/german_shepherd")
if (!dir.exists(output_dir_sweep_test)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_sweep_test,recursive = TRUE)
}
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir_sweep_test)
library(knitr)
# Set the working directory to the directory with allele frequencies for the different ROH-hotspots
setwd(ROH_hotspot_allele_freq_dir)
# Get a list of all .bed files in the directory
bed_files <- list.files(pattern = "\\.bed$")
# Create an empty list to store information for the different ROH-hotspots in
empirical_hotspot_tables <- list()
# Loop through each .bed file (ROH-hotspot allele frequency window-file)
for (file in bed_files) {
# Extract chromosome number and window number from file name
chromosome <- sub(".*chr([0-9]+)_.*", "\\1", file)
window <- sub(".*window_([0-9]+)_.*", "\\1", file)
# Create table name
table_name <- paste("Hotspot_chr", chromosome, "_window_", window, "_allele_freq", sep = "")
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header and split it into column names
column_names <- sub("#", "", header)
column_names <- strsplit(column_names, "\t")[[1]]
# Read the .bed file into a data frame, skipping commented lines
bed_data <- read.table(file, header = FALSE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names)
# Create a list with table name and corresponding data frame
table_info <- list(name = table_name, data = bed_data)
# Append the table info to the list
empirical_hotspot_tables <- c(empirical_hotspot_tables, list(table_info))
}
# Print the list of empirical_hotspot_tables
#print(empirical_hotspot_tables)
# Set the working directory to the directory containing the frequency files for the simulated data
setwd(neutral_model_allele_freq_dir)
# Get a list of all the .tsv frequency files in the current directory
# (these .tsv files are identical to the .frq files, but with a POS-column added, to associate the SNP-markers with a genomic position)
frq_files <- list.files(pattern = "\\.tsv$")
# Initialize an empty list to store neutral model tables
neutral_model_tables <- list()
# Loop through each .frq file
for (file in frq_files) {
# Extract the table name from the file name
table_name <- gsub(".frq$", "", file)
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header and split it into column names
column_names <- sub("#", "", header)
column_names <- strsplit(column_names, "\t")[[1]]
# Read the .tsv frequency file into a data frame
#frq_data <- read.table(file, header = TRUE)
frq_data <- read.table(file, header = FALSE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names)
# Create a list with table name and corresponding data frame
table_info <- list(name = table_name, data = frq_data)
# Append the table info to the list
neutral_model_tables <- c(neutral_model_tables, list(table_info))
}
# Print the list of neutral_model_tables
#print(neutral_model_tables)
calculate_expected_heterozygosity <- function(p) {
# Calculate expected heterozygosity
heterozygosity <- 2 * p * (1 - p)
# Return the result
return(heterozygosity)
}
for (i in seq_along(empirical_hotspot_tables)) {
# Extract table name and data frame
table_info <- empirical_hotspot_tables[[i]]
table_data <- table_info$data
# Calculate expected heterozygosity for each window
window_H_e_list <- c()  # Initialize an empty list to store expected heterozygosity values
# Loop through each row in the table data
for (j in 1:nrow(table_data)) {
# Extract the MAF (p value)
p <- table_data[j, "MAF"]
# Calculate expected heterozygosity using the provided function
expected_heterozygosity <- calculate_expected_heterozygosity(p)
# Append the calculated expected heterozygosity to the list
window_H_e_list <- c(window_H_e_list, expected_heterozygosity)
}
# Assign the calculated expected heterozygosity list to the H_e attribute of table_info
empirical_hotspot_tables[[i]]$H_e_list <- window_H_e_list
empirical_hotspot_tables[[i]]$Average_H_e <- mean(empirical_hotspot_tables[[i]]$H_e_list)
}
View(empirical_hotspot_tables)
for (i in seq_along(neutral_model_tables)) {
# Extract table name and data frame
table_info <- neutral_model_tables[[i]]
table_data <- table_info$data
# Calculate expected heterozygosity for each window
window_H_e_list <- c()  # Initialize an empty list to store expected heterozygosity values
# Loop through each row in the table data
for (j in 1:nrow(table_data)) {
# Extract the MAF (p value)
p <- table_data[j, "MAF"]
# Calculate expected heterozygosity using the provided function
expected_heterozygosity <- calculate_expected_heterozygosity(p)
# Append the calculated expected heterozygosity to the list
window_H_e_list <- c(window_H_e_list, expected_heterozygosity)
}
# Assign the calculated expected heterozygosity list to the H_e attribute of table_info
neutral_model_tables[[i]]$H_e_list <- window_H_e_list
neutral_model_tables[[i]]$Average_H_e <- mean(neutral_model_tables[[i]]$H_e_list)
}
View(neutral_model_tables)
view(windows)
View(windows)
# Define the window size
window_size <- 100 * 10^3
# Initialize an empty list to store SNP positions and H_e values for each window
windows <- list()
# Iterate through each table in neutral_model_tables
for (i in seq_along(neutral_model_tables)) {
# Initialize an empty list to store SNP positions and H_e values for the current table
table_windows <- list()
# Get the SNP positions and H_e values for the current table
snp_positions <- neutral_model_tables[[i]][["data"]][["POS"]]
he_values <- neutral_model_tables[[i]][["H_e_list"]]
# Initialize an empty vector to store H_e values for each window
he_values_window <- rep(NA, ceiling(max(snp_positions) / window_size))
# Iterate through each SNP position and H_e value
for (j in seq_along(snp_positions)) {
# Determine the window index for the current SNP
window_index <- ceiling(snp_positions[j] / window_size)
# Assign the corresponding H_e value to the window
he_values_window[window_index] <- he_values[j]
}
# Append the SNP positions and H_e values for the current table to the main windows list
windows[[i]] <- list(POS = table(snp_positions, he_values_window))
}
# Define the window size
window_size <- 100 * 10^3
# Initialize an empty list to store SNP positions and H_e values for each window
windows <- list()
# Iterate through each table in neutral_model_tables
for (i in seq_along(neutral_model_tables)) {
# Initialize an empty list to store SNP positions and H_e values for the current table
table_windows <- list()
# Get the SNP positions and H_e values for the current table
snp_positions <- neutral_model_tables[[i]][["data"]][["POS"]]
he_values <- neutral_model_tables[[i]][["H_e_list"]]
# Initialize an empty vector to store H_e values for each window
he_values_window <- rep(NA, ceiling(max(snp_positions) / window_size))
# Iterate through each SNP position and H_e value
for (j in seq_along(snp_positions)) {
# Determine the window index for the current SNP
window_index <- ceiling(snp_positions[j] / window_size)
# Assign the corresponding H_e value to the window
he_values_window[window_index] <- he_values[j]
}
# Append the SNP positions and H_e values for the current table to the main windows list
windows[[i]] <- list(POS = table(snp_positions, he_values_window))
}
# Define the window size
window_size <- 100 * 10^3
# Initialize an empty list to store SNP positions and H_e values for each window
windows <- list()
# Iterate through each table in neutral_model_tables
for (i in seq_along(neutral_model_tables)) {
# Get the SNP positions and H_e values for the current table
snp_positions <- neutral_model_tables[[i]][["data"]][["POS"]]
he_values <- neutral_model_tables[[i]][["H_e_list"]]
# Determine the number of windows needed
num_windows <- ceiling(max(snp_positions) / window_size)
# Initialize an empty vector to store H_e values for each window
he_values_window <- rep(NA, num_windows)
# Iterate through each SNP position and H_e value
for (j in seq_along(snp_positions)) {
# Determine the window index for the current SNP
window_index <- ceiling(snp_positions[j] / window_size)
# Assign the corresponding H_e value to the window
he_values_window[window_index] <- he_values[j]
}
# Create a table with SNP positions and corresponding H_e values for each window
table_data <- data.frame(POS = seq(0, num_windows - 1) * window_size,
H_e = he_values_window)
# Append the table data to the main windows list
windows[[i]] <- table_data
}
View(windows)
windows[[1]][["POS"]]
windows[[2]][["POS"]]
View(neutral_model_tables)
# Define the window size
window_size <- 100 * 10^3
# Initialize an empty list to store windows for each simulation
simulation_windows <- list()
# Iterate through each simulation
for (sim_index in seq_along(neutral_model_tables)) {
# Get the SNP positions and H_e values for the current simulation
snp_positions <- neutral_model_tables[[sim_index]][["data"]][["POS"]]
he_values <- neutral_model_tables[[sim_index]][["H_e_list"]]
# Determine the number of windows needed
num_windows <- ceiling(max(snp_positions) / window_size)
# Initialize an empty list to store windows for the current simulation
sim_windows <- list()
# Iterate through each window
for (window_index in seq_len(num_windows)) {
# Determine the start and end positions of the current window
window_start <- (window_index - 1) * window_size
window_end <- window_start + window_size
# Find the indices of SNPs within the current window
snp_indices <- which(snp_positions >= window_start & snp_positions < window_end)
# Extract the SNP positions and H_e values for the current window
window_snp_positions <- snp_positions[snp_indices]
window_he_values <- he_values[snp_indices]
# Create a sub-table for the current window
window_data <- data.frame(POS = window_snp_positions, H_e = window_he_values)
# Append the sub-table to the list of windows for the current simulation
sim_windows[[window_index]] <- window_data
}
# Append the list of windows for the current simulation to the main list
simulation_windows[[sim_index]] <- sim_windows
}
View(simulation_windows)
simulation_windows[[1]][[940]]
simulation_windows[[1]][[1]][["POS"]]
simulation_windows[[1]][[1]][["H_e"]]
