selection_model_upper_ci <- c()
selection_model_names <- c(rownames(summary(H_e_5th_percentiles_Selection_models)))
# Loop through each selection_coefficient in H_e_5th_percentiles_Selection_models
for (selection_coefficient in H_e_5th_percentiles_Selection_models) {
CI <- selection_coefficient$Bootstrap_CI_Estimated_Mean_H_e_5th_percentile
# Append values to the lists
selection_model_avg_values <- c(selection_model_avg_values, selection_coefficient$Estimated_Mean_H_e_5th_percentile)
selection_model_lower_ci <- c(selection_model_lower_ci, CI[1])
selection_model_upper_ci <- c(selection_model_upper_ci, CI[2])
}
# Extract neutral model values and CI bounds
neutral_avg_H_e_5th_percentile <- H_e_5th_percentiles_Neutral_model[["Estimated_Mean_H_e_5th_percentile"]]
neutral_lower_ci <- H_e_5th_percentiles_Neutral_model[["Bootstrap_CI_Estimated_Mean_H_e_5th_percentile"]][1]
neutral_upper_ci <- H_e_5th_percentiles_Neutral_model[["Bootstrap_CI_Estimated_Mean_H_e_5th_percentile"]][2]
# Extract empirical model value
# empirical_avg_H_e_5th_percentile <- F_ROH_table_Empirical_Data[["Avg_H_e_5th_percentile"]]
empirical_avg_H_e_5th_percentile <- NA
empirical_lower_ci <- NA # Placeholder for confidence interval lower bound
empirical_upper_ci <- NA # Placeholder for confidence interval upper bound
# Combine all values into a data frame
H_e_5th_percentile_values <- data.frame(
Model = c(rep("Selection", length(selection_model_avg_values)), "Neutral", "Empirical"),
H_e_5th_percentile = c(selection_model_avg_values, neutral_avg_H_e_5th_percentile, empirical_avg_H_e_5th_percentile),
Lower_CI = c(selection_model_lower_ci, neutral_lower_ci, empirical_lower_ci),
Upper_CI = c(selection_model_upper_ci, neutral_upper_ci, empirical_upper_ci)
)
# Format all numeric values to 5 decimal places
H_e_5th_percentile_values$H_e_5th_percentile <- as.numeric(format(round(H_e_5th_percentile_values$H_e_5th_percentile, 5), nsmall = 5))
H_e_5th_percentile_values$Lower_CI <- as.numeric(format(round(H_e_5th_percentile_values$Lower_CI, 5), nsmall = 5))
H_e_5th_percentile_values$Upper_CI <- as.numeric(format(round(H_e_5th_percentile_values$Upper_CI, 5), nsmall = 5))
# # Update the Model column for selection models
# H_e_5th_percentile_values$Model[1:length(selection_model_names)] <- selection_model_names
# Extract labels for the different selection coefficients
selection_labels <- gsub(".*_(s\\d+)_.*", "\\1", selection_model_names)
H_e_5th_percentile_values$Model[1:length(selection_model_names)] <- selection_labels
# Sort the data frame based on H_e_5th_percentile column
H_e_5th_percentile_values_sorted <- H_e_5th_percentile_values[order(as.numeric(H_e_5th_percentile_values$H_e_5th_percentile)), ]
# Print the table using knitr::kable()
knitr::kable(H_e_5th_percentile_values_sorted, row.names = FALSE)
cat("\n ROH-hotspot threshold comparison between the different datasets")
# Print the table using knitr::kable()
knitr::kable(ROH_hotspot_threshold_values_sorted, row.names = FALSE)
# Print the table using knitr::kable()
knitr::kable(F_ROH_values_sorted, row.names = FALSE)
setwd(Sweep_test_dir)
# Pattern for finding files containing "F_ROH" and ending with ".tsv"
pattern <- "^.*neutral_model.*.tsv$"
selection_testing_files <- list.files(pattern = pattern)
# selection_testing_files
# Extracting the ROH-hotspot threshold value from the suffix of the filename
parts <- unlist(strsplit(selection_testing_files[1], "threshold_")) # Split the string by "threshold_"
# Extract the decimal number using regular expressions
fifth_percentile_H_e_neutral_model <- as.numeric(gsub("\\.tsv", "", unlist(strsplit(parts[length(parts)], "_"))[1]))
for (file in selection_testing_files) {
file_name <- file
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header and split it into column names
column_names <- sub("#", "", header)
column_names <- strsplit(column_names, "\t")[[1]]
# # Read the .tsv frequency file into a data frame
Selection_testing_results <- read.table(selection_testing_files, header = TRUE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names)
# Remove "_allele_freq" from the names
Selection_testing_results$Name <- gsub("_allele_freq$", "", Selection_testing_results$Name)
}
paste0("Selection test results")
paste0("ROH-hotspot windows with an mean H_e Value lower or equal to the fifth percentile of the neutral models average H_e are classified as being under selection")
paste0("5th percentile of the neutral model is: ",fifth_percentile_H_e_neutral_model)
# Print the table using knitr::kable()
knitr::kable(Selection_testing_results, row.names = FALSE)
# Subset the dataframe to extract rows where Under_selection is "Yes"
under_selection_rows <- subset(Selection_testing_results, Under_selection == "Yes")
paste0("ROH-hotspots under selection:")
knitr::kable(under_selection_rows, row.names = FALSE)
View(Selection_testing_results)
setwd(Selection_strength_test_dir)
# Pattern for finding files containing "F_ROH" and ending with ".tsv"
pattern <- "^.*selection_model.*.tsv$"
selection_strength_testing_files <- list.files(pattern = pattern)
# selection_testing_files
# Initialize an empty list to store Selection_Strength_test_results_tables
Selection_Strength_test_results_tables <- list()
# Loop through each selection coefficient and its associated file
for (i in seq_along(selection_strength_testing_files)) {
# Extract the selection coefficient from the file name
selection_coefficient <- sub(".*(selection_model_s\\d+_chr\\d+).*", "\\1", selection_strength_testing_files[i])
# Read the .tsv file into a data frame
subtable <- read.table(selection_strength_testing_files[i], header = TRUE, comment.char = "#", stringsAsFactors = FALSE)
Selection_Strength_test_results_tables[[selection_coefficient]]$file_name <- selection_strength_testing_files[i]
# Add the subtable to the list with the selection coefficient as its name
Selection_Strength_test_results_tables[[selection_coefficient]]$results <- subtable
# Extracting the ROH-hotspot threshold value from the suffix of the filename
parts <- unlist(strsplit(selection_strength_testing_files[i], "threshold_")) # Split the string by "threshold_"
# # Extract the decimal number using regular expressions
fifth_percentile_H_e_selection_coefficient <- as.numeric(gsub("\\.tsv", "", unlist(strsplit(parts[length(parts)], "_"))[1]))
Selection_Strength_test_results_tables[[selection_coefficient]]$fifth_percentile_H_e_threshold <- fifth_percentile_H_e_selection_coefficient
}
# # View the Selection_Strength_test_results_tables
# Selection_Strength_test_results_tables
# View the dataframe
# View(Selection_Strength_test_results_tables)
#(Selection_Strength_test_df)
# Initialize an empty list to store the new table
hotspot_under_selection_H_e_table <- list()
# Loop through each row in under_selection_rows
for (i in 1:nrow(under_selection_rows)) {
# Extract information for the current ROH-hotspot window
current_window <- under_selection_rows[i, "Name"]
under_selection <- under_selection_rows[i, "Under_selection"]
Hotspot_Avg_H_e <- under_selection_rows[i, "Window_based_Average_H_e"]
# Initialize a subtable for the current ROH-hotspot window
subtable <- list()
# Loop through each selection coefficient
for (j in seq_along(Selection_Strength_test_results_tables)) {
# Get the selection coefficient and its corresponding table
selection_coefficient <- names(Selection_Strength_test_results_tables)[j]
table <- Selection_Strength_test_results_tables[[j]]
# Extract the filename and the fifth percentile H_e threshold
filename <- table$file_name
fifth_percentile_H_e_threshold <- table$fifth_percentile_H_e_threshold
if( fifth_percentile_H_e_threshold < fifth_percentile_H_e_neutral_model) {
# Create a subtable for the current selection coefficient
subtable[[selection_coefficient]] <- list(
fifth_percentile_H_e_threshold = fifth_percentile_H_e_threshold
)
}
}
# Add the subtable for the current ROH-hotspot window to the new table
hotspot_under_selection_H_e_table[[current_window]] <- subtable
hotspot_under_selection_H_e_table[[current_window]]$Hotspot_Avg_H_e <- Hotspot_Avg_H_e
}
# View the new table
# View(hotspot_under_selection_H_e_table)
# Function to generate plot for each hotspot
generate_plot <- function(hotspot_name, empirical_value) {
# Remove the empirical model from the plotting data
plotting_data <- H_e_5th_percentile_values[H_e_5th_percentile_values$Model != "Empirical", ]
# Add a column indicating whether the empirical H_e is within the CI of each model
plotting_data$Empirical_Within_CI <- (plotting_data$Lower_CI <= empirical_value) & (plotting_data$Upper_CI >= empirical_value)
# Determine the y-axis limits
min_y <- min(c(plotting_data$Lower_CI, empirical_value))
max_y <- max(c(plotting_data$Upper_CI, empirical_value))
# Create the plot
p <- ggplot(plotting_data, aes(x = Model, y = H_e_5th_percentile, color = Empirical_Within_CI)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
geom_hline(aes(yintercept = empirical_value), linetype = "dashed", color = "red", linewidth = 1, show.legend = TRUE) +
labs(title = paste("H_e 5th % and CI for", hotspot_name),
x = "Model",
y = "H_e 5th percentile",
color = "Hotspot H_e 5th %\nwithin CI",
linetype = "Empirical H_e") +
scale_linetype_manual(name = "Empirical H_e", values = c("dashed")) +
scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "black"), labels = c("TRUE" = "Inside CI", "FALSE" = "Outside CI")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(limits = c(min_y, max_y),
breaks = round(seq(min_y, max_y, length.out = 10), 5))
# Print the plot
print(p)
# Print which models the empirical H_e is inside of
inside_models <- plotting_data$Model[plotting_data$Empirical_Within_CI]
outside_models <- plotting_data$Model[!plotting_data$Empirical_Within_CI]
cat("Models where empirical H_e is within CI for", hotspot_name, ":\n")
print(inside_models)
cat("\nModels where empirical H_e is outside CI for", hotspot_name, ":\n")
print(outside_models)
}
# Loop through each hotspot and generate plots
for (i in 1:nrow(Selection_testing_results)) {
hotspot_name <- Selection_testing_results$Name[i]
empirical_value <- Selection_testing_results$Window_based_Average_H_e[i]
generate_plot(hotspot_name, empirical_value)
}
# Initialize empty vectors to store selection coefficients and thresholds
selection_labels <- c()
thresholds <- c()
# Extract selection coefficients and thresholds from the first hotspot data
hotspot_name <- names(hotspot_under_selection_H_e_table)[1]
hotspot_data <- hotspot_under_selection_H_e_table[[hotspot_name]]
# Extract selection coefficient names and fifth percentile H_e thresholds
selection_coefficients <- names(hotspot_data)[-length(hotspot_data)]  # Exclude the Hotspot_Avg_H_e entry
for (coef in selection_coefficients) {
selection_labels <- c(selection_labels, gsub(".*_(s\\d+)_.*", "\\1", coef))
thresholds <- c(thresholds, hotspot_data[[coef]]$fifth_percentile_H_e_threshold)
}
# Create a dataframe with selection coefficients and thresholds
selection_table <- data.frame(
Selection_Coefficient = selection_labels,
H_e_Threshold = as.numeric(thresholds)
)
# Print the table using knitr::kable()
knitr::kable(selection_table, row.names = FALSE)
library(ggplot2)
# H_e_hotspot_visualization creates a visualization of the H_e distribution of the different selection coefficients, in comparison to each ROH-hotspot
H_e_hotspot_visualization <- function(hotspot_name, hotspot_data) {
# Extract the Hotspot_Avg_H_e value
hotspot_avg_H_e <- hotspot_data$Hotspot_Avg_H_e
# Extract selection coefficient names and fifth percentile H_e thresholds
selection_coefficients <- names(hotspot_data)[-length(hotspot_data)]  # Exclude the Hotspot_Avg_H_e entry
thresholds <- sapply(hotspot_data[-length(hotspot_data)], function(x) x$fifth_percentile_H_e_threshold)
# Extract labels for the different selection coefficients
selection_labels <- gsub(".*_(s\\d+)_.*", "\\1", selection_coefficients)
# Create a dataframe with selection coefficients and thresholds
df <- data.frame(
Selection_Coefficient = selection_labels,
H_e = thresholds
)
# Plot the visualization
p <- ggplot(df, aes(x = Selection_Coefficient, y = H_e)) +
geom_point(size = 3, color = "blue") +
geom_hline(yintercept = hotspot_avg_H_e, linetype = "dashed", color = "red", size = 1) +
geom_text(aes(x = 1, y = hotspot_avg_H_e, label = paste("Hotspot Avg H_e =", round(hotspot_avg_H_e, 5))),
color = "red", hjust = -0.1, vjust = -1) +
labs(title = paste("5th percentile of the extreme H_e values", hotspot_name),
x = "Selection Coefficient",
y = "H_e Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
return(p)
}
# Analyze and visualize each ROH hotspot independently
for (hotspot_name in names(hotspot_under_selection_H_e_table)) {
cat("\nHotspot Name:", hotspot_name, "\n")
hotspot_data <- hotspot_under_selection_H_e_table[[hotspot_name]]
plot <- H_e_hotspot_visualization(hotspot_name, hotspot_data)
print(plot)
}
causative_variant_window_tables_Selection_Model[["selection_model_s03_chr3"]][[4]]
causative_variant_window_tables_Selection_Model[["selection_model_s03_chr3"]][[5]]
ROH_freq_tables_Neutral_Model[[5]]
ROH_freq_tables_Selection_Model[["selection_model_s03_chr3"]][[5]]
# Clean the working environment
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
####################################
# Defining the working directory
####################################
# Set the path to your GitHub folder
YOUR_GITHUB_ROOT_DIRECTORY <- "C:/Users/jonat/GitHub"
# Defining the relative path in the repository
repository_path <- file.path(YOUR_GITHUB_ROOT_DIRECTORY,"Computational-modelling-of-genomic-inbreeding-and-roh-islands-in-extremely-small-populations")
results_dir <- file.path(repository_path,"results")
ROH_hotspots_dir <- file.path(results_dir,"ROH-Hotspots")
raw_selection_data_dir <- file.path(repository_path,"data/raw/simulated/selection_model")
variant_position_dir <- file.path(raw_selection_data_dir,"variant_position")
variant_freq_plots_dir <- file.path(raw_selection_data_dir,"variant_freq_plots")
output_dir <- file.path(results_dir,"causative_variant")
if (!dir.exists(output_dir)) {
# Create the working directory if it doesn't exist
dir.create(output_dir, recursive = TRUE)
}
selection_pop_roh_freq_dir <- file.path(results_dir,"Bedtools/coverage/simulated/selection_model/pop_roh_freq")
####################################
# Defining the input file
####################################
#input_pop_roh_freq_file <- file.path(selection_pop_roh_freq_dir,"sim_5_selection_model_s08_chr3_ROH_freq.bed")
input_pop_roh_freq_file <- file.path(selection_pop_roh_freq_dir,"sim_5_selection_model_s03_chr3_ROH_freq.bed")
## Extracting the prefix of the file used
# Extracting the basename (filename without extension) from the file path
filename <- basename(input_pop_roh_freq_file)
# Split the filename by "_ROH_freq.bed" and get the first part
prefix <- strsplit(filename, "_ROH_freq.bed")[[1]][1]
# Output the prefix
print(prefix)
#input_selection_coefficient_variant_positions_file <- file.path(variant_position_dir,"variant_position_s_0.8.tsv")
input_selection_coefficient_variant_positions_file <- file.path(variant_position_dir,"variant_position_s03_chr3.tsv")
chr_simulated="chr3"
# Extract the chromosome number and convert and convert it to numeric
chr_number <- as.numeric(sub("chr", "", chr_simulated))
####################################
# Defining the output dirs
####################################
#output_variant_window_lengths_file <- file.path(output_dir,"causative_variant_window_lengths_s_0.8.tsv")
output_variant_window_lengths_file <- file.path(output_dir,"causative_variant_window_lengths_s_0.3.tsv")
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir)
####################################
# Defining Input parameters
####################################
# roh_hotspot_threshold_percentage <- 0.01 # 0.01 represents top 1 % most homozygous region
# max_hotspot_windows_gap <- 2*10^6 # ROH-hotspot windows that are less than 2Mb apart are merged together (see section 1.3)
dropoff_from_causative_variant_percentage <- 0.1 # 0.01 represents top 1 % most homozygous region
# # Verify the current working directory
# getwd()
library(knitr)
setwd(variant_position_dir)
# Read the data without treating "#" as a comment
Variant_positions_table <- read.table(input_selection_coefficient_variant_positions_file, header = FALSE, sep = "\t", comment.char = "")
# Check if the output_sim_files_basename already exists in the file
existing_row_index <- which(Variant_positions_table$V1 == prefix)
existing_row_index
if (length(existing_row_index) > 0) {
variant_position_bp <- Variant_positions_table$V2[existing_row_index]
} else {
cat("Error, the position of the causative variant for the current simulation replicate is unknwon")
}
variant_position_bp
# Find row where data$V1 =
# then: variant_pos = $V2 of that row.
Variant_positions_table
# Read the data without treating "#" as a comment
Pop_roh_freq_table <- read.table(input_pop_roh_freq_file, header = TRUE, sep = "\t", comment.char = "")
View(Pop_roh_freq_table)
# Assigning column names
colnames(Pop_roh_freq_table) <- c("CHR", "POS1", "POS2", "COUNT", "FREQUENCY")
# Find the row where the variant_position_bp is within POS1 and POS2, and CHR equals chr_number
row_with_variant_chr <- Pop_roh_freq_table[Pop_roh_freq_table$POS1 <= variant_position_bp &
variant_position_bp <= Pop_roh_freq_table$POS2 &
Pop_roh_freq_table$CHR == chr_number, ]
# Display the row
print(row_with_variant_chr)
# If no such row is found, stop
if (nrow(row_with_variant_chr) == 0) {
stop("No row found with the specified variant position and chromosome number.")
}
# Get the index of the row_with_variant_chr in the original table
variant_row_index <- which(Pop_roh_freq_table$POS1 == row_with_variant_chr$POS1 &
Pop_roh_freq_table$POS2 == row_with_variant_chr$POS2 &
Pop_roh_freq_table$CHR == row_with_variant_chr$CHR)
# Initialize the variant window table with the row_with_variant_chr
variant_window_table <- row_with_variant_chr
# Define the frequency threshold
frequency_threshold <- row_with_variant_chr$FREQUENCY - dropoff_from_causative_variant_percentage
# Function to incorporate rows into the variant window table
incorporate_rows <- function(start_index, direction) {
i <- start_index
while (TRUE) {
i <- i + direction
if (i < 1 || i > nrow(Pop_roh_freq_table)) break
current_row <- Pop_roh_freq_table[i, ]
if (current_row$FREQUENCY >= frequency_threshold) {
variant_window_table <<- rbind(variant_window_table, current_row)
} else {
break
}
}
}
# Incorporate rows before and after the row_with_variant_chr
incorporate_rows(variant_row_index, -1)  # Look backwards
incorporate_rows(variant_row_index, 1)   # Look forwards
View(variant_window_table)
# Sort the data frame based on F_ROH column
variant_window_table_sorted <- variant_window_table[order(as.numeric(variant_window_table$POS1)), ]
# Display the variant window table
print(variant_window_table_sorted)
View(variant_window_table_sorted)
length_window <- max(variant_window_table_sorted$POS2) - min(variant_window_table_sorted$POS1) + 1
length_window_MB <- length_window / (10^6)
length_window_MB
# Define column names for the table
column_names <- c("#CHR", "POS1", "POS2", "COUNT", "FREQUENCY")
# Set the column names of the table
colnames(variant_window_table_sorted) <- column_names
filename <- file.path(output_dir, paste(prefix, "_causative_variant_window_", length_window_MB, "_MB", ".bed", sep = ""))
# Set the column names of the table
colnames(variant_window_table_sorted) <- column_names
# Write data to TSV file without quotes and with tab separation
write.table(variant_window_table_sorted, file = filename, quote = FALSE, col.names = TRUE, row.names = FALSE, sep = "\t")
Pop_roh_freq_table$CHR
# Clean the working environment
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
####################################
# Defining the working directory
####################################
# Set the path to your GitHub folder
YOUR_GITHUB_ROOT_DIRECTORY <- "C:/Users/jonat/GitHub"
# Defining the relative path in the repository
repository_path <- file.path(YOUR_GITHUB_ROOT_DIRECTORY,"Computational-modelling-of-genomic-inbreeding-and-roh-islands-in-extremely-small-populations")
results_dir <- file.path(repository_path,"results")
ROH_hotspots_dir <- file.path(results_dir,"ROH-Hotspots")
raw_selection_data_dir <- file.path(repository_path,"data/raw/simulated/selection_model")
variant_position_dir <- file.path(raw_selection_data_dir,"variant_position")
variant_freq_plots_dir <- file.path(raw_selection_data_dir,"variant_freq_plots")
output_dir <- file.path(results_dir,"causative_variant")
if (!dir.exists(output_dir)) {
# Create the working directory if it doesn't exist
dir.create(output_dir, recursive = TRUE)
}
selection_pop_roh_freq_dir <- file.path(results_dir,"Bedtools/coverage/simulated/selection_model/pop_roh_freq")
####################################
# Defining the input file
####################################
#input_pop_roh_freq_file <- file.path(selection_pop_roh_freq_dir,"sim_5_selection_model_s08_chr3_ROH_freq.bed")
input_pop_roh_freq_file <- file.path(selection_pop_roh_freq_dir,"sim_5_selection_model_s03_chr3_ROH_freq.bed")
## Extracting the prefix of the file used
# Extracting the basename (filename without extension) from the file path
filename <- basename(input_pop_roh_freq_file)
# Split the filename by "_ROH_freq.bed" and get the first part
prefix <- strsplit(filename, "_ROH_freq.bed")[[1]][1]
# Output the prefix
print(prefix)
#input_selection_coefficient_variant_positions_file <- file.path(variant_position_dir,"variant_position_s_0.8.tsv")
input_selection_coefficient_variant_positions_file <- file.path(variant_position_dir,"variant_position_s03_chr3.tsv")
chr_simulated="chr3"
# Extract the chromosome number and convert and convert it to numeric
chr_number <- as.numeric(sub("chr", "", chr_simulated))
####################################
# Defining the output dirs
####################################
#output_variant_window_lengths_file <- file.path(output_dir,"causative_variant_window_lengths_s_0.8.tsv")
output_variant_window_lengths_file <- file.path(output_dir,"causative_variant_window_lengths_s_0.3.tsv")
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir)
####################################
# Defining Input parameters
####################################
# roh_hotspot_threshold_percentage <- 0.01 # 0.01 represents top 1 % most homozygous region
# max_hotspot_windows_gap <- 2*10^6 # ROH-hotspot windows that are less than 2Mb apart are merged together (see section 1.3)
dropoff_from_causative_variant_percentage <- 0.1 # 0.01 represents top 1 % most homozygous region
# # Verify the current working directory
# getwd()
library(knitr)
setwd(variant_position_dir)
# Read the data without treating "#" as a comment
Variant_positions_table <- read.table(input_selection_coefficient_variant_positions_file, header = FALSE, sep = "\t", comment.char = "")
# Check if the output_sim_files_basename already exists in the file
existing_row_index <- which(Variant_positions_table$V1 == prefix)
existing_row_index
if (length(existing_row_index) > 0) {
variant_position_bp <- Variant_positions_table$V2[existing_row_index]
} else {
cat("Error, the position of the causative variant for the current simulation replicate is unknwon")
}
variant_position_bp
# Find row where data$V1 =
# then: variant_pos = $V2 of that row.
# Read the data without treating "#" as a comment
Pop_roh_freq_table <- read.table(input_pop_roh_freq_file, header = TRUE, sep = "\t", comment.char = "")
View(Pop_roh_freq_table)
# Assigning column names
colnames(Pop_roh_freq_table) <- c("CHR", "POS1", "POS2", "COUNT", "FREQUENCY")
# Find the row where the variant_position_bp is within POS1 and POS2, and CHR equals chr_number
row_with_variant_chr <- Pop_roh_freq_table[Pop_roh_freq_table$POS1 <= variant_position_bp &
variant_position_bp <= Pop_roh_freq_table$POS2 &
Pop_roh_freq_table$CHR == chr_number, ]
# If no such row is found, stop the script
if (nrow(row_with_variant_chr) == 0) {
stop("No row found with the specified variant position and chromosome number.")
}
# Display the row
print(row_with_variant_chr)
# Get the index of the row_with_variant_chr in the original table
variant_row_index <- which(Pop_roh_freq_table$POS1 == row_with_variant_chr$POS1 &
Pop_roh_freq_table$POS2 == row_with_variant_chr$POS2 &
Pop_roh_freq_table$CHR == row_with_variant_chr$CHR)
# Initialize the variant window table with the row_with_variant_chr
causative_variant_window_table <- row_with_variant_chr
# Define the frequency threshold
frequency_threshold <- row_with_variant_chr$FREQUENCY - dropoff_from_causative_variant_percentage
# Function to incorporate rows into the variant window table
incorporate_windows_to_causative_window <- function(start_index, direction) {
i <- start_index
while (TRUE) {
i <- i + direction
if (i < 1 || i > nrow(Pop_roh_freq_table)) break
current_row <- Pop_roh_freq_table[i, ]
if (current_row$CHR == chr_number && current_row$FREQUENCY >= frequency_threshold) {
causative_variant_window_table <<- rbind(causative_variant_window_table, current_row)
} else {
break
}
}
}
# Incorporate rows before and after the row_with_variant_chr
incorporate_windows_to_causative_window(variant_row_index, -1)  # Look backwards
incorporate_windows_to_causative_window(variant_row_index, 1)   # Look forwards
View(causative_variant_window_table)
# Sort the data frame based on F_ROH column
causative_variant_window_table_sorted <- causative_variant_window_table[order(as.numeric(causative_variant_window_table$POS1)), ]
# Display the variant window table
print(causative_variant_window_table_sorted)
View(causative_variant_window_table_sorted)
length_window <- max(causative_variant_window_table_sorted$POS2) - min(causative_variant_window_table_sorted$POS1) + 1
length_window_MB <- length_window / (10^6)
length_window_MB
# Define column names for the table
column_names <- c("#CHR", "POS1", "POS2", "COUNT", "FREQUENCY")
# Set the column names of the table
colnames(causative_variant_window_table_sorted) <- column_names
filename <- file.path(output_dir, paste(prefix, "_causative_variant_window_", length_window_MB, "_MB", ".bed", sep = ""))
# Set the column names of the table
colnames(causative_variant_window_table_sorted) <- column_names
# Write data to TSV file without quotes and with tab separation
write.table(causative_variant_window_table_sorted, file = filename, quote = FALSE, col.names = TRUE, row.names = FALSE, sep = "\t")
# Check if the file exists
if (file.exists(output_variant_window_lengths_file)) {
# Read the existing data from the file
causative_variant_window_lengths_table <- read.table(output_variant_window_lengths_file, header = FALSE, sep = "\t")
} else {
# Create an empty data frame if the file does not exist
causative_variant_window_lengths_table <- data.frame(V1 = character(), V2 = integer())
}
# Check if the prefix already exists in the file
existing_row_index <- which(causative_variant_window_lengths_table$V1 == prefix)
if (length(existing_row_index) > 0) {
causative_variant_window_lengths_table$V2[existing_row_index] <- length_window
} else {
# Create a new row with the prefix and disappearance_counter
new_row <- data.frame(V1 = prefix, V2 = length_window)
# Append the new row to the existing data
causative_variant_window_lengths_table <- rbind(causative_variant_window_lengths_table, new_row)
}
# Define column names for the table
column_names <- c("#Simulation name", "Length (bp)")
# Set the column names of the table
colnames(causative_variant_window_lengths_table) <- column_names
# Write the updated data back to the file
write.table(causative_variant_window_lengths_table, file = output_variant_window_lengths_file, sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
