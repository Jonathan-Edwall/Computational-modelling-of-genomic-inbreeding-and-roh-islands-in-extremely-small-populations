selection_model_values_list <- c(selection_model_values_list, Avg_ROH_hotspot_threshold)
# selection_model_names_list <- c(selection_model_names_list, model_name)
}
# Add overAvg_ROH_hotspot_threshold from ROH_freq_tables_Neutral_Model
neutral_model_value <- ROH_freq_tables_Neutral_Model[["Avg_ROH_hotspot_threshold"]]
# Add Avg_ROH_hotspot_threshold from ROH_freq_table_Empirical_Data
empirical_model_value <- ROH_freq_table_Empirical_Data[["ROH_hotspot_threshold"]]
# Combine all values into a data frame
ROH_hotspot_threshold_values <- data.frame(
Model = c(rep("Selection", length(selection_model_values_list)), "Neutral", "Empirical"),
Avg_ROH_hotspot_threshold = c(selection_model_values_list, neutral_model_value, empirical_model_value)
)
# Update the Model column for selection models
ROH_hotspot_threshold_values$Model[ROH_hotspot_threshold_values$Model == "Selection"] <- selection_model_names_list
# Sort the data frame based on Inbreeding coefficient column
ROH_hotspot_threshold_values_sorted <- ROH_hotspot_threshold_values[order(ROH_hotspot_threshold_values$Avg_ROH_hotspot_threshold), ]
# # Print the table using knitr::kable()
# knitr::kable(ROH_hotspot_threshold_values, row.names = FALSE)
# Print the table using knitr::kable()
knitr::kable(ROH_hotspot_threshold_values_sorted, row.names = FALSE)
# Set the working directory to the directory containing the F_ROH files for the empirical data
setwd(Empirical_data_F_ROH_dir)
# Pattern for finding files containing "F_ROH" and ending with ".tsv"
pattern <- "^.*F_ROH.*.tsv$"
population_F_ROH_file <- list.files(pattern = pattern)
# Extract the population name from the file names
empirical_population_name <- sub("^(.*?)_F_ROH.*", "\\1", population_F_ROH_file)
# Combine population name, number, and file name
population_info <- data.frame(empirical_population_name = empirical_population_name, file_name = population_F_ROH_file)
population_info <- population_info[order(population_info$file_name), ]
# Initialize an empty list to store the data
F_ROH_table_Empirical_Data <- list()
# Loop through each .tsv file
for (i in 1:length(population_info$empirical_population_name)) {
# Get the file name
file <- population_info$file_name[i]
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header and split it into column names
column_names <- sub("#", "", header)
column_names <- strsplit(column_names, "\t")[[1]]
# Read the .tsv frequency file into a data frame
F_ROH_data <- read.table(file, header = TRUE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names)
# Add empirical_population_name as an attribute to the data frame
attr(F_ROH_data, "empirical_population_name") <- population_info$empirical_population_name[i]
# Add filename as an attribute to the data frame
attr(F_ROH_data, "filename") <- file_name
# Calculate the mean of the "F_ROH" column
avg_F_ROH_population <- mean(F_ROH_data$F_ROH)
# Create a list with table name and corresponding data frame
table_info <- list(empirical_population_name = population_info$empirical_population_name[i], filename = file, data = F_ROH_data,Avg_F_ROH = avg_F_ROH_population )  # Added empirical_population_name here
# Append the table info to the list
F_ROH_table_Empirical_Data <- c(F_ROH_table_Empirical_Data, table_info)
}
# Creating a histogram showing the spread in F_ROH values across the empirical population
histogram_title <- paste0("F_ROH distribution for ",empirical_population_name)
hist(F_ROH_data$F_ROH, main = histogram_title, xlab = "F_ROH", ylab = "Frequency", col = "skyblue")
empirical_avg_F_ROH_legend_text <- paste(empirical_population_name," Average: ", round(F_ROH_table_Empirical_Data[["Avg_F_ROH"]], 3))
# Add a vertical line for the average F_ROH of the empirical population
abline(v = F_ROH_table_Empirical_Data[["Avg_F_ROH"]], col = empirical_data_color, lwd = histogram_line_sizes)
# Add legend
legend("topright", legend = empirical_avg_F_ROH_legend_text,
col = empirical_data_color, lty = 1, cex = 0.8, text.col = "black")
# Print the overall average Avg_F_ROH
cat("Overall Average Avg_F_ROH for ",empirical_population_name,":",F_ROH_table_Empirical_Data[["Avg_F_ROH"]], "//n")
# View the modified data structure
View(F_ROH_table_Empirical_Data)
# Set the working directory to the directory containing the F_ROH files for the empirical data
setwd(Neutral_model_F_ROH_dir)
# Pattern for finding files containing "F_ROH" and ending with ".tsv"
pattern <- "^.*F_ROH.*.tsv$"
simulation_F_ROH_files <- list.files(pattern = pattern)
# Extract the simulation name from the file names
sim_name <- sub("^(.*?)_F_ROH.*", "////1", simulation_F_ROH_files)
# Extract the simulation number after "sim_"
simulation_numbers <- as.integer(sub("^sim_(////d+)_.*", "////1", simulation_F_ROH_files))
# Combine simulation name, number, and file name
sim_info <- data.frame(sim_name = sim_name, simulation_number = simulation_numbers, file_name = simulation_F_ROH_files)
sim_info <- sim_info[order(sim_info$simulation_number), ]
# Initialize an empty list to store Simulated model tables
F_ROH_tables_Neutral_Model <- list()
# Loop through each .tsv file
for (i in 1:length(sim_info$sim_name)) {
# Get the file name
file <- sim_info$file_name[i]
# Extract the table name from the file name
file_name <- gsub("////.tsv$", "", file)
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header and split it into column names
column_names <- sub("#", "", header)
column_names <- strsplit(column_names, "\t")[[1]]
# Read the .tsv frequency file into a data frame
F_ROH_data <- read.table(file, header = FALSE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names)
# Add sim_name as an attribute to the data frame
attr(F_ROH_data, "sim_name") <- sim_info$sim_name[i]
# Create a list with table name and corresponding data frame
table_info <- list(sim_name = sim_info$sim_name[i], filename = file_name, data = F_ROH_data)  # Added sim_name here
# Append the table info to the list
F_ROH_tables_Neutral_Model <- c(F_ROH_tables_Neutral_Model, list(table_info))
}
# Calculating Population F_ROH for each simulation (subtable)
# Loop through each table in F_ROH_tables_Neutral_Model
for (i in seq_along(F_ROH_tables_Neutral_Model)) {
# Calculate the population average from the "F_ROH" column in the current simulation (subtable)
F_ROH_tables_Neutral_Model[[i]]$Population_F_ROH <- mean(F_ROH_tables_Neutral_Model[[i]]$data$F_ROH)
}
#View(F_ROH_tables_Neutral_Model)
# Extract all population F_ROH values from F_ROH_tables_Neutral_Model
All_Population_F_ROH <- unlist(lapply(F_ROH_tables_Neutral_Model, function(table) table$Population_F_ROH))
# Remove any non-numeric values
All_Population_F_ROH <- All_Population_F_ROH[!is.na(All_Population_F_ROH) & is.numeric(All_Population_F_ROH)]
# Calculate the point estimate F_ROH across all 20 simulations
F_ROH_tables_Neutral_Model$Estimated_Mean_Population_F_ROH <- mean(All_Population_F_ROH)
# Calculate the bootstrap confidence interval of the point estimate F_ROH across all 20 simulations
# Store the bootstrap confidence interval in the F_ROH_tables_Neutral_Model
F_ROH_tables_Neutral_Model$Bootstrap_CI_Estimated_Mean_Population_F_ROH <- bootstrap_confidence_interval_fun(All_Population_F_ROH)
# Set the plot size
options(repr.plot.width = 10, repr.plot.height = 6)
# Create histogram for simulated data
hist(All_Population_F_ROH, main = "Population F_ROH for the Neutral Model simulations", xlab = "F_ROH", ylab = "Frequency", col = "skyblue")
# Determine the location of the legend based on the comparison
if (F_ROH_tables_Neutral_Model$Estimated_Mean_Population_F_ROH > F_ROH_table_Empirical_Data[["Avg_F_ROH"]]) {
simulated_line_location <- "topright"
empirical_line_location <- "topleft"
} else {
simulated_line_location <- "topleft"
empirical_line_location <- "topright"
}
# Add a red vertical line for the point estimate F_ROH across all 20 simulations
abline(v = F_ROH_tables_Neutral_Model$Estimated_Mean_Population_F_ROH, col = neutral_model_color, lwd = histogram_line_sizes)
# Add legend for the red line
legend(simulated_line_location, legend = paste("Neutral - F_ROH Point estimate: ", round(F_ROH_tables_Neutral_Model$Estimated_Mean_Population_F_ROH, 4)),
col = neutral_model_color, lty = 1, cex = 0.8, text.col = "black")
# Add a blue vertical line for the average F_ROH of the empirical population
abline(v = F_ROH_table_Empirical_Data[["Avg_F_ROH"]], col = empirical_data_color, lwd = histogram_line_sizes)
# Add legend for the green line
legend(empirical_line_location, legend = empirical_avg_F_ROH_legend_text,
col = empirical_data_color, lty = 1, cex = 0.8, text.col = "black", xjust = 1, yjust = 1)
# Reset par settings to default after plotting
par(mfrow = c(1, 1))
# Print the Point estimate of F_ROH across all 20 simulations
cat("Point estimate F_ROH across all 20 simulations:", F_ROH_tables_Neutral_Model$Estimated_Mean_Population_F_ROH, "//n")
print(paste("Bootstrap 95% Confidence Interval: [",
F_ROH_tables_Neutral_Model$Bootstrap_CI_Estimated_Mean_Population_F_ROH[1], ", ",
F_ROH_tables_Neutral_Model$Bootstrap_CI_Estimated_Mean_Population_F_ROH[2], "]", sep = ""))
# Set the working directory to the directory containing the F_ROH files for the empirical data
setwd(Selection_model_F_ROH_dir)
# Pattern for finding files containing "F_ROH" and ending with ".tsv"
pattern <- "^.*F_ROH.*.tsv$"
simulation_F_ROH_files <- list.files(pattern = pattern)
# Extract simulation numbers from the filename
sim_number_pattern <- ".*sim_(\\d+)_.*"
simulation_numbers <- as.numeric(gsub(sim_number_pattern, "\\1", simulation_F_ROH_files))
# # Extract the simulation number after "sim_"
# simulation_numbers <- as.integer(sub("^sim_(////d+)_.*", "////1", simulation_F_ROH_files))
# simulation_numbers <- as.integer(sub("^sim_(////d+)_.*", "////1", simulation_F_ROH_files))
sim_name <- sub("^(.*?)_F_ROH.*", "\\1", simulation_F_ROH_files)
# Combine simulation name, number, and file name
sim_info <- data.frame(sim_name = sim_name, simulation_number = simulation_numbers, file_name = simulation_F_ROH_files)
sim_info <- sim_info[order(sim_info$simulation_number), ]
# Initialize an empty list to store Simulated model tables
F_ROH_tables_Selection_Model <- list()
# Loop through each .tsv file
for (i in 1:length(sim_info$sim_name)) {
# Get the file name
file <- sim_info$file_name[i]
# Extract the selection_model_type from the file name
selection_model_type <- sub("^sim_[0-9]+_(.*?)_F_ROH.*", "\\1", file)
# Check if the selection_model_type already exists in the list
if (!(selection_model_type %in% names(F_ROH_tables_Selection_Model))) {
# If it doesn't exist, create a list for it
F_ROH_tables_Selection_Model[[selection_model_type]] <- list()
}
# Extract simname from the file name
simname_from_file <- sub("^(.*?)_F_ROH.*", "\\1", file)
# Check if the simname from the file matches with the simname from the dataframe
if (simname_from_file != sim_info$sim_name[i]) {
stop("Error: Simname from file does not match with simname from dataframe.")
}
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header and split it into column names
column_names <- sub("#", "", header)
column_names <- strsplit(column_names, "\\t")[[1]]
# Read the .tsv frequency file into a data frame
F_ROH_data <- read.table(file, header = FALSE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names)
# Add sim_name as an attribute to the data frame
attr(F_ROH_data, "sim_name") <- sim_info$sim_name[i]
# Assign the file name to file_name
file_name <- sub("\\.tsv$", "", sim_info$file_name[i])
# Create a list with table name and corresponding data frame
table_info <- list(sim_name = sim_info$sim_name[i], filename = file_name, data = F_ROH_data)  # Fixed filename assignment
# Append the table info to the list under selection_model_type
F_ROH_tables_Selection_Model[[selection_model_type]] <- c(F_ROH_tables_Selection_Model[[selection_model_type]], list(table_info))
}
# Calculating Average F_ROH for each table
# Loop through each selection_coefficient
for (selection_coefficient in names(F_ROH_tables_Selection_Model)) {
# Loop through each table in the selection_coefficient
for (i in seq_along(F_ROH_tables_Selection_Model[[selection_coefficient]])) {
# Calculate the population average from the "F_ROH" column in the current simulation (subtable)
# of the current selection coefficient
F_ROH_tables_Selection_Model[[selection_coefficient]][[i]]$Population_F_ROH <- mean(F_ROH_tables_Selection_Model[[selection_coefficient]][[i]]$data$F_ROH)
}
# Extract all pop_Avg_F_ROH values from F_ROH_tables_Selection_Model
All_Population_F_ROH <- unlist(lapply(F_ROH_tables_Selection_Model[[selection_coefficient]], function(table) table$Population_F_ROH))
# Remove any non-numeric values
All_Population_F_ROH <- All_Population_F_ROH[!is.na(All_Population_F_ROH) & is.numeric(All_Population_F_ROH)]
# print(All_Population_F_ROH)
# Calculate the point estimate F_ROH across all 20 simulations for the current selection coefficient
F_ROH_tables_Selection_Model[[selection_coefficient]]$Estimated_Mean_Population_F_ROH <- mean(All_Population_F_ROH)
# Calculate the bootstrap confidence interval of the point estimate F_ROH across all 20 simulations for the current selection coefficient
# Store the bootstrap confidence interval in the F_ROH_tables_Selection_Model table
F_ROH_tables_Selection_Model[[selection_coefficient]]$Bootstrap_CI_Estimated_Mean_Population_F_ROH <- bootstrap_confidence_interval_fun(All_Population_F_ROH)
# Set the plot size
options(repr.plot.width = 10, repr.plot.height = 6)
# Creating a histogram showing the spread in average F_ROH values across each technical replicate
# for the current selection coefficient!
histogram_title <- paste0("Population F_ROH for ",selection_coefficient)
hist(All_Population_F_ROH, main = histogram_title, xlab = "F_ROH", ylab = "Frequency", col = "skyblue")
# Determine the location of the legend based on the comparison
if (F_ROH_tables_Selection_Model[[selection_coefficient]]$Estimated_Mean_Population_F_ROH > F_ROH_table_Empirical_Data[["Avg_F_ROH"]]) {
simulated_line_location <- "topright"
empirical_line_location <- "topleft"
} else {
simulated_line_location <- "topleft"
empirical_line_location <- "topright"
}
# Add a vertical line for the overall average Avg_F_ROH of the current selection model
abline(v = F_ROH_tables_Selection_Model[[selection_coefficient]]$Estimated_Mean_Population_F_ROH, col = selection_model_color, lwd = histogram_line_sizes)
# Add legend for the red line
legend(simulated_line_location, legend = paste("Selection Coefficient F_ROH Point estimate:", round(F_ROH_tables_Selection_Model[[selection_coefficient]]$Estimated_Mean_Population_F_ROH, 4)),
col = selection_model_color, lty = 1, cex = 0.8, text.col = "black")
# Add a vertical line for the average F_ROH of the empirical population
abline(v = F_ROH_table_Empirical_Data[["Avg_F_ROH"]], col = empirical_data_color, lwd = histogram_line_sizes)
# Add legend for the empirical line
legend(empirical_line_location, legend = empirical_avg_F_ROH_legend_text,
col = empirical_data_color, lty = 1, cex = 0.8, text.col = "black", xjust = 1, yjust = 1)
# Reset par settings to default after plotting
par(mfrow = c(1, 1))
# Print the Point estimate of F_ROH across all 20 simulations
cat("Point estimate F_ROH across all 20 simulations for ",selection_coefficient,":", F_ROH_tables_Selection_Model[[selection_coefficient]]$Estimated_Mean_Population_F_ROH, "//n")
print(paste("Bootstrap 95% Confidence Interval: [",
F_ROH_tables_Selection_Model[[selection_coefficient]]$Bootstrap_CI_Estimated_Mean_Population_F_ROH[1], ", ",
F_ROH_tables_Selection_Model[[selection_coefficient]]$Bootstrap_CI_Estimated_Mean_Population_F_ROH[2], "]", sep = ""))
}
View(F_ROH_tables_Selection_Model)
# Initialize vectors to store F_ROH values and CI bounds for the different selection coefficients
selection_model_avg_values <- c()
selection_model_lower_ci <- c()
selection_model_upper_ci <- c()
selection_model_names <- c(rownames(summary(F_ROH_tables_Selection_Model)))
# Loop through each selection_coefficient in F_ROH_tables_Selection_Model
for (selection_coefficient in F_ROH_tables_Selection_Model) {
# Extract the all_avg_F_ROH value from the selection_coefficient
all_avg_F_ROH <- selection_coefficient$Estimated_Mean_Population_F_ROH
CI <- selection_coefficient$Bootstrap_CI_Estimated_Mean_Population_F_ROH
# Append values to the lists
selection_model_avg_values <- c(selection_model_avg_values, all_avg_F_ROH)
selection_model_lower_ci <- c(selection_model_lower_ci, CI[1])
selection_model_upper_ci <- c(selection_model_upper_ci, CI[2])
}
# Extract neutral model values and CI bounds
neutral_avg_F_ROH <- F_ROH_tables_Neutral_Model[["Estimated_Mean_Population_F_ROH"]]
neutral_lower_ci <- F_ROH_tables_Neutral_Model[["Bootstrap_CI_Estimated_Mean_Population_F_ROH"]][1]
neutral_upper_ci <- F_ROH_tables_Neutral_Model[["Bootstrap_CI_Estimated_Mean_Population_F_ROH"]][2]
# Extract empirical model value
empirical_avg_F_ROH <- F_ROH_table_Empirical_Data[["Avg_F_ROH"]]
empirical_lower_ci <- NA # Placeholder for confidence interval lower bound
empirical_upper_ci <- NA # Placeholder for confidence interval upper bound
# Combine all values into a data frame
F_ROH_values <- data.frame(
Model = c(rep("Selection", length(selection_model_avg_values)), "Neutral", "Empirical"),
F_ROH = c(selection_model_avg_values, neutral_avg_F_ROH, empirical_avg_F_ROH),
Lower_CI = c(selection_model_lower_ci, neutral_lower_ci, empirical_lower_ci),
Upper_CI = c(selection_model_upper_ci, neutral_upper_ci, empirical_upper_ci)
)
# Format all numeric values to 5 decimal places
F_ROH_values$F_ROH <- as.numeric(format(round(F_ROH_values$F_ROH, 5), nsmall = 5))
F_ROH_values$Lower_CI <- as.numeric(format(round(F_ROH_values$Lower_CI, 5), nsmall = 5))
F_ROH_values$Upper_CI <- as.numeric(format(round(F_ROH_values$Upper_CI, 5), nsmall = 5))
# # Update the Model column for selection models
# F_ROH_values$Model[1:length(selection_model_names)] <- selection_model_names
# Extract labels for the different selection coefficients
selection_labels <- gsub(".*_(s\\d+)_.*", "\\1", selection_model_names)
F_ROH_values$Model[1:length(selection_model_names)] <- selection_labels
# Sort the data frame based on F_ROH column
F_ROH_values_sorted <- F_ROH_values[order(as.numeric(F_ROH_values$F_ROH)), ]
# Print the table using knitr::kable()
knitr::kable(F_ROH_values_sorted, row.names = FALSE)
# Remove the empirical model from the plotting data
plotting_data <- F_ROH_values[F_ROH_values$Model != "Empirical", ]
# Add a column indicating whether the empirical F_ROH is within the CI of each model
empirical_F_ROH <- empirical_avg_F_ROH
plotting_data$Empirical_Within_CI <- (plotting_data$Lower_CI <= empirical_F_ROH) & (plotting_data$Upper_CI >= empirical_F_ROH)
# Create the plot
p <- ggplot(plotting_data, aes(x = Model, y = F_ROH, color = Empirical_Within_CI)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
geom_hline(aes(yintercept = empirical_F_ROH), linetype = "dashed", color = "red", linewidth = 1, show.legend = TRUE) +
labs(title = "F_ROH Values and Confidence Intervals by Model",
x = "Model",
y = "F_ROH",
color = "Empirical F_ROH\nwithin CI",
linetype = "Empirical F_ROH") +
scale_linetype_manual(name = "Empirical F_ROH", values = c("dashed")) +
scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "black"), labels = c("TRUE" = "Inside CI", "FALSE" = "Outside CI")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(limits = c(min(plotting_data$Lower_CI), max(plotting_data$Upper_CI)),
breaks = round(seq(min(plotting_data$Lower_CI), max(plotting_data$Upper_CI), length.out = 10), 5))
# Print the plot
print(p)
# Print which models the empirical F_ROH is inside of
inside_models <- plotting_data$Model[plotting_data$Empirical_Within_CI]
outside_models <- plotting_data$Model[!plotting_data$Empirical_Within_CI]
cat("Models where empirical F_ROH is within CI:\n")
print(inside_models)
cat("\nModels where empirical F_ROH is outside CI:\n")
print(outside_models)
setwd(Empirical_data_H_e_dir)
# # Set the working directory to the directory containing the H_e files for the empirical data
# setwd(Empirical_data_H_e_dir)
#
# # List all PNG files in the directory
# # png_files <- list.files(pattern = "//.png$", full.names = TRUE)
# png_files <- list.files(pattern = "//.png$")
#
# # Display each PNG file
# for (file in png_files) {
#   cat("File:", file, "/n")
#   # Open a PNG device
#   png::png(filename = file)
#   # Display image using readPNG() from the png package
#   raster <- png::readPNG(file)
#   graphics::plot.new()
#   graphics::plot.window(xlim = c(0, 1), ylim = c(0, 1), asp = 1)
#   graphics::rasterImage(raster, 0, 0, 1, 1)
#   # Close the PNG device
#   dev.off()
# }
#
setwd(Neutral_model_H_e_dir)
# # Set the working directory to the directory containing the H_e files for the Neutral Model
# new_dir <- file.path(Neutral_model_H_e_dir,"test")
# #setwd(Neutral_model_H_e_dir)
# setwd(new_dir)
# # List all PNG files in the directory
# #png_files <- list.files(pattern = "//.png$", full.names = TRUE)
# png_files <- list.files(pattern = "//.png$")
#
# library(png)
#
#
# # Display each PNG file
# for (file in png_files) {
#   file_path <- file.path(new_dir, file)
#   cat("File:", file, "/n")
#   # Display the image using include_graphics() from the knitr package
#   knitr::include_graphics(file_path)
# }
#
# knitr::include_graphics("img",/rmarkdown_hex.png")
# # Display each PNG file
# for (file in png_files) {
#   cat("File:", file, "/n")
#   file_path <- file.path(Neutral_model_H_e_dir,file)
#   # Open a PNG device
#   png(filename = file_path)
#   # Display image using base R graphics functions
#   img <- readPNG(file)
#   graphics::plot.new()
#   graphics::plot.window(xlim = c(0, 1), ylim = c(0, 1), asp = 1)
#   graphics::rasterImage(img, 0, 0, 1, 1)
#   #Close the PNG device
#   dev.off()
# }
cat("\n ROH-hotspot threshold comparison between the different datasets")
# Print the table using knitr::kable()
knitr::kable(ROH_hotspot_threshold_values_sorted, row.names = FALSE)
# Print the table using knitr::kable()
knitr::kable(F_ROH_values_sorted, row.names = FALSE)
setwd(Sweep_test_dir)
# Pattern for finding files containing "F_ROH" and ending with ".tsv"
pattern <- "^.*neutral_model.*.tsv$"
selection_testing_files <- list.files(pattern = pattern)
# selection_testing_files
# Extracting the ROH-hotspot threshold value from the suffix of the filename
parts <- unlist(strsplit(selection_testing_files[1], "threshold_")) # Split the string by "threshold_"
# Extract the decimal number using regular expressions
fifth_percentile_H_e_neutral_model <- as.numeric(gsub("\\.tsv", "", unlist(strsplit(parts[length(parts)], "_"))[1]))
for (file in selection_testing_files) {
file_name <- file
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header and split it into column names
column_names <- sub("#", "", header)
column_names <- strsplit(column_names, "\t")[[1]]
# # Read the .tsv frequency file into a data frame
Selection_testing_results <- read.table(selection_testing_files, header = TRUE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names)
}
paste0("Selection test results")
paste0("ROH-hotspot windows with an mean H_e Value lower or equal to the fifth percentile of the neutral models average H_e are classified as being under selection")
paste0("5th percentile of the neutral model is: ",fifth_percentile_H_e_neutral_model)
Selection_testing_results
# Subset the dataframe to extract rows where Under_selection is "Yes"
under_selection_rows <- subset(Selection_testing_results, Under_selection == "Yes")
paste0("ROH-hotspots under selection:")
under_selection_rows
#View(Selection_testing_results)
setwd(Selection_strength_test_dir)
# Pattern for finding files containing "F_ROH" and ending with ".tsv"
pattern <- "^.*selection_model.*.tsv$"
selection_strength_testing_files <- list.files(pattern = pattern)
# selection_testing_files
# Initialize an empty list to store Selection_Strength_test_results_tables
Selection_Strength_test_results_tables <- list()
# Loop through each selection coefficient and its associated file
for (i in seq_along(selection_strength_testing_files)) {
# Extract the selection coefficient from the file name
selection_coefficient <- sub(".*(selection_model_s\\d+_chr\\d+).*", "\\1", selection_strength_testing_files[i])
# Read the .tsv file into a data frame
subtable <- read.table(selection_strength_testing_files[i], header = TRUE, comment.char = "#", stringsAsFactors = FALSE)
Selection_Strength_test_results_tables[[selection_coefficient]]$file_name <- selection_strength_testing_files[i]
# Add the subtable to the list with the selection coefficient as its name
Selection_Strength_test_results_tables[[selection_coefficient]]$results <- subtable
# Extracting the ROH-hotspot threshold value from the suffix of the filename
parts <- unlist(strsplit(selection_strength_testing_files[i], "threshold_")) # Split the string by "threshold_"
# # Extract the decimal number using regular expressions
fifth_percentile_H_e_selection_coefficient <- as.numeric(gsub("\\.tsv", "", unlist(strsplit(parts[length(parts)], "_"))[1]))
Selection_Strength_test_results_tables[[selection_coefficient]]$fifth_percentile_H_e_threshold <- fifth_percentile_H_e_selection_coefficient
}
# # View the Selection_Strength_test_results_tables
# Selection_Strength_test_results_tables
# View the dataframe
View(Selection_Strength_test_results_tables)
#(Selection_Strength_test_df)
# Initialize an empty list to store the new table
hotspot_under_selection_H_e_table <- list()
# Loop through each row in under_selection_rows
for (i in 1:nrow(under_selection_rows)) {
# Extract information for the current ROH-hotspot window
current_window <- under_selection_rows[i, "Name"]
under_selection <- under_selection_rows[i, "Under_selection"]
Hotspot_Avg_H_e <- under_selection_rows[i, "Window_based_Average_H_e"]
# Initialize a subtable for the current ROH-hotspot window
subtable <- list()
# Loop through each selection coefficient
for (j in seq_along(Selection_Strength_test_results_tables)) {
# Get the selection coefficient and its corresponding table
selection_coefficient <- names(Selection_Strength_test_results_tables)[j]
table <- Selection_Strength_test_results_tables[[j]]
# Extract the filename and the fifth percentile H_e threshold
filename <- table$file_name
fifth_percentile_H_e_threshold <- table$fifth_percentile_H_e_threshold
if( fifth_percentile_H_e_threshold < fifth_percentile_H_e_neutral_model) {
# Create a subtable for the current selection coefficient
subtable[[selection_coefficient]] <- list(
fifth_percentile_H_e_threshold = fifth_percentile_H_e_threshold
)
}
}
# Add the subtable for the current ROH-hotspot window to the new table
hotspot_under_selection_H_e_table[[current_window]] <- subtable
hotspot_under_selection_H_e_table[[current_window]]$Hotspot_Avg_H_e <- Hotspot_Avg_H_e
}
# View the new table
View(hotspot_under_selection_H_e_table)
library(ggplot2)
# H_e_hotspot_visualization creates a visualization of the H_e distribution of the different selection coefficients, in comparison to each ROH-hotspot
H_e_hotspot_visualization <- function(hotspot_name, hotspot_data) {
# Extract the Hotspot_Avg_H_e value
hotspot_avg_H_e <- hotspot_data$Hotspot_Avg_H_e
# Extract selection coefficient names and fifth percentile H_e thresholds
selection_coefficients <- names(hotspot_data)[-length(hotspot_data)]  # Exclude the Hotspot_Avg_H_e entry
thresholds <- sapply(hotspot_data[-length(hotspot_data)], function(x) x$fifth_percentile_H_e_threshold)
# Extract labels for the different selection coefficients
selection_labels <- gsub(".*_(s\\d+)_.*", "\\1", selection_coefficients)
# Create a dataframe with selection coefficients and thresholds
df <- data.frame(
Selection_Coefficient = selection_labels,
H_e = thresholds
)
# Plot the visualization
p <- ggplot(df, aes(x = Selection_Coefficient, y = H_e)) +
geom_point(size = 3, color = "blue") +
geom_hline(yintercept = hotspot_avg_H_e, linetype = "dashed", color = "red", size = 1) +
geom_text(aes(x = 1, y = hotspot_avg_H_e, label = paste("Hotspot Avg H_e =", round(hotspot_avg_H_e, 5))),
color = "red", hjust = -0.1, vjust = -1) +
labs(title = paste("Comparison of H_e Values for", hotspot_name),
x = "Selection Coefficient",
y = "H_e Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
return(p)
}
# Analyze and visualize each ROH hotspot independently
for (hotspot_name in names(hotspot_under_selection_H_e_table)) {
cat("\nHotspot Name:", hotspot_name, "\n")
hotspot_data <- hotspot_under_selection_H_e_table[[hotspot_name]]
plot <- H_e_hotspot_visualization(hotspot_name, hotspot_data)
print(plot)
}
