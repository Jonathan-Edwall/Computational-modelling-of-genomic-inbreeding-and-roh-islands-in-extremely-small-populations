)
help(runMacs2)
model_chromosome_bp_length <- chromosome_lengths_mb[chr_simulated] * 10^6
founderGenomes <- runMacs2(nInd = 100,
nChr = 1,
Ne = 2500,
bp = model_chromosome_bp_length,
genLen = 1,
histNe = NULL,
histGen = NULL)
# Inspecting the founderGenomes object
founderGenomes
help(SimParam)
# Creating a new Simparam object & Assigning the founder population population to it
SP <- SimParam$new(founderGenomes)
# SP
SP$setTrackRec(TRUE)
count <- colSums(pullSegSiteGeno(pop, simParam = simparam))
# Clean the working environment
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
####################################
# Defining the working directory
####################################
# Set the path to your GitHub folder
YOUR_GITHUB_ROOT_DIRECTORY <- "C:/Users/jonat/GitHub"
# Defining the relative path in the repository
repository_path <- "Computational-modelling-of-genomic-inbreeding-and-roh-islands-in-extremely-small-populations"
output_dir_simulation <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"data/raw/simulated/selection_model")
if (!dir.exists(output_dir_simulation)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_simulation)
}
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir_simulation)
####################################
# Defining Input parameters
####################################
min_MAF <- 0.05 #(minimum allowed Minor Allele Frequency for each SNP)
allele_copies_threshold <- 10 # 10 (candidate_variants = less than 10)
s <- 0.05 ## Selection coefficient
####################################
# Defining the output files
####################################
# Define the chromosome to be simulated
chr_simulated <- "chr3"
# Define the base name for the output .map & .ped PLINK files
output_sim_files_basename <- paste0("Neutral_simulation_", chr_simulated)
# # Verify the current working directory
#getwd()
library(AlphaSimR)
library(knitr)
#library(dplyr)
#library(ggplot2)
#library(patchwork)
#library(purrr)
#library(tibble)
# Chromosome lengths of Dogs in Mb, derived from Table 1 in this article:
# https://www-ncbi-nlm-nih-gov.ezproxy.its.uu.se/pmc/articles/PMC2564286/
chromosome_lengths_mb <- c(
"chr1" = 125, "chr2" = 88, "chr3" = 94, "chr4" = 91, "chr5" = 91,
"chr6" = 80, "chr7" = 83, "chr8" = 77, "chr9" = 64, "chr10" = 72,
"chr11" = 77, "chr12" = 75, "chr13" = 66, "chr14" = 63, "chr15" = 67,
"chr16" = 62, "chr17" = 67, "chr18" = 58, "chr19" = 56, "chr20" = 61,
"chr21" = 54, "chr22" = 64, "chr23" = 55, "chr24" = 50, "chr25" = 54,
"chr26" = 42, "chr27" = 48, "chr28" = 44, "chr29" = 44, "chr30" = 43,
"chr31" = 42, "chr32" = 41, "chr33" = 34, "chr34" = 45, "chr35" = 29,
"chr36" = 33, "chr37" = 33, "chr38" = 26
)
help(runMacs2)
model_chromosome_bp_length <- chromosome_lengths_mb[chr_simulated] * 10^6
founderGenomes <- runMacs2(nInd = 100,
nChr = 1,
Ne = 2500,
bp = model_chromosome_bp_length,
genLen = 1,
histNe = NULL,
histGen = NULL)
# Inspecting the founderGenomes object
founderGenomes
help(SimParam)
# Creating a new Simparam object & Assigning the founder population population to it
SP <- SimParam$new(founderGenomes)
# SP
SP$setTrackRec(TRUE)
# Generate the initial founder population
founderpop <- newPop(founderGenomes, simParam = SP)
# Set misc used for setting years of birth for the first individuals
current_generation = 0
founderpop = setMisc(x = founderpop,
node = "generation",
value = current_generation)
head(getMisc(x = founderpop, node = "generation"))
count <- colSums(pullSegSiteGeno(pop, simParam = simparam))
count <- colSums(pullSegSiteGeno(founderpop, simParam = simparam))
count <- colSums(pullSegSiteGeno(founderpop, simParam = SP))
candidate_variants <- which(count < allele_copies_threshold) # less than 10
causative_variant <- candidate_variants[sample(1:length(candidate_variants), 1)]
candidate_variants
causative_variant
count
unique(count)
View(founderpop)
# Clean the working environment
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
####################################
# Defining the working directory
####################################
# Set the path to your GitHub folder
YOUR_GITHUB_ROOT_DIRECTORY <- "C:/Users/jonat/GitHub"
# Defining the relative path in the repository
repository_path <- "Computational-modelling-of-genomic-inbreeding-and-roh-islands-in-extremely-small-populations"
output_dir_simulation <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"data/raw/simulated/selection_model")
if (!dir.exists(output_dir_simulation)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_simulation)
}
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir_simulation)
####################################
# Defining Input parameters
####################################
min_MAF <- 0.05 #(minimum allowed Minor Allele Frequency for each SNP)
allele_copies_threshold <- 10 # 10 (candidate_variants = less than 10)
s <- 0.05 ## Selection coefficient
####################################
# Defining the output files
####################################
# Define the chromosome to be simulated
chr_simulated <- "chr3"
# Define the base name for the output .map & .ped PLINK files
output_sim_files_basename <- paste0("Neutral_simulation_", chr_simulated)
# # Verify the current working directory
#getwd()
library(AlphaSimR)
library(knitr)
#library(dplyr)
#library(ggplot2)
#library(patchwork)
#library(purrr)
#library(tibble)
# Chromosome lengths of Dogs in Mb, derived from Table 1 in this article:
# https://www-ncbi-nlm-nih-gov.ezproxy.its.uu.se/pmc/articles/PMC2564286/
chromosome_lengths_mb <- c(
"chr1" = 125, "chr2" = 88, "chr3" = 94, "chr4" = 91, "chr5" = 91,
"chr6" = 80, "chr7" = 83, "chr8" = 77, "chr9" = 64, "chr10" = 72,
"chr11" = 77, "chr12" = 75, "chr13" = 66, "chr14" = 63, "chr15" = 67,
"chr16" = 62, "chr17" = 67, "chr18" = 58, "chr19" = 56, "chr20" = 61,
"chr21" = 54, "chr22" = 64, "chr23" = 55, "chr24" = 50, "chr25" = 54,
"chr26" = 42, "chr27" = 48, "chr28" = 44, "chr29" = 44, "chr30" = 43,
"chr31" = 42, "chr32" = 41, "chr33" = 34, "chr34" = 45, "chr35" = 29,
"chr36" = 33, "chr37" = 33, "chr38" = 26
)
help(runMacs2)
model_chromosome_bp_length <- chromosome_lengths_mb[chr_simulated] * 10^6
founderGenomes <- runMacs2(nInd = 100,
nChr = 1,
Ne = 2500,
bp = model_chromosome_bp_length,
genLen = 1,
histNe = NULL,
histGen = NULL)
# Inspecting the founderGenomes object
founderGenomes
help(SimParam)
# Creating a new Simparam object & Assigning the founder population population to it
SP <- SimParam$new(founderGenomes)
# SP
SP$setTrackRec(TRUE)
# Generate the initial founder population
founderpop <- newPop(founderGenomes, simParam = SP)
# Set misc used for setting years of birth for the first individuals
current_generation = 0
founderpop = setMisc(x = founderpop,
node = "generation",
value = current_generation)
head(getMisc(x = founderpop, node = "generation"))
# Split the founder population into two breeding groups
breed1_founders <- founderpop[1:50]
breed1_founders
breed2_founders <- founderpop[51:100]
breed2_founders
random_mating <- function(pop, SP, n_gen) {
n_ind <- pop@nInd # Extracting number of individuals in the current population
generations <- vector(length = n_gen + 1,
mode = "list")
generations[[1]] <- pop # The initial breeding group population gets stored as the first element
# Simulating randomm mating to perform simulation of the 2nd until the n+1:th generation
# Each mating Progenys are generated using randcross
for (gen_ix in 2:(n_gen + 1)) {
generations[[gen_ix]] <- randCross(pop=generations[[gen_ix - 1]], nCrosses = n_ind, nProgeny = 1,
simParam = SP)
}
bottleneck_generations <- generations[-1] #all generations except for the founder population gets returned (the simulated generations derived from the bottleneck)
return(bottleneck_generations)
}
n_generations <- 5
# Simulating random mating within each breeding group for 5 generations
breed1_bottleneck <- random_mating(breed1_founders, SP, n_generations)
breed2_bottleneck <- random_mating(breed2_founders, SP, n_generations)
# founders
founderpop
breed1_bottleneck
# Extracting final generation:
last_generation <- breed1_bottleneck[[n_generations]]
last_generation
f_causative <- numeric(500)
for (gen in 1:500) {
geno <- pullSegSiteGeno(last_generation, simParam = simparam)[, causative_variant]
## Set fitness
fitness <- rep(1 - s, length(geno))
fitness[geno == 2] <- 1
fitness[geno == 1] <- 1 - s/2
## Biased sampling of parents based on fitness
parent1 <- sample(1:last_generation@nInd, 1000, replace = TRUE, prob = fitness)
parent2 <- sample(1:last_generation@nInd, 1000, replace = TRUE, prob = fitness)
pop <- makeCross(last_generation,
cbind(parent1, parent2),
nProgeny = 1,
simParam = simparam)
pop <- AlphaSimR::mutate(pop, simParam = simparam)
f_causative[gen] <- sum(geno)/length(geno)/2
}
f_causative <- numeric(500)
for (gen in 1:500) {
geno <- pullSegSiteGeno(last_generation, simParam = SP)[, causative_variant]
## Set fitness
fitness <- rep(1 - s, length(geno))
fitness[geno == 2] <- 1
fitness[geno == 1] <- 1 - s/2
## Biased sampling of parents based on fitness
parent1 <- sample(1:last_generation@nInd, 1000, replace = TRUE, prob = fitness)
parent2 <- sample(1:last_generation@nInd, 1000, replace = TRUE, prob = fitness)
pop <- makeCross(last_generation,
cbind(parent1, parent2),
nProgeny = 1,
simParam = SP)
pop <- AlphaSimR::mutate(pop, simParam = simparam)
f_causative[gen] <- sum(geno)/length(geno)/2
}
# Clean the working environment
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
####################################
# Defining the working directory
####################################
# Set the path to your GitHub folder
YOUR_GITHUB_ROOT_DIRECTORY <- "C:/Users/jonat/GitHub"
# Defining the relative path in the repository
repository_path <- "Computational-modelling-of-genomic-inbreeding-and-roh-islands-in-extremely-small-populations"
output_dir_simulation <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"data/raw/simulated/selection_model")
if (!dir.exists(output_dir_simulation)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_simulation)
}
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir_simulation)
####################################
# Defining Input parameters
####################################
min_MAF <- 0.05 #(minimum allowed Minor Allele Frequency for each SNP)
allele_copies_threshold <- 10 # 10 (candidate_variants = less than 10)
s <- 0.05 ## Selection coefficient
####################################
# Defining the output files
####################################
# Define the chromosome to be simulated
chr_simulated <- "chr3"
# Define the base name for the output .map & .ped PLINK files
output_sim_files_basename <- paste0("Neutral_simulation_", chr_simulated)
# # Verify the current working directory
#getwd()
library(AlphaSimR)
library(knitr)
#library(dplyr)
#library(ggplot2)
#library(patchwork)
#library(purrr)
#library(tibble)
# Chromosome lengths of Dogs in Mb, derived from Table 1 in this article:
# https://www-ncbi-nlm-nih-gov.ezproxy.its.uu.se/pmc/articles/PMC2564286/
chromosome_lengths_mb <- c(
"chr1" = 125, "chr2" = 88, "chr3" = 94, "chr4" = 91, "chr5" = 91,
"chr6" = 80, "chr7" = 83, "chr8" = 77, "chr9" = 64, "chr10" = 72,
"chr11" = 77, "chr12" = 75, "chr13" = 66, "chr14" = 63, "chr15" = 67,
"chr16" = 62, "chr17" = 67, "chr18" = 58, "chr19" = 56, "chr20" = 61,
"chr21" = 54, "chr22" = 64, "chr23" = 55, "chr24" = 50, "chr25" = 54,
"chr26" = 42, "chr27" = 48, "chr28" = 44, "chr29" = 44, "chr30" = 43,
"chr31" = 42, "chr32" = 41, "chr33" = 34, "chr34" = 45, "chr35" = 29,
"chr36" = 33, "chr37" = 33, "chr38" = 26
)
help(runMacs2)
model_chromosome_bp_length <- chromosome_lengths_mb[chr_simulated] * 10^6
founderGenomes <- runMacs2(nInd = 100,
nChr = 1,
Ne = 2500,
bp = model_chromosome_bp_length,
genLen = 1,
histNe = NULL,
histGen = NULL)
# Inspecting the founderGenomes object
founderGenomes
help(SimParam)
# Creating a new Simparam object & Assigning the founder population population to it
SP <- SimParam$new(founderGenomes)
# SP
SP$setTrackRec(TRUE)
# Generate the initial founder population
founderpop <- newPop(founderGenomes, simParam = SP)
# Set misc used for setting years of birth for the first individuals
current_generation = 0
founderpop = setMisc(x = founderpop,
node = "generation",
value = current_generation)
head(getMisc(x = founderpop, node = "generation"))
count <- colSums(:pullSegSiteGeno(founderpop, simParam = SP))
count <- colSums(pullSegSiteGeno(founderpop, simParam = SP))
candidate_variants <- which(count < allele_copies_threshold) # less than 10
#Randomly picking out one causative variant
causative_variant <- candidate_variants[sample(1:length(candidate_variants), 1)]
count <- colSums(pullSegSiteGeno(founderpop, simParam = SP))
candidate_variants <- which(count < allele_copies_threshold) # less than 10
#Randomly picking out one causative variant
causative_variant <- candidate_variants[sample(1:length(candidate_variants), 1)]
# Clean the working environment
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
####################################
# Defining the working directory
####################################
# Set the path to your GitHub folder
YOUR_GITHUB_ROOT_DIRECTORY <- "C:/Users/jonat/GitHub"
# Defining the relative path in the repository
repository_path <- "Computational-modelling-of-genomic-inbreeding-and-roh-islands-in-extremely-small-populations"
output_dir_simulation <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"data/raw/simulated/selection_model")
if (!dir.exists(output_dir_simulation)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_simulation)
}
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir_simulation)
####################################
# Defining Input parameters
####################################
min_MAF <- 0.05 #(minimum allowed Minor Allele Frequency for each SNP)
allele_copies_threshold <- 10 # 10 (candidate_variants = less than 10)
s <- 0.05 ## Selection coefficient
####################################
# Defining the output files
####################################
# Define the chromosome to be simulated
chr_simulated <- "chr3"
# Define the base name for the output .map & .ped PLINK files
output_sim_files_basename <- paste0("Neutral_simulation_", chr_simulated)
# # Verify the current working directory
#getwd()
library(AlphaSimR)
library(knitr)
#library(dplyr)
#library(ggplot2)
#library(patchwork)
#library(purrr)
#library(tibble)
# Chromosome lengths of Dogs in Mb, derived from Table 1 in this article:
# https://www-ncbi-nlm-nih-gov.ezproxy.its.uu.se/pmc/articles/PMC2564286/
chromosome_lengths_mb <- c(
"chr1" = 125, "chr2" = 88, "chr3" = 94, "chr4" = 91, "chr5" = 91,
"chr6" = 80, "chr7" = 83, "chr8" = 77, "chr9" = 64, "chr10" = 72,
"chr11" = 77, "chr12" = 75, "chr13" = 66, "chr14" = 63, "chr15" = 67,
"chr16" = 62, "chr17" = 67, "chr18" = 58, "chr19" = 56, "chr20" = 61,
"chr21" = 54, "chr22" = 64, "chr23" = 55, "chr24" = 50, "chr25" = 54,
"chr26" = 42, "chr27" = 48, "chr28" = 44, "chr29" = 44, "chr30" = 43,
"chr31" = 42, "chr32" = 41, "chr33" = 34, "chr34" = 45, "chr35" = 29,
"chr36" = 33, "chr37" = 33, "chr38" = 26
)
help(runMacs2)
model_chromosome_bp_length <- chromosome_lengths_mb[chr_simulated] * 10^6
founderGenomes <- runMacs2(nInd = 100,
nChr = 1,
Ne = 2500,
bp = model_chromosome_bp_length,
genLen = 1,
histNe = NULL,
histGen = NULL)
# Inspecting the founderGenomes object
founderGenomes
help(SimParam)
# Creating a new Simparam object & Assigning the founder population population to it
SP <- SimParam$new(founderGenomes)
# SP
SP$setTrackRec(TRUE)
# Generate the initial founder population
founderpop <- newPop(founderGenomes, simParam = SP)
# Set misc used for setting years of birth for the first individuals
current_generation = 0
founderpop = setMisc(x = founderpop,
node = "generation",
value = current_generation)
head(getMisc(x = founderpop, node = "generation"))
count <- colSums(pullSegSiteGeno(founderpop, simParam = SP))
candidate_variants <- which(count < allele_copies_threshold) # less than 10
#Randomly picking out one causative variant
causative_variant <- candidate_variants[sample(1:length(candidate_variants), 1)]
# Split the founder population into two breeding groups
breed1_founders <- founderpop[1:50]
breed1_founders
breed2_founders <- founderpop[51:100]
breed2_founders
random_mating <- function(pop, SP, n_gen) {
n_ind <- pop@nInd # Extracting number of individuals in the current population
generations <- vector(length = n_gen + 1,
mode = "list")
generations[[1]] <- pop # The initial breeding group population gets stored as the first element
# Simulating randomm mating to perform simulation of the 2nd until the n+1:th generation
# Each mating Progenys are generated using randcross
for (gen_ix in 2:(n_gen + 1)) {
generations[[gen_ix]] <- randCross(pop=generations[[gen_ix - 1]], nCrosses = n_ind, nProgeny = 1,
simParam = SP)
}
bottleneck_generations <- generations[-1] #all generations except for the founder population gets returned (the simulated generations derived from the bottleneck)
return(bottleneck_generations)
}
n_generations <- 5
# Simulating random mating within each breeding group for 5 generations
breed1_bottleneck <- random_mating(breed1_founders, SP, n_generations)
breed2_bottleneck <- random_mating(breed2_founders, SP, n_generations)
# founders
founderpop
breed1_bottleneck
# Extracting final generation:
last_generation <- breed1_bottleneck[[n_generations]]
last_generation
f_causative <- numeric(500)
for (gen in 1:500) {
geno <- pullSegSiteGeno(last_generation, simParam = SP)[, causative_variant]
## Set fitness
fitness <- rep(1 - s, length(geno))
fitness[geno == 2] <- 1
fitness[geno == 1] <- 1 - s/2
## Biased sampling of parents based on fitness
parent1 <- sample(1:last_generation@nInd, 1000, replace = TRUE, prob = fitness)
parent2 <- sample(1:last_generation@nInd, 1000, replace = TRUE, prob = fitness)
pop <- makeCross(last_generation,
cbind(parent1, parent2),
nProgeny = 1,
simParam = SP)
pop <- AlphaSimR::mutate(pop, simParam = simparam)
f_causative[gen] <- sum(geno)/length(geno)/2
}
f_causative <- numeric(500)
for (gen in 1:500) {
geno <- pullSegSiteGeno(last_generation, simParam = SP)[, causative_variant]
## Set fitness
fitness <- rep(1 - s, length(geno))
fitness[geno == 2] <- 1
fitness[geno == 1] <- 1 - s/2
## Biased sampling of parents based on fitness
parent1 <- sample(1:last_generation@nInd, 1000, replace = TRUE, prob = fitness)
parent2 <- sample(1:last_generation@nInd, 1000, replace = TRUE, prob = fitness)
pop <- makeCross(last_generation,
cbind(parent1, parent2),
nProgeny = 1,
simParam = SP)
pop <- AlphaSimR::mutate(pop, simParam = SP)
f_causative[gen] <- sum(geno)/length(geno)/2
}
## Plot the resulting frequency trajectory for illustration
plot(f_causative)
f_causative
f_causative <- numeric(500)
n_generations <- 30 # 500 default
for (gen in 1:n_generations) {
geno <- pullSegSiteGeno(last_generation, simParam = SP)[, causative_variant]
## Set fitness
fitness <- rep(1 - s, length(geno))
fitness[geno == 2] <- 1
fitness[geno == 1] <- 1 - s/2
## Biased sampling of parents based on fitness
parent1 <- sample(1:last_generation@nInd, 1000, replace = TRUE, prob = fitness)
parent2 <- sample(1:last_generation@nInd, 1000, replace = TRUE, prob = fitness)
pop <- makeCross(last_generation,
cbind(parent1, parent2),
nProgeny = 1,
simParam = SP)
pop <- AlphaSimR::mutate(pop, simParam = SP)
f_causative[gen] <- sum(geno)/length(geno)/2
}
## Plot the resulting frequency trajectory for illustration
plot(f_causative)
f_causative
f_causative <- numeric(500)
n_generations <- 30 # 500 default
for (gen in 1:n_generations) {
geno <- pullSegSiteGeno(last_generation, simParam = SP)[, causative_variant]
## Set fitness
fitness <- rep(1 - s, length(geno))
fitness[geno == 2] <- 1
fitness[geno == 1] <- 1 - s/2
## Biased sampling of parents based on fitness
parent1 <- sample(1:last_generation@nInd, 1000, replace = TRUE, prob = fitness)
parent2 <- sample(1:last_generation@nInd, 1000, replace = TRUE, prob = fitness)
pop <- makeCross(last_generation,
cbind(parent1, parent2),
nProgeny = 1,
simParam = SP)
pop <- AlphaSimR::mutate(pop, simParam = SP)
f_causative[gen] <- sum(geno)/length(geno)/2
}
f_causative
## Plot the resulting frequency trajectory for illustration
plot(f_causative)
