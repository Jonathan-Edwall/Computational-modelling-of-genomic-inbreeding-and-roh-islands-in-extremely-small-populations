# sim_number_pattern <- ".*sim_(\\d+)_.*"
# sim_numbers <- as.numeric(gsub(sim_number_pattern, "\\1", causative_variant_position_files))
# sim_name <- sub("^(.*?)_causative_variant_window.*", "\\1", causative_variant_position_files)
#
# # Combine simulation name, number, and file name
# sim_info <- data.frame(sim_name = sim_name, file_name = causative_variant_position_files, stringsAsFactors = FALSE)
#
# # Initialize an empty list to store the selection model tables
# position_causative_variant_tables <- list()
#
# # Loop through each .tsv file
# for (i in 1:length(sim_info$sim_name)) {
#   # Get the file name
#   file <- sim_info$file_name[i]
#
#   # Read the header line
#   con <- file(file, "r")
#   header <- readLines(con, n = 1)
#   close(con)
#
#   # Remove "#" from the header and split it into column names
#   column_names <- strsplit(sub("#", "", header), "\t")[[1]]
#
#   # Read the .tsv frequency file into a data frame
#   causative_variant_position_data <- read.table(file, header = TRUE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names, sep = "\t")
#
#   # Add simulation_number as an attribute to the data frame
#   sim_num <- as.numeric(gsub(sim_number_pattern, "\\1", file))
#   attr(causative_variant_position_data, "Simulation_number") <- sim_num
#
#   # Extract the selection coefficient from the file name
#   selection_coefficient <- sub("^.*_(s\\d+_chr\\d+).*$", "\\1", file)
#
#   # Check if the selection coefficient already exists in the list
#   if (!(selection_coefficient %in% names(position_causative_variant_tables))) {
#     # If it doesn't exist, create an empty data frame
#     position_causative_variant_tables[[selection_coefficient]] <- data.frame()
#   }
#
#   # Append the data frame to the list under the selection coefficient
#   position_causative_variant_tables[[selection_coefficient]] <- rbind(position_causative_variant_tables[[selection_coefficient]], causative_variant_position_data)
# }
#
# View(position_causative_variant_tables)
setwd(Selection_causative_variant_dir)
# Pattern for finding files containing "causative_variant_window_lengths" and ending with ".tsv"
pattern <- ".*causative_variant_window_lengths.*\\.tsv$"
causative_variant_window_lengths_files <- list.files(pattern = pattern)
# Extract simulation numbers from the filename
sim_number_pattern <- ".*sim_(\\d+)_.*"
sim_numbers <- as.numeric(gsub(sim_number_pattern, "\\1", causative_variant_window_lengths_files))
sim_name <- sub("^(.*?)_causative_variant_window.*", "\\1", causative_variant_window_lengths_files)
# Combine simulation name, number, and file name
sim_info <- data.frame(sim_name = sim_name, file_name = causative_variant_window_lengths_files, stringsAsFactors = FALSE)
# Initialize an empty list to store the selection model tables
window_lengths_causative_variant_tables <- list()
# Loop through each .tsv file
for (i in 1:length(sim_info$sim_name)) {
# Get the file name
file <- sim_info$file_name[i]
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header
clean_header <- gsub("^#", "", header)
# Split the cleaned header into column names
column_names <- strsplit(clean_header, "\t")[[1]]
# Read the .tsv file into a data frame, using the cleaned column names
causative_variant_window_lengths_data <- read.table(file, header = TRUE, comment.char = "", stringsAsFactors = FALSE, col.names = column_names, sep = "\t")
# Add simulation_number as an attribute to the data frame
sim_num <- as.numeric(gsub(sim_number_pattern, "\\1", file))
attr(causative_variant_window_lengths_data, "Simulation_number") <- sim_num
# Extract the selection coefficient from the file name
selection_coefficient <- sub("^.*_(s\\d+_chr\\d+).*$", "\\1", file)
# Check if the selection coefficient already exists in the list
if (!(selection_coefficient %in% names(window_lengths_causative_variant_tables))) {
# If it doesn't exist, create an empty data frame
window_lengths_causative_variant_tables[[selection_coefficient]] <- data.frame()
}
# Append the data frame to the list under the selection coefficient
window_lengths_causative_variant_tables[[selection_coefficient]] <- rbind(window_lengths_causative_variant_tables[[selection_coefficient]], causative_variant_window_lengths_data)
}
View(window_lengths_causative_variant_tables)
setwd(Selection_causative_variant_dir)
# Pattern for finding files containing "causative_variant_window" and ending with ".bed"
pattern <- ".*causative_variant_window.*\\.bed$"
selection_model_causative_variant_window_files <- list.files(pattern = pattern)
# Extract simulation numbers from the filename
sim_number_pattern <- ".*sim_(\\d+)_.*"
sim_numbers <- as.numeric(gsub(sim_number_pattern, "\\1", selection_model_causative_variant_window_files))
sim_name <- sub("^(.*?)_causative_variant_window.*", "\\1", selection_model_causative_variant_window_files)
# sim_name <- sub("^(.*?)_F_ROH.*", "\\1", simulation_F_ROH_files)
# Preallocate sim_info as an empty data frame
sim_info <- data.frame(sim_name = character(), simulation_number = numeric(), file_name = character(), stringsAsFactors = FALSE)
# Combine simulation name, number, and file name
sim_info <- data.frame(sim_name = sim_name, simulation_number = sim_numbers, file_name =selection_model_causative_variant_window_files)
sim_info <- sim_info[order(sim_info$simulation_number), ]
# # Sort filenames based on simulation numbers
# sorted_selection_model_causative_variant_window_files <- selection_model_causative_variant_window_files[order(sim_numbers)]
# Initialize an empty list to store the selection model tables
causative_variant_window_tables_Selection_Model <- list()
# Loop through each sorted .tsv file
for (i in 1:length(sim_info$sim_name)) {
# Get the file name
file <- sim_info$file_name[i]
# Extract simname from the file name
simname_from_file <- sub("^(.*?)_causative_variant_window.*", "\\1", file)
# Check if the simname from the file matches with the simname from the dataframe
if (simname_from_file != sim_info$sim_name[i]) {
print(paste0("simname_from_file:", simname_from_file))
print(paste0("sim_info$sim_name[i]:", sim_info$sim_name[i]))
stop("Error: Simname from file does not match with simname from dataframe.")
}
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header
clean_header <- gsub("^#", "", header)
separator_causative_variant_window_file <- " "
# separator_causative_variant_window_file <- "\t"
# Split the cleaned header into column names
column_names <- strsplit(clean_header, separator_causative_variant_window_file)[[1]]
# # Read the .tsv frequency file into a data frame
causative_variant_window_data <- read.table(file, header = TRUE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names,sep = separator_causative_variant_window_file)
min_freq <- min(causative_variant_window_data[["FREQUENCY"]])
max_freq <- max(causative_variant_window_data[["FREQUENCY"]])
average_freq <- mean(causative_variant_window_data[["FREQUENCY"]])
causative_variant_window_data[["FREQUENCY"]]
# Add simulation_number as an attribute to the data frame
sim_num <- as.numeric(gsub(sim_number_pattern, "\\1", file))
attr(causative_variant_window_data, "Simulation_number") <- sim_num
# Extract the selection scenario from the file name
selection_scenario <- sub(".*(selection_model_s\\d+_chr\\d+).*", "\\1", file)
# Check if the selection coefficient already exists in the list
if (!(selection_scenario %in% names(causative_variant_window_tables_Selection_Model))) {
# If it doesn't exist, create a list for it
causative_variant_window_tables_Selection_Model[[selection_scenario]] <- list()
}
# Extract selection coefficent from the selection scenario
selection_coefficient <- sub("^.*_(s\\d+_chr\\d+)$", "\\1", selection_scenario)
###### Find the window_lengths of the causative variant in this window!!
# Directly find the row where Simulation.name matches simname_from_file
matching_row <- window_lengths_causative_variant_tables[[selection_coefficient]][window_lengths_causative_variant_tables[[selection_coefficient]]$Simulation.name == simname_from_file, ]
# Extract the Length..bp value
length_bp_value <- matching_row$Length..bp.
# Create a list with table name and corresponding data frame
table_info <- list(Sim_name = simname_from_file, filename = file, length_bp = length_bp_value,
min_freq = min_freq,max_freq = max_freq,avg_freq = average_freq,
causative_window_data = causative_variant_window_data)  # Added ROH_Hotspot_threshold here
# Append the table info to the list under selection_scenario
causative_variant_window_tables_Selection_Model[[selection_scenario]] <- c(causative_variant_window_tables_Selection_Model[[selection_scenario]], list(table_info))
}
# Calculate overall statistics for each selection coefficient
for (selection_scenario in names(causative_variant_window_tables_Selection_Model)) {
# Extract all tables for the current selection scenario
tables <- causative_variant_window_tables_Selection_Model[[selection_scenario]]
# Calculate average length in bp
all_causative_window_lengths_bp <- unlist(lapply(tables, function(table) table$length_bp))
avg_causative_window_length_bp <- mean(all_causative_window_lengths_bp)
avg_causative_window_length_Mb <- avg_causative_window_length_bp / 1e6
# Calculate minimum window frequency
all_causative_window_min_freq <- unlist(lapply(tables, function(table) table$min_freq))
min_causative_window_freq <- min(all_causative_window_min_freq)
# Calculate maximum window frequency
all_causative_window_max_freq <- unlist(lapply(tables, function(table) table$max_freq))
max_causative_window_freq <- max(all_causative_window_max_freq)
# Calculate mean window frequency
all_causative_window_avg_freq <- unlist(lapply(tables, function(table) table$avg_freq))
avg_causative_window_freq <- mean(all_causative_window_avg_freq)
# Store the calculated values back into the main list
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_length_bp <- avg_causative_window_length_bp
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_length_Mb <- avg_causative_window_length_Mb
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Min_causative_window_freq <- min_causative_window_freq
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Max_causative_window_freq <- max_causative_window_freq
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_freq <- avg_causative_window_freq
}
# Initialize an empty data frame to store the results
result_df <- data.frame()
# Loop through each selection scenario
for (selection_scenario in names(causative_variant_window_tables_Selection_Model)) {
# Extract the average causative window length for the current selection scenario
avg_causative_window_length <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_length_Mb
Min_window_freq <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Min_causative_window_freq
Max_window_freq <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Max_causative_window_freq
Avg_window_freq <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_freq
# Add the selection scenario and average causative window length to the result data frame
result_df <- rbind(result_df, data.frame(Selection_coefficient = selection_scenario, Avg_Length_Mb = avg_causative_window_length, Min_freq = Min_window_freq,
Max_freq =  Max_window_freq,Avg_window_freq = Avg_window_freq
))
}
View(causative_variant_window_tables_Selection_Model)
# Print the table using kable
kable(result_df)
echo = FALSE # Hides the code.
results = 'hide' # Hides the output of the code.
message = FALSE # Hides any messages generated by the code.
warning = FALSE # Hides any warnings generated by the code.
# Clean the working environment
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
####################################
# Defining the working directory
####################################
# Set the path to your GitHub folder
YOUR_GITHUB_ROOT_DIRECTORY <- "C://Users//jonat//GitHub"
# Defining the relative path in the repository
repository_path <- file.path(YOUR_GITHUB_ROOT_DIRECTORY,"Computational-modelling-of-genomic-inbreeding-and-roh-islands-in-extremely-small-populations")
####################################
# Defining the input file
####################################
#results_dir <- file.path(repository_path,"results - innan 24 maj")
results_dir <- file.path(repository_path,"results")
plink_ROH_dir <- file.path(results_dir,"PLINK//ROH")
expected_heterozygosity_dir <- file.path(results_dir,"expected_heterozygosity")
ROH_hotspots_dir <- file.path(results_dir,"ROH-Hotspots")
Selection_strength_test_dir <- file.path(ROH_hotspots_dir,"selection_strength_test")
Sweep_test_dir <- file.path(ROH_hotspots_dir,"sweep_test")
###############
## Empirical ###
###############
### ROH hotspots ###
Empirical_data_ROH_hotspots_dir  <- file.path(ROH_hotspots_dir,"empirical//german_shepherd")
Empirical_data_autosome_ROH_freq_dir <- file.path(Empirical_data_ROH_hotspots_dir,"Gosling_plots//autosome_roh_freq")
### Inbreeding coefficient ###
Empirical_data_F_ROH_dir  <- file.path(plink_ROH_dir,"empirical//doi_10_5061_dryad_h44j0zpkf__v20210813//F_ROH")
### Expected Heterozygosity distribution ###
Empirical_data_H_e_dir <- file.path(expected_heterozygosity_dir,"empirical//german_shepherd")
###############
## Simulated ###
###############
### ROH hotspots ###
Neutral_model_ROH_hotspots_dir  <- file.path(ROH_hotspots_dir,"simulated/neutral")
Neutral_model_autosome_ROH_freq_dir <- file.path(Neutral_model_ROH_hotspots_dir,"Gosling_plots/autosome_roh_freq")
Selection_model_ROH_hotspots_dir  <- file.path(ROH_hotspots_dir,"simulated/selection")
Selection_model_autosome_ROH_freq_dir <- file.path(Selection_model_ROH_hotspots_dir,"Gosling_plots/autosome_roh_freq")
### Inbreeding coefficient ###
Neutral_model_F_ROH_dir  <- file.path(plink_ROH_dir,"simulated/neutral_model/F_ROH")
Selection_model_F_ROH_dir  <- file.path(plink_ROH_dir,"simulated/selection_model/F_ROH")
### Expected Heterozygosity distribution ###
Neutral_model_H_e_dir <- file.path(expected_heterozygosity_dir,"simulated/neutral_model")
Selection_model_H_e_dir <- file.path(expected_heterozygosity_dir,"simulated/selection_model")
# Causative variant
Selection_causative_variant_dir <- file.path(results_dir,"causative_variant")
histogram_line_sizes <- 3
empirical_data_color <- "darkgreen"
neutral_model_color <- "blue"
selection_model_color <- "purple"
#
# ## Extracting the prefix of the file used
# # Extracting the basename (filename without extension) from the file path
# filename <- basename(input_file)
# # Split the filename by "_ROH_freq.bed" and get the first part
# prefix <- strsplit(filename, "_ROH_freq.bed")[[1]][1]
# # Output the prefix
# print(prefix)
# ####################################
# # Defining the output dirs
# ####################################
#
# output_dir <- file.path(repository_path,"results/ROH-Hotspots/simulated/selection_model")
#
# # Set the working directory for notebook chunks
# knitr::opts_knit$set(root.dir = output_dir)
#
# # Output dir for section 3.2
# output_dir_gapless_roh_hotspots <- file.path(output_dir, "gapless_roh_hotspots")
# if (!dir.exists(output_dir_gapless_roh_hotspots)) {
#   # Create the working directory if it doesn't exist
#   dir.create(output_dir_gapless_roh_hotspots, recursive = TRUE)
# }
#
# # Output dir for section 2
# output_dir_gosling_plots <- file.path(output_dir, "Gosling_plots")
#
# output_dir_autosome_roh_freq <- file.path(output_dir_gosling_plots, "autosome_roh_freq")
#
#
# if (!dir.exists(output_dir_autosome_roh_freq)) {
#   # Create the working directory if it doesn't exist
#   dir.create(output_dir_autosome_roh_freq, recursive = TRUE)
# }
# print(output_dir_autosome_roh_freq)
#
# output_dir_roh_hotspots_freq <- file.path(output_dir_gosling_plots, "roh_hotspots_freq")
# if (!dir.exists(output_dir_roh_hotspots_freq)) {
#   # Create the working directory if it doesn't exist
#   dir.create(output_dir_roh_hotspots_freq, recursive = TRUE)
# }
#
#
#
#
#
#
#
#
#
# # Set the working directory for notebook chunks
# knitr::opts_knit$set(root.dir = output_dir)
####################################
# Defining Input parameters
####################################
# # Verify the current working directory
# getwd()
library(knitr)
library(ggplot2)
# setwd(Selection_causative_variant_dir)
#
# # Pattern for finding files containing "causative_variant_window_lengths" and ending with ".tsv"
# pattern <- ".*causative_variant_window_lengths.*\\.tsv$"
# causative_variant_position_files <- list.files(pattern = pattern)
#
# # Extract simulation numbers from the filename
# sim_number_pattern <- ".*sim_(\\d+)_.*"
# sim_numbers <- as.numeric(gsub(sim_number_pattern, "\\1", causative_variant_position_files))
# sim_name <- sub("^(.*?)_causative_variant_window.*", "\\1", causative_variant_position_files)
#
# # Combine simulation name, number, and file name
# sim_info <- data.frame(sim_name = sim_name, file_name = causative_variant_position_files, stringsAsFactors = FALSE)
#
# # Initialize an empty list to store the selection model tables
# position_causative_variant_tables <- list()
#
# # Loop through each .tsv file
# for (i in 1:length(sim_info$sim_name)) {
#   # Get the file name
#   file <- sim_info$file_name[i]
#
#   # Read the header line
#   con <- file(file, "r")
#   header <- readLines(con, n = 1)
#   close(con)
#
#   # Remove "#" from the header and split it into column names
#   column_names <- strsplit(sub("#", "", header), "\t")[[1]]
#
#   # Read the .tsv frequency file into a data frame
#   causative_variant_position_data <- read.table(file, header = TRUE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names, sep = "\t")
#
#   # Add simulation_number as an attribute to the data frame
#   sim_num <- as.numeric(gsub(sim_number_pattern, "\\1", file))
#   attr(causative_variant_position_data, "Simulation_number") <- sim_num
#
#   # Extract the selection coefficient from the file name
#   selection_coefficient <- sub("^.*_(s\\d+_chr\\d+).*$", "\\1", file)
#
#   # Check if the selection coefficient already exists in the list
#   if (!(selection_coefficient %in% names(position_causative_variant_tables))) {
#     # If it doesn't exist, create an empty data frame
#     position_causative_variant_tables[[selection_coefficient]] <- data.frame()
#   }
#
#   # Append the data frame to the list under the selection coefficient
#   position_causative_variant_tables[[selection_coefficient]] <- rbind(position_causative_variant_tables[[selection_coefficient]], causative_variant_position_data)
# }
#
# View(position_causative_variant_tables)
setwd(Selection_causative_variant_dir)
# Pattern for finding files containing "causative_variant_window_lengths" and ending with ".tsv"
pattern <- ".*causative_variant_window_lengths.*\\.tsv$"
causative_variant_window_lengths_files <- list.files(pattern = pattern)
# Extract simulation numbers from the filename
sim_number_pattern <- ".*sim_(\\d+)_.*"
sim_numbers <- as.numeric(gsub(sim_number_pattern, "\\1", causative_variant_window_lengths_files))
sim_name <- sub("^(.*?)_causative_variant_window.*", "\\1", causative_variant_window_lengths_files)
# Combine simulation name, number, and file name
sim_info <- data.frame(sim_name = sim_name, file_name = causative_variant_window_lengths_files, stringsAsFactors = FALSE)
# Initialize an empty list to store the selection model tables
window_lengths_causative_variant_tables <- list()
# Loop through each .tsv file
for (i in 1:length(sim_info$sim_name)) {
# Get the file name
file <- sim_info$file_name[i]
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header
clean_header <- gsub("^#", "", header)
# Split the cleaned header into column names
column_names <- strsplit(clean_header, "\t")[[1]]
# Read the .tsv file into a data frame, using the cleaned column names
causative_variant_window_lengths_data <- read.table(file, header = TRUE, comment.char = "", stringsAsFactors = FALSE, col.names = column_names, sep = "\t")
# Add simulation_number as an attribute to the data frame
sim_num <- as.numeric(gsub(sim_number_pattern, "\\1", file))
attr(causative_variant_window_lengths_data, "Simulation_number") <- sim_num
# Extract the selection coefficient from the file name
selection_coefficient <- sub("^.*_(s\\d+_chr\\d+).*$", "\\1", file)
# Check if the selection coefficient already exists in the list
if (!(selection_coefficient %in% names(window_lengths_causative_variant_tables))) {
# If it doesn't exist, create an empty data frame
window_lengths_causative_variant_tables[[selection_coefficient]] <- data.frame()
}
# Append the data frame to the list under the selection coefficient
window_lengths_causative_variant_tables[[selection_coefficient]] <- rbind(window_lengths_causative_variant_tables[[selection_coefficient]], causative_variant_window_lengths_data)
}
View(window_lengths_causative_variant_tables)
setwd(Selection_causative_variant_dir)
# Pattern for finding files containing "causative_variant_window" and ending with ".bed"
pattern <- ".*causative_variant_window.*\\.bed$"
selection_model_causative_variant_window_files <- list.files(pattern = pattern)
# Extract simulation numbers from the filename
sim_number_pattern <- ".*sim_(\\d+)_.*"
sim_numbers <- as.numeric(gsub(sim_number_pattern, "\\1", selection_model_causative_variant_window_files))
sim_name <- sub("^(.*?)_causative_variant_window.*", "\\1", selection_model_causative_variant_window_files)
# sim_name <- sub("^(.*?)_F_ROH.*", "\\1", simulation_F_ROH_files)
# Preallocate sim_info as an empty data frame
sim_info <- data.frame(sim_name = character(), simulation_number = numeric(), file_name = character(), stringsAsFactors = FALSE)
# Combine simulation name, number, and file name
sim_info <- data.frame(sim_name = sim_name, simulation_number = sim_numbers, file_name =selection_model_causative_variant_window_files)
sim_info <- sim_info[order(sim_info$simulation_number), ]
# # Sort filenames based on simulation numbers
# sorted_selection_model_causative_variant_window_files <- selection_model_causative_variant_window_files[order(sim_numbers)]
# Initialize an empty list to store the selection model tables
causative_variant_window_tables_Selection_Model <- list()
# Loop through each sorted .tsv file
for (i in 1:length(sim_info$sim_name)) {
# Get the file name
file <- sim_info$file_name[i]
# Extract simname from the file name
simname_from_file <- sub("^(.*?)_causative_variant_window.*", "\\1", file)
# Check if the simname from the file matches with the simname from the dataframe
if (simname_from_file != sim_info$sim_name[i]) {
print(paste0("simname_from_file:", simname_from_file))
print(paste0("sim_info$sim_name[i]:", sim_info$sim_name[i]))
stop("Error: Simname from file does not match with simname from dataframe.")
}
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header
clean_header <- gsub("^#", "", header)
separator_causative_variant_window_file <- " "
# separator_causative_variant_window_file <- "\t"
# Split the cleaned header into column names
column_names <- strsplit(clean_header, separator_causative_variant_window_file)[[1]]
# # Read the .tsv frequency file into a data frame
causative_variant_window_data <- read.table(file, header = TRUE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names,sep = separator_causative_variant_window_file)
min_freq <- min(causative_variant_window_data[["FREQUENCY"]])
max_freq <- max(causative_variant_window_data[["FREQUENCY"]])
average_freq <- mean(causative_variant_window_data[["FREQUENCY"]])
causative_variant_window_data[["FREQUENCY"]]
# Add simulation_number as an attribute to the data frame
sim_num <- as.numeric(gsub(sim_number_pattern, "\\1", file))
attr(causative_variant_window_data, "Simulation_number") <- sim_num
# Extract the selection scenario from the file name
selection_scenario <- sub(".*(selection_model_s\\d+_chr\\d+).*", "\\1", file)
# Check if the selection coefficient already exists in the list
if (!(selection_scenario %in% names(causative_variant_window_tables_Selection_Model))) {
# If it doesn't exist, create a list for it
causative_variant_window_tables_Selection_Model[[selection_scenario]] <- list()
}
# Extract selection coefficent from the selection scenario
selection_coefficient <- sub("^.*_(s\\d+_chr\\d+)$", "\\1", selection_scenario)
###### Find the window_lengths of the causative variant in this window!!
# Directly find the row where Simulation.name matches simname_from_file
matching_row <- window_lengths_causative_variant_tables[[selection_coefficient]][window_lengths_causative_variant_tables[[selection_coefficient]]$Simulation.name == simname_from_file, ]
# Extract the Length..bp value
length_bp_value <- matching_row$Length..bp.
# Create a list with table name and corresponding data frame
table_info <- list(Sim_name = simname_from_file, filename = file, length_bp = length_bp_value,
min_freq = min_freq,max_freq = max_freq,avg_freq = average_freq,
causative_window_data = causative_variant_window_data)  # Added ROH_Hotspot_threshold here
# Append the table info to the list under selection_scenario
causative_variant_window_tables_Selection_Model[[selection_scenario]] <- c(causative_variant_window_tables_Selection_Model[[selection_scenario]], list(table_info))
}
# Calculate overall statistics for each selection coefficient
for (selection_scenario in names(causative_variant_window_tables_Selection_Model)) {
# Extract all tables for the current selection scenario
tables <- causative_variant_window_tables_Selection_Model[[selection_scenario]]
# Calculate average length in bp
all_causative_window_lengths_bp <- unlist(lapply(tables, function(table) table$length_bp))
avg_causative_window_length_bp <- mean(all_causative_window_lengths_bp)
avg_causative_window_length_Mb <- avg_causative_window_length_bp / 1e6
# Calculate minimum window frequency
all_causative_window_min_freq <- unlist(lapply(tables, function(table) table$min_freq))
min_causative_window_freq <- min(all_causative_window_min_freq)
# Calculate maximum window frequency
all_causative_window_max_freq <- unlist(lapply(tables, function(table) table$max_freq))
max_causative_window_freq <- max(all_causative_window_max_freq)
# Calculate mean window frequency
all_causative_window_avg_freq <- unlist(lapply(tables, function(table) table$avg_freq))
avg_causative_window_freq <- mean(all_causative_window_avg_freq)
# Store the calculated values back into the main list
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_length_bp <- avg_causative_window_length_bp
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_length_Mb <- avg_causative_window_length_Mb
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Min_causative_window_freq <- min_causative_window_freq
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Max_causative_window_freq <- max_causative_window_freq
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_freq <- avg_causative_window_freq
}
# Initialize an empty data frame to store the results
result_df <- data.frame()
# Loop through each selection scenario
for (selection_scenario in names(causative_variant_window_tables_Selection_Model)) {
# Extract selection coefficent from the selection scenario
selection_coefficient <- sub("^.*_(s\\d+_chr\\d+)$", "\\1", selection_scenario)
# Extract the average causative window length for the current selection scenario
avg_causative_window_length <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_length_Mb
Min_window_freq <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Min_causative_window_freq
Max_window_freq <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Max_causative_window_freq
Avg_window_freq <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_freq
# Add the selection scenario and average causative window length to the result data frame
result_df <- rbind(result_df, data.frame(Selection_coefficient = selection_coefficient, Avg_Length_Mb = avg_causative_window_length, Min_freq = Min_window_freq,
Max_freq =  Max_window_freq,Avg_window_freq = Avg_window_freq
))
}
View(causative_variant_window_tables_Selection_Model)
# Print the table using kable
kable(result_df)
