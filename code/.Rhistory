repository_path <- file.path(YOUR_GITHUB_ROOT_DIRECTORY,"Computational-modelling-of-genomic-inbreeding-and-roh-islands-in-extremely-small-populations")
####################################
# Defining the input file
####################################
# input_file <- file.path(repository_path,"results/Bedtools/coverage/empirical/doi_10_5061_dryad_h44j0zpkf__v20210813/pop_roh_freq/german_shepherd_ROH_freq.bed")
input_file <- file.path(repository_path,"results/Bedtools/coverage/simulated/neutral_model/pop_roh_freq/sim_1_neutral_model_CHR3_ROH_freq.bed")
## Extracting the prefix of the file used
# Extracting the basename (filename without extension) from the file path
filename <- basename(input_file)
# Split the filename by "_ROH_freq.bed" and get the first part
prefix <- strsplit(filename, "_ROH_freq.bed")[[1]][1]
# Output the prefix
print(prefix)
####################################
# Defining the output dirs
####################################
#output_dir <- file.path(repository_path,"results/ROH-Hotspots/empirical/german_shepherd")
output_dir <- file.path(repository_path,"results/ROH-Hotspots/simulated/neutral_model")
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir)
# Output dir for section 3.2
output_dir_gapless_roh_hotspots <- file.path(output_dir, "gapless_roh_hotspots")
if (!dir.exists(output_dir_gapless_roh_hotspots)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_gapless_roh_hotspots, recursive = TRUE)
}
# Output dir for section 2
output_dir_gosling_plots <- file.path(output_dir, "Gosling_plots")
output_dir_autosome_roh_freq <- file.path(output_dir_gosling_plots, "autosome_roh_freq")
if (!dir.exists(output_dir_autosome_roh_freq)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_autosome_roh_freq, recursive = TRUE)
}
print(output_dir_autosome_roh_freq)
output_dir_roh_hotspots_freq <- file.path(output_dir_gosling_plots, "roh_hotspots_freq")
if (!dir.exists(output_dir_roh_hotspots_freq)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_roh_hotspots_freq, recursive = TRUE)
}
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir)
####################################
# Defining Input parameters
####################################
roh_hotspot_threshold_percentage <- 0.01 # 0.01 represents top 1 % most homozygous region
max_hotspot_windows_gap <- 2*10^6 # ROH-hotspot windows that are less than 2Mb apart are merged together (see section 1.3)
# # Verify the current working directory
# getwd()
# Load the MASS package for fitdistr function
library(MASS)
library(ggplot2)
# Read the data without treating "#" as a comment
data <- read.table(input_file, header = TRUE, sep = "\t", comment.char = "")
# Assigning column names
colnames(data) <- c("CHR", "POS1", "POS2", "COUNT", "FREQUENCY")
# Frequency Data is chosen
values <- data$FREQUENCY
# Sort the values in descending order to find the top 1%
sorted_values <- sort(values, decreasing = TRUE)
# Calculate the threshold for the top 1%
threshold_index <- ceiling(roh_hotspot_threshold_percentage * length(sorted_values))
threshold <- sorted_values[threshold_index]
# Identify genomic windows with ROH frequency above the threshold
top_1_percent_ROH <- data[data$FREQUENCY > threshold, ]
# Print the top 1% of ROH regions
print(top_1_percent_ROH)
# Initialize an empty dataframe to store merged rows
merged_top_1_percent_ROH <- data.frame(CHR = character(), POS1 = integer(), POS2 = integer(), COUNT = integer(), FREQUENCY = numeric())
# Initialize a variable to store the previous row
prev_row <- NULL
# Iterate over each row in the top 1% ROH data
for (i in 1:nrow(top_1_percent_ROH)) {
# Get the current row
current_row <- top_1_percent_ROH[i, ]
# Check if it's the first row or if conditions for merging are met
if (!is.null(prev_row) && current_row$CHR == prev_row$CHR && current_row$COUNT == prev_row$COUNT && as.integer(current_row$POS1) == as.integer(prev_row$POS2) + 1) {
# Merge the current row with the previous one
prev_row$POS2 <- current_row$POS2
} else {
# If conditions for merging are not met, add the previous row to the merged dataframe
if (!is.null(prev_row)) {
merged_top_1_percent_ROH <- rbind(merged_top_1_percent_ROH, prev_row)
}
# Update the previous row to the current row
prev_row <- current_row
}
}
# Add the last row to the merged dataframe
if (!is.null(prev_row)) {
merged_top_1_percent_ROH <- rbind(merged_top_1_percent_ROH, prev_row)
}
# Calculate the length in kilobases (kb)
merged_top_1_percent_ROH$Length_kb <- (merged_top_1_percent_ROH$POS2 - merged_top_1_percent_ROH$POS1 + 1) / 1000
# Compute distance to previous and next window
merged_top_1_percent_ROH$Distance_to_prev_kb <- c(NA, diff(merged_top_1_percent_ROH$POS1)/1000)
merged_top_1_percent_ROH$Distance_to_next_kb <- c(diff(merged_top_1_percent_ROH$POS1)/1000, NA)
# Print the merged top 1% ROH data
print(merged_top_1_percent_ROH)
# Initialize an empty dataframe to store linked windows
linked_hotspot_windows <- data.frame(CHR = character(), POS1 = integer(), POS2 = integer(), Length_kb = numeric())
# Initialize variables to keep track of linked window
current_window <- NULL
# Iterate over each row in the merged dataframe
for (i in 1:nrow(merged_top_1_percent_ROH)) {
# Get the current row
current_row <- merged_top_1_percent_ROH[i, ]
# If it's the first row or if it's not within the specified distance from the previous window, start a new window
if (is.null(current_window) || current_row$POS1 - current_window$POS2 > max_hotspot_windows_gap || current_row$CHR != current_window$CHR) {
if (!is.null(current_window)) {
# Calculate Length_kb for the completed window and add it to the linked dataframe
current_window$Length_kb <- (current_window$POS2 - current_window$POS1 + 1) / 1000
linked_hotspot_windows <- rbind(linked_hotspot_windows, current_window[, c("CHR", "POS1", "POS2", "Length_kb")])
}
# Start a new window
current_window <- current_row
} else {
# Extend the current window
current_window$POS2 <- current_row$POS2
}
}
# Add the last window to the linked dataframe
if (!is.null(current_window)) {
current_window$Length_kb <- (current_window$POS2 - current_window$POS1 + 1) / 1000
linked_hotspot_windows <- rbind(linked_hotspot_windows, current_window[, c("CHR", "POS1", "POS2", "Length_kb")])
}
# Print the linked windows
print(linked_hotspot_windows)
# Create scatter plots for each chromosome
for (CHR in unique(data$CHR)) {
# Subset data for the current chromosome
chr_data <- data[data$CHR == CHR, ]
chr_merged_data <- merged_top_1_percent_ROH[merged_top_1_percent_ROH$CHR == CHR, ]
# Create scatter plot
p <- ggplot() +
geom_point(data = chr_data, aes(x = POS1, y = FREQUENCY, color = "ROH-segments"), alpha = 0.5) +
geom_point(data = chr_merged_data, aes(x = POS1, y = FREQUENCY, color = "ROH hotspots"), alpha = 0.5) +
geom_hline(aes(yintercept = threshold, color = "ROH hotspot threshold"), linetype = "dashed") +
labs(title = paste("Scatter Plot for Chromosome", CHR),
x = "Position",
y = "FREQUENCY",
color = "Legend") +
scale_color_manual(values = c("ROH-segments" = "gray", "ROH hotspots" = "blue", "ROH hotspot threshold" = "red"),
labels = c("ROH-segments" = "ROH-segments", "ROH hotspots" = "ROH hotspots", "ROH hotspot threshold" = "ROH hotspot threshold")) +
theme_minimal()
# Print the plot
print(p)
}
formatted_threshold <- format(threshold, nsmall = 3)
# Define a function to split each window into two rows
split_window <- function(data) {
# Create a new dataframe to store the split rows
new_data <- data.frame(
CHR = data$CHR,
POS = c(data$POS1, data$POS2),
COUNT = rep(data$COUNT, 2),
FREQUENCY = rep(data$FREQUENCY, 2),
Length_kb = rep(data$Length_kb, 2),
Hotspot_interval = c(paste0("[", data$POS1, ",", data$POS2, "]"), paste0("[", data$POS1, ",", data$POS2, "]"))
)
return(new_data)
}
# Initialize an empty list to store the split dataframes
split_data <- list()
# Iterate over each chromosome
for (Chromosome in unique(merged_top_1_percent_ROH$CHR)) {
# Subset data for the current chromosome
chr_data <- merged_top_1_percent_ROH[merged_top_1_percent_ROH$CHR == Chromosome, ]
# Split each window into two rows
split_data[[Chromosome]] <- split_window(chr_data)
}
# Combine all split dataframes into one
split_data_combined <- do.call(rbind, split_data)
# Export the combined split dataframe to TSV files for each chromosome
for (Chromosome in unique(merged_top_1_percent_ROH$CHR)) {
# Subset the split data for the current chromosome
chr_split_data <- split_data_combined[split_data_combined$CHR == Chromosome, ]
# Define the filename with the output directory path
filename <- file.path(output_dir_roh_hotspots_freq, paste(prefix,"_CHR", Chromosome, "_ROH_Hotspot_freq.tsv", sep = ""))
# Create the directory if it doesn't exist
dir.create(dirname(filename), recursive = TRUE, showWarnings = FALSE)
# Write data to TSV file without quotes and with tab separation
write.table(chr_split_data, file = filename, sep = "\t", row.names = FALSE, quote = FALSE)
}
# Define a function to split each window into two rows
split_window <- function(data) {
# Create a new dataframe to store the split rows
new_data <- data.frame(
CHR = data$CHR,
POS = c(data$POS1, data$POS2),
COUNT = rep(data$COUNT, 2),
FREQUENCY = rep(data$FREQUENCY, 2)
)
return(new_data)
}
# Initialize an empty list to store the split dataframes
split_data <- list()
# Iterate over each chromosome
for (Chromosome in unique(data$CHR)) {
# Subset data for the current chromosome
chr_data <- data[data$CHR == Chromosome, ]
# Check if any window has non-zero counts (If there exists any ROH-windows in the current chromosome)
if (any(chr_data$COUNT != 0)) {
# Split each window into two rows
split_data[[Chromosome]] <- split_window(chr_data)
# Define the filename with the output directory path
filename <- file.path(output_dir_autosome_roh_freq, paste(prefix, "_CHR", Chromosome, "_ROH_freq", "_threshold_", formatted_threshold, ".tsv", sep = ""))
# Write data to TSV file without quotes and with tab separation
write.table(split_data[[Chromosome]], file = filename, sep = "\t", row.names = FALSE, quote = FALSE)
} else {
# Print message indicating no non-zero counts for the chromosome
print(paste("Skipping chromosome",Chromosome,"due to no ROH-windows found on the chromosome"))
}
}
# Iterate over unique chromosomes
for (Chromosome in unique(merged_top_1_percent_ROH$CHR)) {
# Subset data for the current chromosome
chr_data <- merged_top_1_percent_ROH[merged_top_1_percent_ROH$CHR == Chromosome, c("CHR", "POS1", "POS2")]
# Define the filename with the output directory path
filename <- file.path(output_dir_gapless_roh_hotspots, paste(prefix,"_CHR", Chromosome,"_ROH_Hotspot_gapless_windows.bed", sep = ""))
# Write data to .bed file
write.table(chr_data, file = filename, sep = "\t", quote = FALSE, col.names = FALSE, row.names = FALSE)
# Print message indicating successful export
cat("Exported", nrow(chr_data), "hotspot windows to", filename, "\n")
}
# Iterate over unique chromosomes
for (Chromosome in unique(linked_hotspot_windows$CHR)) {
# Subset data for the current chromosome
chr_data <- linked_hotspot_windows[linked_hotspot_windows$CHR == Chromosome, c("CHR", "POS1", "POS2")]
# Define the filename with the output directory path
filename <- file.path(output_dir, paste(prefix,"_CHR", Chromosome,"_ROH_Hotspot_windows.bed", sep = ""))
# Write data to .bed file
write.table(chr_data, file = filename, sep = "\t", quote = FALSE, col.names = FALSE, row.names = FALSE)
# Print message indicating successful export
cat("Exported", nrow(chr_data), "hotspot windows to", filename, "\n")
}
# Clean the working environment
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
####################################
# Defining the working directory
####################################
# Set the path to your GitHub folder
YOUR_GITHUB_ROOT_DIRECTORY <- "C:/Users/jonat/GitHub"
# Defining the relative path in the repository
repository_path <- file.path(YOUR_GITHUB_ROOT_DIRECTORY,"Computational-modelling-of-genomic-inbreeding-and-roh-islands-in-extremely-small-populations")
####################################
# Defining the input file
####################################
# input_file <- file.path(repository_path,"results/Bedtools/coverage/empirical/doi_10_5061_dryad_h44j0zpkf__v20210813/pop_roh_freq/german_shepherd_ROH_freq.bed")
# input_file <- file.path(repository_path,"results/Bedtools/coverage/simulated/neutral_model/pop_roh_freq/sim_1_neutral_model_CHR3_ROH_freq.bed")
input_file <- file.path(repository_path,"results/Bedtools/coverage/simulated/selection_model/pop_roh_freq/sim_1_selection_model_s01_chr3_ROH_freq.bed")
## Extracting the prefix of the file used
# Extracting the basename (filename without extension) from the file path
filename <- basename(input_file)
# Split the filename by "_ROH_freq.bed" and get the first part
prefix <- strsplit(filename, "_ROH_freq.bed")[[1]][1]
# Output the prefix
print(prefix)
####################################
# Defining the output dirs
####################################
#output_dir <- file.path(repository_path,"results/ROH-Hotspots/empirical/german_shepherd")
#output_dir <- file.path(repository_path,"results/ROH-Hotspots/simulated/neutral_model")
output_dir <- file.path(repository_path,"results/ROH-Hotspots/simulated/selection_model")
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir)
# Output dir for section 3.2
output_dir_gapless_roh_hotspots <- file.path(output_dir, "gapless_roh_hotspots")
if (!dir.exists(output_dir_gapless_roh_hotspots)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_gapless_roh_hotspots, recursive = TRUE)
}
# Output dir for section 2
output_dir_gosling_plots <- file.path(output_dir, "Gosling_plots")
output_dir_autosome_roh_freq <- file.path(output_dir_gosling_plots, "autosome_roh_freq")
if (!dir.exists(output_dir_autosome_roh_freq)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_autosome_roh_freq, recursive = TRUE)
}
print(output_dir_autosome_roh_freq)
output_dir_roh_hotspots_freq <- file.path(output_dir_gosling_plots, "roh_hotspots_freq")
if (!dir.exists(output_dir_roh_hotspots_freq)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_roh_hotspots_freq, recursive = TRUE)
}
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir)
####################################
# Defining Input parameters
####################################
roh_hotspot_threshold_percentage <- 0.01 # 0.01 represents top 1 % most homozygous region
max_hotspot_windows_gap <- 2*10^6 # ROH-hotspot windows that are less than 2Mb apart are merged together (see section 1.3)
# # Verify the current working directory
# getwd()
# Load the MASS package for fitdistr function
library(MASS)
library(ggplot2)
# Read the data without treating "#" as a comment
data <- read.table(input_file, header = TRUE, sep = "\t", comment.char = "")
# Assigning column names
colnames(data) <- c("CHR", "POS1", "POS2", "COUNT", "FREQUENCY")
# Frequency Data is chosen
values <- data$FREQUENCY
# Sort the values in descending order to find the top 1%
sorted_values <- sort(values, decreasing = TRUE)
# Calculate the threshold for the top 1%
threshold_index <- ceiling(roh_hotspot_threshold_percentage * length(sorted_values))
threshold <- sorted_values[threshold_index]
# Identify genomic windows with ROH frequency above the threshold
top_1_percent_ROH <- data[data$FREQUENCY > threshold, ]
# Print the top 1% of ROH regions
print(top_1_percent_ROH)
# Initialize an empty dataframe to store merged rows
merged_top_1_percent_ROH <- data.frame(CHR = character(), POS1 = integer(), POS2 = integer(), COUNT = integer(), FREQUENCY = numeric())
# Initialize a variable to store the previous row
prev_row <- NULL
# Iterate over each row in the top 1% ROH data
for (i in 1:nrow(top_1_percent_ROH)) {
# Get the current row
current_row <- top_1_percent_ROH[i, ]
# Check if it's the first row or if conditions for merging are met
if (!is.null(prev_row) && current_row$CHR == prev_row$CHR && current_row$COUNT == prev_row$COUNT && as.integer(current_row$POS1) == as.integer(prev_row$POS2) + 1) {
# Merge the current row with the previous one
prev_row$POS2 <- current_row$POS2
} else {
# If conditions for merging are not met, add the previous row to the merged dataframe
if (!is.null(prev_row)) {
merged_top_1_percent_ROH <- rbind(merged_top_1_percent_ROH, prev_row)
}
# Update the previous row to the current row
prev_row <- current_row
}
}
# Clean the working environment
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
####################################
# Defining the working directory
####################################
# Set the path to your GitHub folder
YOUR_GITHUB_ROOT_DIRECTORY <- "C:/Users/jonat/GitHub"
# Defining the relative path in the repository
repository_path <- file.path(YOUR_GITHUB_ROOT_DIRECTORY,"Computational-modelling-of-genomic-inbreeding-and-roh-islands-in-extremely-small-populations")
####################################
# Defining the input file
####################################
# input_file <- file.path(repository_path,"results/Bedtools/coverage/empirical/doi_10_5061_dryad_h44j0zpkf__v20210813/pop_roh_freq/german_shepherd_ROH_freq.bed")
# input_file <- file.path(repository_path,"results/Bedtools/coverage/simulated/neutral_model/pop_roh_freq/sim_1_neutral_model_CHR3_ROH_freq.bed")
input_file <- file.path(repository_path,"results/Bedtools/coverage/simulated/selection_model/pop_roh_freq/sim_1_selection_model_s01_chr3_ROH_freq.bed")
## Extracting the prefix of the file used
# Extracting the basename (filename without extension) from the file path
filename <- basename(input_file)
# Split the filename by "_ROH_freq.bed" and get the first part
prefix <- strsplit(filename, "_ROH_freq.bed")[[1]][1]
# Output the prefix
print(prefix)
####################################
# Defining the output dirs
####################################
#output_dir <- file.path(repository_path,"results/ROH-Hotspots/empirical/german_shepherd")
#output_dir <- file.path(repository_path,"results/ROH-Hotspots/simulated/neutral_model")
output_dir <- file.path(repository_path,"results/ROH-Hotspots/simulated/selection_model")
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir)
# Output dir for section 3.2
output_dir_gapless_roh_hotspots <- file.path(output_dir, "gapless_roh_hotspots")
if (!dir.exists(output_dir_gapless_roh_hotspots)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_gapless_roh_hotspots, recursive = TRUE)
}
# Output dir for section 2
output_dir_gosling_plots <- file.path(output_dir, "Gosling_plots")
output_dir_autosome_roh_freq <- file.path(output_dir_gosling_plots, "autosome_roh_freq")
if (!dir.exists(output_dir_autosome_roh_freq)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_autosome_roh_freq, recursive = TRUE)
}
print(output_dir_autosome_roh_freq)
output_dir_roh_hotspots_freq <- file.path(output_dir_gosling_plots, "roh_hotspots_freq")
if (!dir.exists(output_dir_roh_hotspots_freq)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_roh_hotspots_freq, recursive = TRUE)
}
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir)
####################################
# Defining Input parameters
####################################
roh_hotspot_threshold_percentage <- 0.01 # 0.01 represents top 1 % most homozygous region
max_hotspot_windows_gap <- 2*10^6 # ROH-hotspot windows that are less than 2Mb apart are merged together (see section 1.3)
# # Verify the current working directory
# getwd()
# Clean the working environment
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
####################################
# Defining the working directory
####################################
# Set the path to your GitHub folder
YOUR_GITHUB_ROOT_DIRECTORY <- "C:/Users/jonat/GitHub"
# Defining the relative path in the repository
repository_path <- file.path(YOUR_GITHUB_ROOT_DIRECTORY,"Computational-modelling-of-genomic-inbreeding-and-roh-islands-in-extremely-small-populations")
####################################
# Defining the input file
####################################
# input_file <- file.path(repository_path,"results/Bedtools/coverage/empirical/doi_10_5061_dryad_h44j0zpkf__v20210813/pop_roh_freq/german_shepherd_ROH_freq.bed")
# input_file <- file.path(repository_path,"results/Bedtools/coverage/simulated/neutral_model/pop_roh_freq/sim_1_neutral_model_CHR3_ROH_freq.bed")
input_file <- file.path(repository_path,"results/Bedtools/coverage/simulated/selection_model/pop_roh_freq/sim_1_selection_model_s01_chr3_ROH_freq.bed")
## Extracting the prefix of the file used
# Extracting the basename (filename without extension) from the file path
filename <- basename(input_file)
# Split the filename by "_ROH_freq.bed" and get the first part
prefix <- strsplit(filename, "_ROH_freq.bed")[[1]][1]
# Output the prefix
print(prefix)
####################################
# Defining the output dirs
####################################
#output_dir <- file.path(repository_path,"results/ROH-Hotspots/empirical/german_shepherd")
#output_dir <- file.path(repository_path,"results/ROH-Hotspots/simulated/neutral_model")
output_dir <- file.path(repository_path,"results/ROH-Hotspots/simulated/selection_model")
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir)
# Output dir for section 3.2
output_dir_gapless_roh_hotspots <- file.path(output_dir, "gapless_roh_hotspots")
if (!dir.exists(output_dir_gapless_roh_hotspots)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_gapless_roh_hotspots, recursive = TRUE)
}
# Output dir for section 2
output_dir_gosling_plots <- file.path(output_dir, "Gosling_plots")
output_dir_autosome_roh_freq <- file.path(output_dir_gosling_plots, "autosome_roh_freq")
if (!dir.exists(output_dir_autosome_roh_freq)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_autosome_roh_freq, recursive = TRUE)
}
print(output_dir_autosome_roh_freq)
output_dir_roh_hotspots_freq <- file.path(output_dir_gosling_plots, "roh_hotspots_freq")
if (!dir.exists(output_dir_roh_hotspots_freq)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_roh_hotspots_freq, recursive = TRUE)
}
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir)
####################################
# Defining Input parameters
####################################
roh_hotspot_threshold_percentage <- 0.01 # 0.01 represents top 1 % most homozygous region
max_hotspot_windows_gap <- 2*10^6 # ROH-hotspot windows that are less than 2Mb apart are merged together (see section 1.3)
# # Verify the current working directory
# getwd()
# Load the MASS package for fitdistr function
library(MASS)
library(ggplot2)
# Read the data without treating "#" as a comment
data <- read.table(input_file, header = TRUE, sep = "\t", comment.char = "")
# Assigning column names
colnames(data) <- c("CHR", "POS1", "POS2", "COUNT", "FREQUENCY")
# Frequency Data is chosen
values <- data$FREQUENCY
# Sort the values in descending order to find the top 1%
sorted_values <- sort(values, decreasing = TRUE)
# Calculate the threshold for the top 1%
threshold_index <- ceiling(roh_hotspot_threshold_percentage * length(sorted_values))
threshold <- sorted_values[threshold_index]
# Identify genomic windows with ROH frequency above the threshold
top_1_percent_ROH <- data[data$FREQUENCY > threshold, ]
# Print the top 1% of ROH regions
print(top_1_percent_ROH)
View(data)
View(data)
View(data)
# Load the MASS package for fitdistr function
library(MASS)
library(ggplot2)
# Read the data without treating "#" as a comment
data <- read.table(input_file, header = TRUE, sep = "\t", comment.char = "")
# Assigning column names
colnames(data) <- c("CHR", "POS1", "POS2", "COUNT", "FREQUENCY")
# Frequency Data is chosen
values <- data$FREQUENCY
# Sort the values in descending order to find the top 1%
sorted_values <- sort(values, decreasing = TRUE)
# Calculate the threshold for the top 1%
threshold_index <- ceiling(roh_hotspot_threshold_percentage * length(sorted_values))
threshold <- sorted_values[threshold_index]
# Identify genomic windows with ROH frequency above the threshold
top_1_percent_ROH <- data[data$FREQUENCY > threshold, ]
# Print the top 1% of ROH regions
print(top_1_percent_ROH)
# Load the MASS package for fitdistr function
library(MASS)
library(ggplot2)
# Read the data without treating "#" as a comment
data <- read.table(input_file, header = TRUE, sep = "\t", comment.char = "")
# Assigning column names
colnames(data) <- c("CHR", "POS1", "POS2", "COUNT", "FREQUENCY")
# Frequency Data is chosen
values <- data$FREQUENCY
# Find unique values in the 'FREQUENCY' column
unique_values <- unique(values)
# Print unique values
print(unique_values)
# Sort the values in descending order to find the top 1%
sorted_values <- sort(values, decreasing = TRUE)
# Calculate the threshold for the top 1%
threshold_index <- ceiling(roh_hotspot_threshold_percentage * length(sorted_values))
threshold <- sorted_values[threshold_index]
# Identify genomic windows with ROH frequency above the threshold
top_1_percent_ROH <- data[data$FREQUENCY > threshold, ]
# Print the top 1% of ROH regions
print(top_1_percent_ROH)
