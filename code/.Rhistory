setwd(output_dir_simulation)
writePlink(last_generation,simParam=SP, baseName=output_sim_files_basename,
traits = 1,
use = "rand"
)
# Setting the working directory as the output directory
setwd(output_dir_simulation)
# Read PLINK files into R objects
ped_file <- paste0(output_sim_files_basename, '.ped')
map_file <- paste0(output_sim_files_basename, '.map')
ped_data <- read.table(ped_file)
map_data <- read.table(map_file)
# Modify the genetic distance column (3rd column) of map_data
genetic_distance_morgan_column <- map_data$V3
base_pair_position_column <- round(genetic_distance_morgan_column * (model_chromosome_bp_length / 100))
# Write the modified map_data to a new map file
map_data$V4 <- base_pair_position_column
write.table(map_data, file = map_file, sep = "\t", row.names = FALSE, col.names = FALSE,quote = FALSE)
#col.names = FALSE: Removes the header.
#quote = FALSE: Removes quotation marks from values.
pullSnpGeno(last_generation,simParam=SP)
#test <- pullSnpGeno(last_generation,simParam=SP)
# Clean the working environment
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
####################################
# Defining the working directory
####################################
# Set the path to your GitHub folder
YOUR_GITHUB_ROOT_DIRECTORY <- "C:/Users/jonat/GitHub"
# Defining the relative path in the repository
repository_path <- "Computational-modelling-of-genomic-inbreeding-and-roh-islands-in-extremely-small-populations"
output_dir_simulation <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"data/raw/simulated")
if (!dir.exists(output_dir_simulation)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_simulation)
}
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir_simulation)
####################################
# Defining the output files
####################################
# Define the chromosome to be simulated
chr_simulated <- "chr3"
# Define the base name for the output .map & .ped PLINK files
output_sim_files_basename <- paste0("Neutral_simulation_", chr_simulated)
# # Verify the current working directory
#getwd()
library(AlphaSimR)
#library(dplyr)
#library(ggplot2)
#library(patchwork)
#library(purrr)
#library(tibble)
# Chromosome lengths of Dogs in Mb, derived from Table 1 in this article:
# https://www-ncbi-nlm-nih-gov.ezproxy.its.uu.se/pmc/articles/PMC2564286/
chromosome_lengths_mb <- c(
"chr1" = 125, "chr2" = 88, "chr3" = 94, "chr4" = 91, "chr5" = 91,
"chr6" = 80, "chr7" = 83, "chr8" = 77, "chr9" = 64, "chr10" = 72,
"chr11" = 77, "chr12" = 75, "chr13" = 66, "chr14" = 63, "chr15" = 67,
"chr16" = 62, "chr17" = 67, "chr18" = 58, "chr19" = 56, "chr20" = 61,
"chr21" = 54, "chr22" = 64, "chr23" = 55, "chr24" = 50, "chr25" = 54,
"chr26" = 42, "chr27" = 48, "chr28" = 44, "chr29" = 44, "chr30" = 43,
"chr31" = 42, "chr32" = 41, "chr33" = 34, "chr34" = 45, "chr35" = 29,
"chr36" = 33, "chr37" = 33, "chr38" = 26
)
help(runMacs2)
model_chromosome_bp_length <- chromosome_lengths_mb[chr_simulated] * 10^6
founderGenomes <- runMacs2(nInd = 100,
nChr = 1,
Ne = 2500,
bp = model_chromosome_bp_length,
genLen = 1,
histNe = NULL,
histGen = NULL)
# Inspecting the founderGenomes object
founderGenomes
help(SimParam)
# Creating a new Simparam object & Assigning the founder population population to it
SP <- SimParam$new(founderGenomes)
# SP
# Sum up the chromosome lengths to get the autosome length
autosome_length <- sum(chromosome_lengths_mb)
# Number of SNP markers from the empirical dataset
# https://datadryad.org/stash/dataset/doi:10.5061/dryad.h44j0zpkf
num_snp_markers <- 78088
# Calculate average SNP-autosome density
average_snp_autosome_density <- num_snp_markers / autosome_length
# Calculate the number of SNP markers to choose for the specific chromosome
num_snp_markers_chr3 <- average_snp_autosome_density * chromosome_lengths_mb[chr_simulated]
# Output results
cat("autosome length:", autosome_length, "Mb\n")
cat("Average SNP-autosome density:", average_snp_autosome_density, "SNPs/Mb\n")
cat("Number of SNP markers for", chr_simulated, ":", num_snp_markers_chr3, "SNPs\n")
average_chr_SNP_density <- num_snp_markers / length(chromosome_lengths_mb)
cat(" Average Chr SNP density:", average_chr_SNP_density, "SNPs/Chr\n")
SP$addSnpChip(nSnpPerChr = num_snp_markers_chr3) # 1000 was previously used
SP$setTrackRec(TRUE)
# Generate the initial founder population
founderpop <- newPop(founderGenomes, simParam = SP)
# Set misc used for setting years of birth for the first individuals
current_generation = 0
founderpop = setMisc(x = founderpop,
node = "generation",
value = current_generation)
head(getMisc(x = founderpop, node = "generation"))
# Split the founder population into two breeding groups
breed1_founders <- founderpop[1:50]
breed1_founders
breed2_founders <- founderpop[51:100]
breed2_founders
random_mating <- function(pop, SP, n_gen) {
n_ind <- pop@nInd # Extracting number of individuals in the current population
generations <- vector(length = n_gen + 1,
mode = "list")
generations[[1]] <- pop # The initial breeding group population gets stored as the first element
# Simulating randomm mating to perform simulation of the 2nd until the n+1:th generation
# Each mating Progenys are generated using randcross
for (gen_ix in 2:(n_gen + 1)) {
generations[[gen_ix]] <- randCross(pop=generations[[gen_ix - 1]], nCrosses = n_ind, nProgeny = 1,
simParam = SP)
}
bottleneck_generations <- generations[-1] #all generations except for the founder population gets returned (the simulated generations derived from the bottleneck)
return(bottleneck_generations)
}
n_generations <- 5
# Simulating random mating within each breeding group for 5 generations
breed1_bottleneck <- random_mating(breed1_founders, SP, n_generations)
breed2_bottleneck <- random_mating(breed2_founders, SP, n_generations)
# founders
founderpop
breed1_bottleneck
# Extracting final generation:
last_generation <- breed1_bottleneck[[n_generations]]
last_generation
#pullSnpGeno(last_generation,simParam=SP)
#pullSnpGeno(last_generation, simParam = SP)[1:10,]
#test <- pullSnpGeno(last_generation,simParam=SP)
# SP$addSnpChip(5)
# getSnpMap(snpChip=1,simParam=SP)
getSnpMap(simParam=SP)
# Setting the directory where the .map and .ped files will be stored in
setwd(output_dir_simulation)
writePlink(last_generation,simParam=SP, baseName=output_sim_files_basename,
traits = 1,
use = "rand"
)
# Setting the working directory as the output directory
setwd(output_dir_simulation)
# Read PLINK files into R objects
ped_file <- paste0(output_sim_files_basename, '.ped')
map_file <- paste0(output_sim_files_basename, '.map')
ped_data <- read.table(ped_file)
map_data <- read.table(map_file)
genetic_distance_morgan_column <- map_data$V3 # Extracting the genetic distance column of map_data (3rd column)
base_pair_position_column <- round(genetic_distance_morgan_column * (model_chromosome_bp_length / 100))
# Redefining the physical position column (4th column) with the new values defined in base_pair_position_column
map_data$V4 <- base_pair_position_column
write.table(map_data, file = map_file, sep = "\t", row.names = FALSE, col.names = FALSE,quote = FALSE)
#col.names = FALSE: Removes the header.
#quote = FALSE: Removes quotation marks from values.
#pullSnpGeno(last_generation,simParam=SP)
pullSnpGeno(last_generation, simParam = SP)[1:10,]
#test <- pullSnpGeno(last_generation,simParam=SP)
# Clean the working environment
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
####################################
# Defining the working directory
####################################
# Set the path to your GitHub folder
YOUR_GITHUB_ROOT_DIRECTORY <- "C:/Users/jonat/GitHub"
# Defining the relative path in the repository
repository_path <- "Computational-modelling-of-genomic-inbreeding-and-roh-islands-in-extremely-small-populations"
output_dir_simulation <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"data/raw/simulated")
if (!dir.exists(output_dir_simulation)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_simulation)
}
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir_simulation)
####################################
# Defining the output files
####################################
# Define the chromosome to be simulated
chr_simulated <- "chr3"
# Define the base name for the output .map & .ped PLINK files
output_sim_files_basename <- paste0("Neutral_simulation_", chr_simulated)
# # Verify the current working directory
#getwd()
library(AlphaSimR)
#library(dplyr)
#library(ggplot2)
#library(patchwork)
#library(purrr)
#library(tibble)
# Chromosome lengths of Dogs in Mb, derived from Table 1 in this article:
# https://www-ncbi-nlm-nih-gov.ezproxy.its.uu.se/pmc/articles/PMC2564286/
chromosome_lengths_mb <- c(
"chr1" = 125, "chr2" = 88, "chr3" = 94, "chr4" = 91, "chr5" = 91,
"chr6" = 80, "chr7" = 83, "chr8" = 77, "chr9" = 64, "chr10" = 72,
"chr11" = 77, "chr12" = 75, "chr13" = 66, "chr14" = 63, "chr15" = 67,
"chr16" = 62, "chr17" = 67, "chr18" = 58, "chr19" = 56, "chr20" = 61,
"chr21" = 54, "chr22" = 64, "chr23" = 55, "chr24" = 50, "chr25" = 54,
"chr26" = 42, "chr27" = 48, "chr28" = 44, "chr29" = 44, "chr30" = 43,
"chr31" = 42, "chr32" = 41, "chr33" = 34, "chr34" = 45, "chr35" = 29,
"chr36" = 33, "chr37" = 33, "chr38" = 26
)
help(runMacs2)
model_chromosome_bp_length <- chromosome_lengths_mb[chr_simulated] * 10^6
founderGenomes <- runMacs2(nInd = 100,
nChr = 1,
Ne = 2500,
bp = model_chromosome_bp_length,
genLen = 1,
histNe = NULL,
histGen = NULL)
# Inspecting the founderGenomes object
founderGenomes
help(SimParam)
# Creating a new Simparam object & Assigning the founder population population to it
SP <- SimParam$new(founderGenomes)
# SP
# Sum up the chromosome lengths to get the autosome length
autosome_length <- sum(chromosome_lengths_mb)
# Number of SNP markers from the empirical dataset
# https://datadryad.org/stash/dataset/doi:10.5061/dryad.h44j0zpkf
num_snp_markers <- 78088
# Calculate average SNP-autosome density
average_snp_autosome_density <- num_snp_markers / autosome_length
# Calculate the number of SNP markers to choose for the specific chromosome
num_snp_markers_chr3 <- average_snp_autosome_density * chromosome_lengths_mb[chr_simulated]
# Output results
cat("autosome length:", autosome_length, "Mb\n")
cat("Average SNP-autosome density:", average_snp_autosome_density, "SNPs/Mb\n")
cat("Number of SNP markers for", chr_simulated, ":", num_snp_markers_chr3, "SNPs\n")
average_chr_SNP_density <- num_snp_markers / length(chromosome_lengths_mb)
cat(" Average Chr SNP density:", average_chr_SNP_density, "SNPs/Chr\n")
SP$addSnpChip(nSnpPerChr = num_snp_markers_chr3) # 1000 was previously used
SP$setTrackRec(TRUE)
# Generate the initial founder population
founderpop <- newPop(founderGenomes, simParam = SP)
# Set misc used for setting years of birth for the first individuals
current_generation = 0
founderpop = setMisc(x = founderpop,
node = "generation",
value = current_generation)
head(getMisc(x = founderpop, node = "generation"))
# Split the founder population into two breeding groups
breed1_founders <- founderpop[1:50]
breed1_founders
breed2_founders <- founderpop[51:100]
breed2_founders
random_mating <- function(pop, SP, n_gen) {
n_ind <- pop@nInd # Extracting number of individuals in the current population
generations <- vector(length = n_gen + 1,
mode = "list")
generations[[1]] <- pop # The initial breeding group population gets stored as the first element
# Simulating randomm mating to perform simulation of the 2nd until the n+1:th generation
# Each mating Progenys are generated using randcross
for (gen_ix in 2:(n_gen + 1)) {
generations[[gen_ix]] <- randCross(pop=generations[[gen_ix - 1]], nCrosses = n_ind, nProgeny = 1,
simParam = SP)
}
bottleneck_generations <- generations[-1] #all generations except for the founder population gets returned (the simulated generations derived from the bottleneck)
return(bottleneck_generations)
}
n_generations <- 5
# Simulating random mating within each breeding group for 5 generations
breed1_bottleneck <- random_mating(breed1_founders, SP, n_generations)
breed2_bottleneck <- random_mating(breed2_founders, SP, n_generations)
# founders
founderpop
breed1_bottleneck
# Extracting final generation:
last_generation <- breed1_bottleneck[[n_generations]]
last_generation
#pullSnpGeno(last_generation,simParam=SP)
pullSnpGeno(last_generation, simParam = SP)[1:10,]
#test <- pullSnpGeno(last_generation,simParam=SP)
# SP$addSnpChip(5)
# getSnpMap(snpChip=1,simParam=SP)
#getSnpMap(simParam=SP)
# Setting the directory where the .map and .ped files will be stored in
setwd(output_dir_simulation)
writePlink(last_generation,simParam=SP, baseName=output_sim_files_basename,
traits = 1,
use = "rand"
)
# Setting the working directory as the output directory
setwd(output_dir_simulation)
# Read PLINK files into R objects
ped_file <- paste0(output_sim_files_basename, '.ped')
map_file <- paste0(output_sim_files_basename, '.map')
ped_data <- read.table(ped_file)
map_data <- read.table(map_file)
genetic_distance_morgan_column <- map_data$V3 # Extracting the genetic distance column of map_data (3rd column)
base_pair_position_column <- round(genetic_distance_morgan_column * (model_chromosome_bp_length / 100))
# Redefining the physical position column (4th column) with the new values defined in base_pair_position_column
map_data$V4 <- base_pair_position_column
write.table(map_data, file = map_file, sep = "\t", row.names = FALSE, col.names = FALSE,quote = FALSE)
#col.names = FALSE: Removes the header.
#quote = FALSE: Removes quotation marks from values.
# SP$addSnpChip(5)
# getSnpMap(snpChip=1,simParam=SP)
#getSnpMap(simParam=SP)
head(getSnpMap(simParam = SP), 5)
#pullSnpGeno(last_generation,simParam=SP)
head(pullSnpGeno(last_generation,simParam=SP), 5)
#test <- pullSnpGeno(last_generation,simParam=SP)
# SP$addSnpChip(5)
# getSnpMap(snpChip=1,simParam=SP)
#getSnpMap(simParam=SP)
cat(head(getSnpMap(simParam = SP), 5))
# SP$addSnpChip(5)
# getSnpMap(snpChip=1,simParam=SP)
#getSnpMap(simParam=SP)
head(getSnpMap(simParam = SP), 5)
# SP$addSnpChip(5)
# getSnpMap(snpChip=1,simParam=SP)
#getSnpMap(simParam=SP)
head(getSnpMap(simParam = SP), 1)
#pullSnpGeno(last_generation,simParam=SP)
cat(head(pullSnpGeno(last_generation,simParam=SP), 5))
#test <- pullSnpGeno(last_generation,simParam=SP)
#pullSnpGeno(last_generation,simParam=SP)
head(pullSnpGeno(last_generation,simParam=SP), 5)
#pullSnpGeno(last_generation,simParam=SP)
# SP$addSnpChip(5)
# getSnpMap(snpChip=1,simParam=SP)
#getSnpMap(simParam=SP)
print("First 10 markers printed")
head(getSnpMap(simParam = SP), 10)
library(AlphaSimR)
library(knitr)
#library(dplyr)
#library(ggplot2)
#library(patchwork)
#library(purrr)
#library(tibble)
# SP$addSnpChip(5)
# getSnpMap(snpChip=1,simParam=SP)
#getSnpMap(simParam=SP)
print("First 10 markers printed")
kable(head(getSnpMap(simParam = SP), 10))
#head(getSnpMap(simParam = SP), 10)
# SP$addSnpChip(5)
# getSnpMap(snpChip=1,simParam=SP)
#getSnpMap(simParam=SP)
#print("First 10 markers printed")
cat("First 10 markers and their genetic map positions:\n")
kable(head(getSnpMap(simParam = SP), 10))
#head(getSnpMap(simParam = SP), 10)
# Setting the working directory as the output directory
setwd(output_dir_simulation)
# Read PLINK files into R objects
ped_file <- paste0(output_sim_files_basename, '.ped')
map_file <- paste0(output_sim_files_basename, '.map')
ped_data <- read.table(ped_file)
map_data <- read.table(map_file)
genetic_distance_morgan_column <- map_data$V3 # Extracting the genetic distance column of map_data (3rd column)
base_pair_position_column <- round(genetic_distance_morgan_column * (model_chromosome_bp_length / 100))
# Redefining the physical position column (4th column) with the new values defined in base_pair_position_column
map_data$V4 <- base_pair_position_column
write.table(map_data, file = map_file, sep = "\t", row.names = FALSE, col.names = FALSE,quote = FALSE)
#col.names = FALSE: Removes the header.
#quote = FALSE: Removes quotation marks from values.
cat("Showing the first 10 rows of the new .map file:\n")
kable(head(map_data, 10))
# Clean the working environment
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
####################################
# Defining the working directory
####################################
# Set the path to your GitHub folder
YOUR_GITHUB_ROOT_DIRECTORY <- "C:/Users/jonat/GitHub"
# Defining the relative path in the repository
repository_path <- "Computational-modelling-of-genomic-inbreeding-and-roh-islands-in-extremely-small-populations"
output_dir_simulation <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"data/raw/simulated")
if (!dir.exists(output_dir_simulation)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_simulation)
}
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir_simulation)
####################################
# Defining the output files
####################################
# Define the chromosome to be simulated
chr_simulated <- "chr3"
# Define the base name for the output .map & .ped PLINK files
output_sim_files_basename <- paste0("Neutral_simulation_", chr_simulated)
# # Verify the current working directory
#getwd()
library(AlphaSimR)
library(knitr)
#library(dplyr)
#library(ggplot2)
#library(patchwork)
#library(purrr)
#library(tibble)
# Chromosome lengths of Dogs in Mb, derived from Table 1 in this article:
# https://www-ncbi-nlm-nih-gov.ezproxy.its.uu.se/pmc/articles/PMC2564286/
chromosome_lengths_mb <- c(
"chr1" = 125, "chr2" = 88, "chr3" = 94, "chr4" = 91, "chr5" = 91,
"chr6" = 80, "chr7" = 83, "chr8" = 77, "chr9" = 64, "chr10" = 72,
"chr11" = 77, "chr12" = 75, "chr13" = 66, "chr14" = 63, "chr15" = 67,
"chr16" = 62, "chr17" = 67, "chr18" = 58, "chr19" = 56, "chr20" = 61,
"chr21" = 54, "chr22" = 64, "chr23" = 55, "chr24" = 50, "chr25" = 54,
"chr26" = 42, "chr27" = 48, "chr28" = 44, "chr29" = 44, "chr30" = 43,
"chr31" = 42, "chr32" = 41, "chr33" = 34, "chr34" = 45, "chr35" = 29,
"chr36" = 33, "chr37" = 33, "chr38" = 26
)
help(runMacs2)
model_chromosome_bp_length <- chromosome_lengths_mb[chr_simulated] * 10^6
founderGenomes <- runMacs2(nInd = 100,
nChr = 1,
Ne = 2500,
bp = model_chromosome_bp_length,
genLen = 1,
histNe = NULL,
histGen = NULL)
# Inspecting the founderGenomes object
founderGenomes
help(SimParam)
# Creating a new Simparam object & Assigning the founder population population to it
SP <- SimParam$new(founderGenomes)
# SP
# Sum up the chromosome lengths to get the autosome length
autosome_length <- sum(chromosome_lengths_mb)
# Number of SNP markers from the empirical dataset
# https://datadryad.org/stash/dataset/doi:10.5061/dryad.h44j0zpkf
num_snp_markers <- 78088
# Calculate average SNP-autosome density
average_snp_autosome_density <- num_snp_markers / autosome_length
# Calculate the number of SNP markers to choose for the specific chromosome
num_snp_markers_chr3 <- average_snp_autosome_density * chromosome_lengths_mb[chr_simulated]
# Output results
cat("autosome length:", autosome_length, "Mb\n")
cat("Average SNP-autosome density:", average_snp_autosome_density, "SNPs/Mb\n")
cat("Number of SNP markers for", chr_simulated, ":", num_snp_markers_chr3, "SNPs\n")
average_chr_SNP_density <- num_snp_markers / length(chromosome_lengths_mb)
cat(" Average Chr SNP density:", average_chr_SNP_density, "SNPs/Chr\n")
SP$addSnpChip(nSnpPerChr = num_snp_markers_chr3) # 1000 was previously used
SP$setTrackRec(TRUE)
# Generate the initial founder population
founderpop <- newPop(founderGenomes, simParam = SP)
# Set misc used for setting years of birth for the first individuals
current_generation = 0
founderpop = setMisc(x = founderpop,
node = "generation",
value = current_generation)
head(getMisc(x = founderpop, node = "generation"))
# Split the founder population into two breeding groups
breed1_founders <- founderpop[1:50]
breed1_founders
breed2_founders <- founderpop[51:100]
breed2_founders
random_mating <- function(pop, SP, n_gen) {
n_ind <- pop@nInd # Extracting number of individuals in the current population
generations <- vector(length = n_gen + 1,
mode = "list")
generations[[1]] <- pop # The initial breeding group population gets stored as the first element
# Simulating randomm mating to perform simulation of the 2nd until the n+1:th generation
# Each mating Progenys are generated using randcross
for (gen_ix in 2:(n_gen + 1)) {
generations[[gen_ix]] <- randCross(pop=generations[[gen_ix - 1]], nCrosses = n_ind, nProgeny = 1,
simParam = SP)
}
bottleneck_generations <- generations[-1] #all generations except for the founder population gets returned (the simulated generations derived from the bottleneck)
return(bottleneck_generations)
}
n_generations <- 5
# Simulating random mating within each breeding group for 5 generations
breed1_bottleneck <- random_mating(breed1_founders, SP, n_generations)
breed2_bottleneck <- random_mating(breed2_founders, SP, n_generations)
# founders
founderpop
breed1_bottleneck
# Extracting final generation:
last_generation <- breed1_bottleneck[[n_generations]]
last_generation
#pullSnpGeno(last_generation,simParam=SP)
# SP$addSnpChip(5)
# getSnpMap(snpChip=1,simParam=SP)
#getSnpMap(simParam=SP)
cat("First 10 markers and their genetic map positions:\n")
kable(head(getSnpMap(simParam = SP), 10))
#head(getSnpMap(simParam = SP), 10)
# Setting the directory where the .map and .ped files will be stored in
setwd(output_dir_simulation)
writePlink(last_generation,simParam=SP, baseName=output_sim_files_basename,
traits = 1,
use = "rand"
)
# Setting the working directory as the output directory
setwd(output_dir_simulation)
# Read PLINK files into R objects
ped_file <- paste0(output_sim_files_basename, '.ped')
map_file <- paste0(output_sim_files_basename, '.map')
ped_data <- read.table(ped_file)
map_data <- read.table(map_file)
genetic_distance_morgan_column <- map_data$V3 # Extracting the genetic distance column of map_data (3rd column)
base_pair_position_column <- round(genetic_distance_morgan_column * (model_chromosome_bp_length / 100))
# Redefining the physical position column (4th column) with the new values defined in base_pair_position_column
map_data$V4 <- base_pair_position_column
write.table(map_data, file = map_file, sep = "\t", row.names = FALSE, col.names = FALSE,quote = FALSE)
#col.names = FALSE: Removes the header.
#quote = FALSE: Removes quotation marks from values.
cat("Showing the first 10 rows of the new .map file:\n")
kable(head(map_data, 10))
