# Extract simname from the file name
simname_from_file <- sub("^(.*?)_causative_variant_window.*", "\\1", file)
# Check if the simname from the file matches with the simname from the dataframe
if (simname_from_file != sim_info$sim_name[i]) {
print(paste0("simname_from_file:", simname_from_file))
print(paste0("sim_info$sim_name[i]:", sim_info$sim_name[i]))
stop("Error: Simname from file does not match with simname from dataframe.")
}
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header
clean_header <- gsub("^#", "", header)
separator_causative_variant_window_file <- " "
# separator_causative_variant_window_file <- "\t"
# Split the cleaned header into column names
column_names <- strsplit(clean_header, separator_causative_variant_window_file)[[1]]
# # Read the .tsv frequency file into a data frame
causative_variant_window_data <- read.table(file, header = TRUE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names,sep = separator_causative_variant_window_file)
min_freq <- min(causative_variant_window_data[["FREQUENCY"]])
max_freq <- max(causative_variant_window_data[["FREQUENCY"]])
average_freq <- mean(causative_variant_window_data[["FREQUENCY"]])
causative_variant_window_data[["FREQUENCY"]]
# Add simulation_number as an attribute to the data frame
sim_num <- as.numeric(gsub(sim_number_pattern, "\\1", file))
attr(causative_variant_window_data, "Simulation_number") <- sim_num
# Extract the selection scenario from the file name
selection_scenario <- sub(".*(selection_model_s\\d+_chr\\d+).*", "\\1", file)
# Check if the selection coefficient already exists in the list
if (!(selection_scenario %in% names(causative_variant_window_tables_Selection_Model))) {
# If it doesn't exist, create a list for it
causative_variant_window_tables_Selection_Model[[selection_scenario]] <- list()
}
# Extract selection coefficent from the selection scenario
selection_coefficient <- sub("^.*_(s\\d+_chr\\d+)$", "\\1", selection_scenario)
###### Find the window_lengths of the causative variant in this window!! ######
# Directly find the row where Simulation.name matches simname_from_file
matching_row <- window_lengths_causative_variant_tables[[selection_coefficient]][window_lengths_causative_variant_tables[[selection_coefficient]]$Simulation.name == simname_from_file, ]
# Extract the Length..bp value
length_bp_value <- matching_row$Length..bp.
###### Find the position of the causative variant  ######
# Find the row that matches simname_from_file
matching_row <- position_causative_variant_tables[[selection_coefficient]][
position_causative_variant_tables[[selection_coefficient]]$Sim_name == simname_from_file, ]
# Extract the Variant_Position for the matching row
if (nrow(matching_row) > 0) {
variant_position <- matching_row$Variant_Position
# print(variant_position)
} else {
print("No matching row found")
}
###### Find the frequency of the window the causative variant lies in  ######
# Find the row where POS1 <= variant_position <= POS2
matching_row <- causative_variant_window_data[
causative_variant_window_data$POS1 <= variant_position & causative_variant_window_data$POS2 >= variant_position, ]
# Extract the FREQUENCY of the matching row
if (nrow(matching_row) > 0) {
variant_100k_window_frequency <- matching_row$FREQUENCY
print(frequency)
} else {
print("No matching row found")
}
# Create a list with table name and corresponding data frame
table_info <- list(Sim_name = simname_from_file, filename = file, length_bp = length_bp_value,
min_freq = min_freq,max_freq = max_freq,avg_freq = average_freq,variant_position = variant_position, variant_100k_subwindow_frequency = variant_100k_window_frequency,
causative_window_data = causative_variant_window_data)  # Added ROH_Hotspot_threshold here
# Append the table info to the list under selection_scenario
causative_variant_window_tables_Selection_Model[[selection_scenario]] <- c(causative_variant_window_tables_Selection_Model[[selection_scenario]], list(table_info))
}
# Calculate overall statistics for each selection coefficient
for (selection_scenario in names(causative_variant_window_tables_Selection_Model)) {
# Extract all tables for the current selection scenario
tables <- causative_variant_window_tables_Selection_Model[[selection_scenario]]
# Calculate average length in bp
all_causative_window_lengths_bp <- unlist(lapply(tables, function(table) table$length_bp))
# Calculate minimum window frequency
all_causative_window_min_freq <- unlist(lapply(tables, function(table) table$min_freq))
# Calculate maximum window frequency
all_causative_window_max_freq <- unlist(lapply(tables, function(table) table$max_freq))
# Calculate mean window frequency
all_causative_window_avg_freq <- unlist(lapply(tables, function(table) table$avg_freq))
# Calculate average variant_100k_subwindow_frequency:
all_variant_100k_subwindow_frequencies <- unlist(lapply(tables, function(table) table$variant_100k_subwindow_frequency))
# Store the calculated values back into the main list
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_length_bp <- mean(all_causative_window_lengths_bp)
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_length_Mb <- mean(all_causative_window_lengths_bp) / 1e6
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Min_causative_window_freq <- min(all_causative_window_min_freq)
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Max_causative_window_freq <- max(all_causative_window_max_freq)
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_freq <- mean(all_causative_window_avg_freq)
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_variant_100k_subwindow_frequency <- mean(all_variant_100k_subwindow_frequencies)
}
# Initialize an empty data frame to store the results
result_df <- data.frame()
# Loop through each selection scenario
for (selection_scenario in names(causative_variant_window_tables_Selection_Model)) {
# Extract selection coefficent from the selection scenario
selection_coefficient <- sub("^.*_(s\\d+_chr\\d+)$", "\\1", selection_scenario)
# Extract the average causative window length for the current selection scenario
avg_causative_window_length <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_length_Mb
Min_window_freq <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Min_causative_window_freq
Max_window_freq <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Max_causative_window_freq
Avg_window_freq <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_freq
Avg_freq_variant_100k_window <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_variant_100k_subwindow_frequency
# Add the selection scenario and average causative window length to the result data frame
result_df <- rbind(result_df, data.frame(Selection_coefficient = selection_coefficient, Avg_Length_Mb = avg_causative_window_length, Min_freq = Min_window_freq,
Max_freq =  Max_window_freq,Avg_window_freq = Avg_window_freq,Avg_freq_variant_100k_window = Avg_freq_variant_100k_window
))
}
View(causative_variant_window_tables_Selection_Model)
# Sort the data frame based on Inbreeding coefficient column
result_df_sorted <- result_df[order(result_df$Avg_Length_Mb), ]
# Print the table using kable
kable(result_df_sorted)
causative_variant_window_tables_Selection_Model[["selection_model_s005_chr3"]][[1]][["causative_window_data"]]
causative_window_data[["FREQUENCY"]]
causative_window_data$FREQUENCY
causative_variant_window_data[["FREQUENCY"]]
setwd(Selection_causative_variant_dir)
# Pattern for finding files containing "causative_variant_window" and ending with ".bed"
pattern <- ".*causative_variant_window.*\\.bed$"
selection_model_causative_variant_window_files <- list.files(path = Selection_causative_variant_dir, pattern = pattern)
# Extract simulation numbers from the filename
sim_number_pattern <- ".*sim_(\\d+)_.*"
sim_numbers <- as.numeric(gsub(sim_number_pattern, "\\1", selection_model_causative_variant_window_files))
sim_name <- sub("^(.*?)_causative_variant_window.*", "\\1", selection_model_causative_variant_window_files)
# sim_name <- sub("^(.*?)_F_ROH.*", "\\1", simulation_F_ROH_files)
# Preallocate sim_info as an empty data frame
sim_info <- data.frame(sim_name = character(), simulation_number = numeric(), file_name = character(), stringsAsFactors = FALSE)
# Combine simulation name, number, and file name
sim_info <- data.frame(sim_name = sim_name, simulation_number = sim_numbers, file_name =selection_model_causative_variant_window_files)
sim_info <- sim_info[order(sim_info$simulation_number), ]
# # Sort filenames based on simulation numbers
# sorted_selection_model_causative_variant_window_files <- selection_model_causative_variant_window_files[order(sim_numbers)]
# Initialize an empty list to store the selection model tables
causative_variant_window_tables_Selection_Model <- list()
# Loop through each sorted .tsv file
for (i in 1:length(sim_info$sim_name)) {
# Get the file name
file <- sim_info$file_name[i]
# Extract simname from the file name
simname_from_file <- sub("^(.*?)_causative_variant_window.*", "\\1", file)
# Check if the simname from the file matches with the simname from the dataframe
if (simname_from_file != sim_info$sim_name[i]) {
print(paste0("simname_from_file:", simname_from_file))
print(paste0("sim_info$sim_name[i]:", sim_info$sim_name[i]))
stop("Error: Simname from file does not match with simname from dataframe.")
}
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header
clean_header <- gsub("^#", "", header)
separator_causative_variant_window_file <- " "
# separator_causative_variant_window_file <- "\t"
# Split the cleaned header into column names
column_names <- strsplit(clean_header, separator_causative_variant_window_file)[[1]]
# # Read the .tsv frequency file into a data frame
causative_variant_window_data <- read.table(file, header = TRUE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names,sep = separator_causative_variant_window_file)
min_freq <- min(causative_variant_window_data[["FREQUENCY"]])
max_freq <- max(causative_variant_window_data[["FREQUENCY"]])
average_freq <- mean(causative_variant_window_data[["FREQUENCY"]])
causative_variant_window_data[["FREQUENCY"]]
# Add simulation_number as an attribute to the data frame
sim_num <- as.numeric(gsub(sim_number_pattern, "\\1", file))
attr(causative_variant_window_data, "Simulation_number") <- sim_num
# Extract the selection scenario from the file name
selection_scenario <- sub(".*(selection_model_s\\d+_chr\\d+).*", "\\1", file)
# Check if the selection coefficient already exists in the list
if (!(selection_scenario %in% names(causative_variant_window_tables_Selection_Model))) {
# If it doesn't exist, create a list for it
causative_variant_window_tables_Selection_Model[[selection_scenario]] <- list()
}
# Extract selection coefficent from the selection scenario
selection_coefficient <- sub("^.*_(s\\d+_chr\\d+)$", "\\1", selection_scenario)
###### Find the window_lengths of the causative variant in this window!! ######
# Directly find the row where Simulation.name matches simname_from_file
matching_row <- window_lengths_causative_variant_tables[[selection_coefficient]][window_lengths_causative_variant_tables[[selection_coefficient]]$Simulation.name == simname_from_file, ]
# Extract the Length..bp value
length_bp_value <- matching_row$Length..bp.
###### Find the position of the causative variant  ######
# Find the row that matches simname_from_file
matching_row <- position_causative_variant_tables[[selection_coefficient]][
position_causative_variant_tables[[selection_coefficient]]$Sim_name == simname_from_file, ]
# Extract the Variant_Position for the matching row
if (nrow(matching_row) > 0) {
variant_position <- matching_row$Variant_Position
# print(variant_position)
} else {
print("No matching row found")
}
###### Find the frequency of the window the causative variant lies in  ######
# Find the row where POS1 <= variant_position <= POS2
matching_row <- causative_variant_window_data[
causative_variant_window_data$POS1 <= variant_position & causative_variant_window_data$POS2 >= variant_position, ]
# Extract the FREQUENCY of the matching row
if (nrow(matching_row) > 0) {
variant_100k_window_frequency <- matching_row$FREQUENCY
print(frequency)
} else {
print("No matching row found")
}
# Create a list with table name and corresponding data frame
table_info <- list(Sim_name = simname_from_file, filename = file, length_bp = length_bp_value,
min_freq = min_freq,max_freq = max_freq,avg_freq = average_freq,variant_position = variant_position, variant_100k_subwindow_frequency = variant_100k_window_frequency,
causative_window_data = causative_variant_window_data)  # Added ROH_Hotspot_threshold here
# Append the table info to the list under selection_scenario
causative_variant_window_tables_Selection_Model[[selection_scenario]] <- c(causative_variant_window_tables_Selection_Model[[selection_scenario]], list(table_info))
# Create histogram
hist(causative_variant_window_data[["FREQUENCY"]], main = "Histogram of Frequency",
xlab = "Frequency", ylab = "Frequency Count")
# Add vertical line for variant_100k_subwindow_frequency
abline(v = variant_100k_subwindow_frequency, col = "red")
# Add legend
legend("topright", legend = paste("Causative Variant 100k Window Freq:", variant_100k_subwindow_frequency),
col = "red", lwd = 1)
}
setwd(Selection_causative_variant_dir)
# Pattern for finding files containing "causative_variant_window" and ending with ".bed"
pattern <- ".*causative_variant_window.*\\.bed$"
selection_model_causative_variant_window_files <- list.files(path = Selection_causative_variant_dir, pattern = pattern)
# Extract simulation numbers from the filename
sim_number_pattern <- ".*sim_(\\d+)_.*"
sim_numbers <- as.numeric(gsub(sim_number_pattern, "\\1", selection_model_causative_variant_window_files))
sim_name <- sub("^(.*?)_causative_variant_window.*", "\\1", selection_model_causative_variant_window_files)
# sim_name <- sub("^(.*?)_F_ROH.*", "\\1", simulation_F_ROH_files)
# Preallocate sim_info as an empty data frame
sim_info <- data.frame(sim_name = character(), simulation_number = numeric(), file_name = character(), stringsAsFactors = FALSE)
# Combine simulation name, number, and file name
sim_info <- data.frame(sim_name = sim_name, simulation_number = sim_numbers, file_name =selection_model_causative_variant_window_files)
sim_info <- sim_info[order(sim_info$simulation_number), ]
# # Sort filenames based on simulation numbers
# sorted_selection_model_causative_variant_window_files <- selection_model_causative_variant_window_files[order(sim_numbers)]
# Initialize an empty list to store the selection model tables
causative_variant_window_tables_Selection_Model <- list()
# Loop through each sorted .tsv file
for (i in 1:length(sim_info$sim_name)) {
# Get the file name
file <- sim_info$file_name[i]
# Extract simname from the file name
simname_from_file <- sub("^(.*?)_causative_variant_window.*", "\\1", file)
# Check if the simname from the file matches with the simname from the dataframe
if (simname_from_file != sim_info$sim_name[i]) {
print(paste0("simname_from_file:", simname_from_file))
print(paste0("sim_info$sim_name[i]:", sim_info$sim_name[i]))
stop("Error: Simname from file does not match with simname from dataframe.")
}
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header
clean_header <- gsub("^#", "", header)
separator_causative_variant_window_file <- " "
# separator_causative_variant_window_file <- "\t"
# Split the cleaned header into column names
column_names <- strsplit(clean_header, separator_causative_variant_window_file)[[1]]
# # Read the .tsv frequency file into a data frame
causative_variant_window_data <- read.table(file, header = TRUE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names,sep = separator_causative_variant_window_file)
min_freq <- min(causative_variant_window_data[["FREQUENCY"]])
max_freq <- max(causative_variant_window_data[["FREQUENCY"]])
average_freq <- mean(causative_variant_window_data[["FREQUENCY"]])
causative_variant_window_data[["FREQUENCY"]]
# Add simulation_number as an attribute to the data frame
sim_num <- as.numeric(gsub(sim_number_pattern, "\\1", file))
attr(causative_variant_window_data, "Simulation_number") <- sim_num
# Extract the selection scenario from the file name
selection_scenario <- sub(".*(selection_model_s\\d+_chr\\d+).*", "\\1", file)
# Check if the selection coefficient already exists in the list
if (!(selection_scenario %in% names(causative_variant_window_tables_Selection_Model))) {
# If it doesn't exist, create a list for it
causative_variant_window_tables_Selection_Model[[selection_scenario]] <- list()
}
# Extract selection coefficent from the selection scenario
selection_coefficient <- sub("^.*_(s\\d+_chr\\d+)$", "\\1", selection_scenario)
###### Find the window_lengths of the causative variant in this window!! ######
# Directly find the row where Simulation.name matches simname_from_file
matching_row <- window_lengths_causative_variant_tables[[selection_coefficient]][window_lengths_causative_variant_tables[[selection_coefficient]]$Simulation.name == simname_from_file, ]
# Extract the Length..bp value
length_bp_value <- matching_row$Length..bp.
###### Find the position of the causative variant  ######
# Find the row that matches simname_from_file
matching_row <- position_causative_variant_tables[[selection_coefficient]][
position_causative_variant_tables[[selection_coefficient]]$Sim_name == simname_from_file, ]
# Extract the Variant_Position for the matching row
if (nrow(matching_row) > 0) {
variant_position <- matching_row$Variant_Position
# print(variant_position)
} else {
print("No matching row found")
}
###### Find the frequency of the window the causative variant lies in  ######
# Find the row where POS1 <= variant_position <= POS2
matching_row <- causative_variant_window_data[
causative_variant_window_data$POS1 <= variant_position & causative_variant_window_data$POS2 >= variant_position, ]
# Extract the FREQUENCY of the matching row
if (nrow(matching_row) > 0) {
variant_100k_window_frequency <- matching_row$FREQUENCY
print(frequency)
} else {
print("No matching row found")
}
# Create histogram
hist(causative_variant_window_data[["FREQUENCY"]], main = "Histogram of Frequency",
xlab = "Frequency", ylab = "Frequency Count")
# Add vertical line for variant_100k_subwindow_frequency
abline(v = variant_100k_window_frequency, col = "red")
# Add legend
legend("topright", legend = paste("Causative Variant 100k Window Freq:", variant_100k_window_frequency),
col = "red", lwd = 1)
# Create a list with table name and corresponding data frame
table_info <- list(Sim_name = simname_from_file, filename = file, length_bp = length_bp_value,
min_freq = min_freq,max_freq = max_freq,avg_freq = average_freq,variant_position = variant_position, variant_100k_subwindow_frequency = variant_100k_window_frequency,
causative_window_data = causative_variant_window_data)  # Added ROH_Hotspot_threshold here
# Append the table info to the list under selection_scenario
causative_variant_window_tables_Selection_Model[[selection_scenario]] <- c(causative_variant_window_tables_Selection_Model[[selection_scenario]], list(table_info))
}
# Calculate overall statistics for each selection coefficient
for (selection_scenario in names(causative_variant_window_tables_Selection_Model)) {
# Extract all tables for the current selection scenario
tables <- causative_variant_window_tables_Selection_Model[[selection_scenario]]
# Calculate average length in bp
all_causative_window_lengths_bp <- unlist(lapply(tables, function(table) table$length_bp))
# Calculate minimum window frequency
all_causative_window_min_freq <- unlist(lapply(tables, function(table) table$min_freq))
# Calculate maximum window frequency
all_causative_window_max_freq <- unlist(lapply(tables, function(table) table$max_freq))
# Calculate mean window frequency
all_causative_window_avg_freq <- unlist(lapply(tables, function(table) table$avg_freq))
# Calculate average variant_100k_subwindow_frequency:
all_variant_100k_subwindow_frequencies <- unlist(lapply(tables, function(table) table$variant_100k_subwindow_frequency))
# Store the calculated values back into the main list
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_length_bp <- mean(all_causative_window_lengths_bp)
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_length_Mb <- mean(all_causative_window_lengths_bp) / 1e6
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Min_causative_window_freq <- min(all_causative_window_min_freq)
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Max_causative_window_freq <- max(all_causative_window_max_freq)
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_freq <- mean(all_causative_window_avg_freq)
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_variant_100k_subwindow_frequency <- mean(all_variant_100k_subwindow_frequencies)
}
# Initialize an empty data frame to store the results
result_df <- data.frame()
# Loop through each selection scenario
for (selection_scenario in names(causative_variant_window_tables_Selection_Model)) {
# Extract selection coefficent from the selection scenario
selection_coefficient <- sub("^.*_(s\\d+_chr\\d+)$", "\\1", selection_scenario)
# Extract the average causative window length for the current selection scenario
avg_causative_window_length <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_length_Mb
Min_window_freq <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Min_causative_window_freq
Max_window_freq <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Max_causative_window_freq
Avg_window_freq <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_freq
Avg_freq_variant_100k_window <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_variant_100k_subwindow_frequency
# Add the selection scenario and average causative window length to the result data frame
result_df <- rbind(result_df, data.frame(Selection_coefficient = selection_coefficient, Avg_Length_Mb = avg_causative_window_length, Min_freq = Min_window_freq,
Max_freq =  Max_window_freq,Avg_window_freq = Avg_window_freq,Avg_freq_variant_100k_window = Avg_freq_variant_100k_window
))
}
# View(causative_variant_window_tables_Selection_Model)
# Sort the data frame based on Inbreeding coefficient column
result_df_sorted <- result_df[order(result_df$Avg_Length_Mb), ]
# Print the table using kable
kable(result_df_sorted)
setwd(Selection_causative_variant_dir)
# Pattern for finding files containing "causative_variant_window" and ending with ".bed"
pattern <- ".*causative_variant_window.*\\.bed$"
selection_model_causative_variant_window_files <- list.files(path = Selection_causative_variant_dir, pattern = pattern)
# Extract simulation numbers from the filename
sim_number_pattern <- ".*sim_(\\d+)_.*"
sim_numbers <- as.numeric(gsub(sim_number_pattern, "\\1", selection_model_causative_variant_window_files))
sim_name <- sub("^(.*?)_causative_variant_window.*", "\\1", selection_model_causative_variant_window_files)
# sim_name <- sub("^(.*?)_F_ROH.*", "\\1", simulation_F_ROH_files)
# Preallocate sim_info as an empty data frame
sim_info <- data.frame(sim_name = character(), simulation_number = numeric(), file_name = character(), stringsAsFactors = FALSE)
# Combine simulation name, number, and file name
sim_info <- data.frame(sim_name = sim_name, simulation_number = sim_numbers, file_name =selection_model_causative_variant_window_files)
sim_info <- sim_info[order(sim_info$simulation_number), ]
# # Sort filenames based on simulation numbers
# sorted_selection_model_causative_variant_window_files <- selection_model_causative_variant_window_files[order(sim_numbers)]
# Initialize an empty list to store the selection model tables
causative_variant_window_tables_Selection_Model <- list()
# Loop through each sorted .tsv file
for (i in 1:length(sim_info$sim_name)) {
# Get the file name
file <- sim_info$file_name[i]
# Extract simname from the file name
simname_from_file <- sub("^(.*?)_causative_variant_window.*", "\\1", file)
# Check if the simname from the file matches with the simname from the dataframe
if (simname_from_file != sim_info$sim_name[i]) {
print(paste0("simname_from_file:", simname_from_file))
print(paste0("sim_info$sim_name[i]:", sim_info$sim_name[i]))
stop("Error: Simname from file does not match with simname from dataframe.")
}
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header
clean_header <- gsub("^#", "", header)
separator_causative_variant_window_file <- " "
# separator_causative_variant_window_file <- "\t"
# Split the cleaned header into column names
column_names <- strsplit(clean_header, separator_causative_variant_window_file)[[1]]
# # Read the .tsv frequency file into a data frame
causative_variant_window_data <- read.table(file, header = TRUE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names,sep = separator_causative_variant_window_file)
min_freq <- min(causative_variant_window_data[["FREQUENCY"]])
max_freq <- max(causative_variant_window_data[["FREQUENCY"]])
average_freq <- mean(causative_variant_window_data[["FREQUENCY"]])
causative_variant_window_data[["FREQUENCY"]]
# Add simulation_number as an attribute to the data frame
sim_num <- as.numeric(gsub(sim_number_pattern, "\\1", file))
attr(causative_variant_window_data, "Simulation_number") <- sim_num
# Extract the selection scenario from the file name
selection_scenario <- sub(".*(selection_model_s\\d+_chr\\d+).*", "\\1", file)
# Check if the selection coefficient already exists in the list
if (!(selection_scenario %in% names(causative_variant_window_tables_Selection_Model))) {
# If it doesn't exist, create a list for it
causative_variant_window_tables_Selection_Model[[selection_scenario]] <- list()
}
# Extract selection coefficent from the selection scenario
selection_coefficient <- sub("^.*_(s\\d+_chr\\d+)$", "\\1", selection_scenario)
###### Find the window_lengths of the causative variant in this window!! ######
# Directly find the row where Simulation.name matches simname_from_file
matching_row <- window_lengths_causative_variant_tables[[selection_coefficient]][window_lengths_causative_variant_tables[[selection_coefficient]]$Simulation.name == simname_from_file, ]
# Extract the Length..bp value
length_bp_value <- matching_row$Length..bp.
###### Find the position of the causative variant  ######
# Find the row that matches simname_from_file
matching_row <- position_causative_variant_tables[[selection_coefficient]][
position_causative_variant_tables[[selection_coefficient]]$Sim_name == simname_from_file, ]
# Extract the Variant_Position for the matching row
if (nrow(matching_row) > 0) {
variant_position <- matching_row$Variant_Position
# print(variant_position)
} else {
print("No matching row found")
}
###### Find the frequency of the window the causative variant lies in  ######
# Find the row where POS1 <= variant_position <= POS2
matching_row <- causative_variant_window_data[
causative_variant_window_data$POS1 <= variant_position & causative_variant_window_data$POS2 >= variant_position, ]
# Extract the FREQUENCY of the matching row
if (nrow(matching_row) > 0) {
variant_100k_window_frequency <- matching_row$FREQUENCY
print(frequency)
} else {
print("No matching row found")
}
# Create histogram
hist(causative_variant_window_data[["FREQUENCY"]], main = paste("Histogram of Frequency for", simname_from_file),
xlab = "Frequency", ylab = "Frequency Count")
# Add vertical line for variant_100k_subwindow_frequency
abline(v = variant_100k_window_frequency, col = "red")
# Add legend
legend("topright", legend = paste("Causative Variant 100k Window Freq:", variant_100k_window_frequency),
col = "red", lwd = 1)
# Create a list with table name and corresponding data frame
table_info <- list(Sim_name = simname_from_file, filename = file, length_bp = length_bp_value,
min_freq = min_freq,max_freq = max_freq,avg_freq = average_freq,variant_position = variant_position, variant_100k_subwindow_frequency = variant_100k_window_frequency,
causative_window_data = causative_variant_window_data)  # Added ROH_Hotspot_threshold here
# Append the table info to the list under selection_scenario
causative_variant_window_tables_Selection_Model[[selection_scenario]] <- c(causative_variant_window_tables_Selection_Model[[selection_scenario]], list(table_info))
}
# Calculate overall statistics for each selection coefficient
for (selection_scenario in names(causative_variant_window_tables_Selection_Model)) {
# Extract all tables for the current selection scenario
tables <- causative_variant_window_tables_Selection_Model[[selection_scenario]]
# Calculate average length in bp
all_causative_window_lengths_bp <- unlist(lapply(tables, function(table) table$length_bp))
# Calculate minimum window frequency
all_causative_window_min_freq <- unlist(lapply(tables, function(table) table$min_freq))
# Calculate maximum window frequency
all_causative_window_max_freq <- unlist(lapply(tables, function(table) table$max_freq))
# Calculate mean window frequency
all_causative_window_avg_freq <- unlist(lapply(tables, function(table) table$avg_freq))
# Calculate average variant_100k_subwindow_frequency:
all_variant_100k_subwindow_frequencies <- unlist(lapply(tables, function(table) table$variant_100k_subwindow_frequency))
# Store the calculated values back into the main list
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_length_bp <- mean(all_causative_window_lengths_bp)
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_length_Mb <- mean(all_causative_window_lengths_bp) / 1e6
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Min_causative_window_freq <- min(all_causative_window_min_freq)
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Max_causative_window_freq <- max(all_causative_window_max_freq)
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_freq <- mean(all_causative_window_avg_freq)
causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_variant_100k_subwindow_frequency <- mean(all_variant_100k_subwindow_frequencies)
}
# Initialize an empty data frame to store the results
result_df <- data.frame()
# Loop through each selection scenario
for (selection_scenario in names(causative_variant_window_tables_Selection_Model)) {
# Extract selection coefficent from the selection scenario
selection_coefficient <- sub("^.*_(s\\d+_chr\\d+)$", "\\1", selection_scenario)
# Extract the average causative window length for the current selection scenario
avg_causative_window_length <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_length_Mb
Min_window_freq <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Min_causative_window_freq
Max_window_freq <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Max_causative_window_freq
Avg_window_freq <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_causative_window_freq
Avg_freq_variant_100k_window <- causative_variant_window_tables_Selection_Model[[selection_scenario]]$Avg_variant_100k_subwindow_frequency
# Add the selection scenario and average causative window length to the result data frame
result_df <- rbind(result_df, data.frame(Selection_coefficient = selection_coefficient, Avg_Length_Mb = avg_causative_window_length, Min_freq = Min_window_freq,
Max_freq =  Max_window_freq,Avg_window_freq = Avg_window_freq,Avg_freq_variant_100k_window = Avg_freq_variant_100k_window
))
}
# View(causative_variant_window_tables_Selection_Model)
# Sort the data frame based on Inbreeding coefficient column
result_df_sorted <- result_df[order(result_df$Avg_Length_Mb), ]
# Print the table using kable
kable(result_df_sorted)
causative_variant_window_tables_Selection_Model[["selection_model_s06_chr3"]][[1]][["causative_window_data"]]
causative_variant_window_tables_Selection_Model[["selection_model_s07_chr3"]][[4]][["causative_window_data"]]
View(fixation_data_causative_variant_tables)
View(causative_variant_position_data)
View(causative_variant_window_tables_Selection_Model[["selection_model_s05_chr3"]][[3]][["causative_window_data"]])
View(causative_variant_window_tables_Selection_Model[["selection_model_s05_chr3"]][[3]][["causative_window_data"]])
