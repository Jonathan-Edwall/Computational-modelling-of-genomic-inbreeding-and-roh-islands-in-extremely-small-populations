# Create a list with table name and corresponding data frame
table_info <- list(name = table_name, data = bed_data)
# Append the table info to the list
tables <- c(tables, list(table_info))
}
# # Print the list of tables
# print(tables)
# Read the file as a table
neutral_model_data <- read.table(neutral_model_allele_freq, header = TRUE)
# # View the structure of the data
# str(neutral_model_data)
cat("Showing the first 10 rows of neutral_model_data file:\n")
kable(head(neutral_model_data, 10))
calculate_expected_heterozygosity <- function(p) {
# Calculate expected heterozygosity
heterozygosity <- 2 * p * (1 - p)
# Return the result
return(heterozygosity)
}
##2.1: Empirical ROH hotspots
for (i in seq_along(tables)) {
# Extract table name and data frame
table_info <- tables[[i]]
table_name <- table_info$name
table_data <- table_info$data
# Calculate expected heterozygosity for each window
window_H_e_list <- c()  # Initialize an empty list to store expected heterozygosity values
# Loop through each row in the table data
for (j in 1:nrow(table_data)) {
# Extract the MAF (p value)
p <- table_data[j, "MAF"]
# Calculate expected heterozygosity using the provided function
expected_heterozygosity <- calculate_expected_heterozygosity(p)
# Append the calculated expected heterozygosity to the list
window_H_e_list <- c(window_H_e_list, expected_heterozygosity)
}
# Assign the calculated expected heterozygosity list to the H_e attribute of table_info
tables[[i]]$H_e <- window_H_e_list
}
View(tables)
tables[[1]][["H_e"]]
# Clean the working environment
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
# Set the path to your GitHub folder
YOUR_GITHUB_ROOT_DIRECTORY <- "C:/Users/jonat/GitHub"
# Defining the relative path in the repository
repository_path <- "Computational-modelling-of-genomic-inbreeding-and-roh-islands-in-extremely-small-populations"
####################################
# Defining the input files
####################################
ROH_hotspot_allele_freq_dir <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"results/ROH-Hotspots/empirical/german_shepherd/gosling_plots/hotspots_allele_freq/")
neutral_model_allele_freq_dir <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"results/PLINK/simulated/allele_freq")
neutral_model_allele_freq <- file.path(neutral_model_allele_freq_dir,"neutral_model_chr_3_allele_freq.frq")
####################################
# Defining the working directory
####################################
output_dir_sweep_test <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"results/Sweep_test/german_shepherd/")
if (!dir.exists(output_dir_sweep_test)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_sweep_test)
}
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir_sweep_test)
####################################
# Defining the output files
####################################
#
# # Define the chromosome to be simulated
# chr_simulated <- "chr3"
#
# # Define the base name for the output .map & .ped PLINK files
# output_sim_files_basename <- paste0("Neutral_simulation_", chr_simulated)
# # Verify the current working directory
#getwd()
library(knitr)
#library(dplyr)
#library(ggplot2)
#library(patchwork)
#library(purrr)
#library(tibble)
# Set the working directory to the directory containing .bed files
setwd(ROH_hotspot_allele_freq_dir)
# Get a list of all .bed files in the directory
bed_files <- list.files(pattern = "\\.bed$")
# Initialize an empty list to store tables
tables <- list()
# cat("\n\n","Showing the first 10 rows of the ROH-hotspot allele frequency files")
# Loop through each .bed file
for (file in bed_files) {
# Extract chromosome number and window number from file name
chromosome <- sub(".*chr([0-9]+)_.*", "\\1", file)
window <- sub(".*window_([0-9]+)_.*", "\\1", file)
# Create table name
table_name <- paste("Hotspot_chr", chromosome, "_window_", window, "_allele_freq", sep = "")
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header and split it into column names
column_names <- sub("#", "", header)
column_names <- strsplit(column_names, "\t")[[1]]
# Read the .bed file into a data frame, skipping commented lines
bed_data <- read.table(file, header = FALSE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names)
# Create a list with table name and corresponding data frame
table_info <- list(name = table_name, data = bed_data)
# Append the table info to the list
tables <- c(tables, list(table_info))
}
# # Print the list of tables
# print(tables)
# Read the file as a table
neutral_model_data <- read.table(neutral_model_allele_freq, header = TRUE)
# # View the structure of the data
# str(neutral_model_data)
cat("Showing the first 10 rows of neutral_model_data file:\n")
kable(head(neutral_model_data, 10))
calculate_expected_heterozygosity <- function(p) {
# Calculate expected heterozygosity
heterozygosity <- 2 * p * (1 - p)
# Return the result
return(heterozygosity)
}
for (i in seq_along(tables)) {
# Extract table name and data frame
table_info <- tables[[i]]
table_name
table_data <- table_info$data
# Calculate expected heterozygosity for each window
window_H_e_list <- c()  # Initialize an empty list to store expected heterozygosity values
# Loop through each row in the table data
for (j in 1:nrow(table_data)) {
# Extract the MAF (p value)
p <- table_data[j, "MAF"]
# Calculate expected heterozygosity using the provided function
expected_heterozygosity <- calculate_expected_heterozygosity(p)
# Append the calculated expected heterozygosity to the list
window_H_e_list <- c(window_H_e_list, expected_heterozygosity)
}
# Assign the calculated expected heterozygosity list to the H_e attribute of table_info
tables[[i]]$H_e_list <- window_H_e_list
tables[[i]]$Average_H_e <- mean(tables[[i]]$H_e_list)
}
View(tables)
mean(tables[[1]][["H_e_list"]])
# Clean the working environment
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
# Set the path to your GitHub folder
YOUR_GITHUB_ROOT_DIRECTORY <- "C:/Users/jonat/GitHub"
# Defining the relative path in the repository
repository_path <- "Computational-modelling-of-genomic-inbreeding-and-roh-islands-in-extremely-small-populations"
####################################
# Defining the input files
####################################
ROH_hotspot_allele_freq_dir <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"results/ROH-Hotspots/empirical/german_shepherd/gosling_plots/hotspots_allele_freq/")
neutral_model_allele_freq_dir <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"results/PLINK/simulated/allele_freq")
neutral_model_allele_freq <- file.path(neutral_model_allele_freq_dir,"neutral_model_chr_3_allele_freq.frq")
####################################
# Defining the working directory
####################################
output_dir_sweep_test <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"results/Sweep_test/german_shepherd/")
if (!dir.exists(output_dir_sweep_test)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_sweep_test)
}
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir_sweep_test)
####################################
# Defining the output files
####################################
#
# # Define the chromosome to be simulated
# chr_simulated <- "chr3"
#
# # Define the base name for the output .map & .ped PLINK files
# output_sim_files_basename <- paste0("Neutral_simulation_", chr_simulated)
# # Verify the current working directory
#getwd()
library(knitr)
#library(dplyr)
#library(ggplot2)
#library(patchwork)
#library(purrr)
#library(tibble)
# Set the working directory to the directory containing .bed files
setwd(ROH_hotspot_allele_freq_dir)
# Get a list of all .bed files in the directory
bed_files <- list.files(pattern = "\\.bed$")
# Initialize an empty list to store tables
tables <- list()
# cat("\n\n","Showing the first 10 rows of the ROH-hotspot allele frequency files")
# Loop through each .bed file
for (file in bed_files) {
# Extract chromosome number and window number from file name
chromosome <- sub(".*chr([0-9]+)_.*", "\\1", file)
window <- sub(".*window_([0-9]+)_.*", "\\1", file)
# Create table name
table_name <- paste("Hotspot_chr", chromosome, "_window_", window, "_allele_freq", sep = "")
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header and split it into column names
column_names <- sub("#", "", header)
column_names <- strsplit(column_names, "\t")[[1]]
# Read the .bed file into a data frame, skipping commented lines
bed_data <- read.table(file, header = FALSE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names)
# Create a list with table name and corresponding data frame
table_info <- list(name = table_name, data = bed_data)
# Append the table info to the list
tables <- c(tables, list(table_info))
}
# # Print the list of tables
# print(tables)
# Read the file as a table
neutral_model_data <- read.table(neutral_model_allele_freq, header = TRUE)
# # View the structure of the data
# str(neutral_model_data)
cat("Showing the first 10 rows of neutral_model_data file:\n")
kable(head(neutral_model_data, 10))
calculate_expected_heterozygosity <- function(p) {
# Calculate expected heterozygosity
heterozygosity <- 2 * p * (1 - p)
# Return the result
return(heterozygosity)
}
for (i in seq_along(tables)) {
# Extract table name and data frame
table_info <- tables[[i]]
table_name
table_data <- table_info$data
# Calculate expected heterozygosity for each window
window_H_e_list <- c()  # Initialize an empty list to store expected heterozygosity values
# Loop through each row in the table data
for (j in 1:nrow(table_data)) {
# Extract the MAF (p value)
p <- table_data[j, "MAF"]
# Calculate expected heterozygosity using the provided function
expected_heterozygosity <- calculate_expected_heterozygosity(p)
# Append the calculated expected heterozygosity to the list
window_H_e_list <- c(window_H_e_list, expected_heterozygosity)
}
# Assign the calculated expected heterozygosity list to the H_e attribute of table_info
tables[[i]]$H_e_list <- window_H_e_list
tables[[i]]$Average_H_e <- mean(tables[[i]]$H_e_list)
}
# Initialize an empty list to store expected heterozygosity values for the neutral model
neutral_model_H_e_list <- c()
# Loop through each row in neutral_model_data
for (i in 1:nrow(neutral_model_data)) {
# Extract the MAF (p value) from the fifth column
p <- neutral_model_data[i, "MAF"]
# Calculate expected heterozygosity using the provided function
expected_heterozygosity <- calculate_expected_heterozygosity(p)
# Append the calculated expected heterozygosity to the list
neutral_model_H_e_list <- c(neutral_model_H_e_list, expected_heterozygosity)
}
# Calculate the average expected heterozygosity for the neutral model
neutral_model_expected_heterozygosity <- mean(neutral_model_H_e_list)
# Assign the calculated expected heterozygosity list to the neutral_model_data as an attribute
neutral_model_data$H_e_list <- neutral_model_H_e_list
# Calculate the average expected heterozygosity for the neutral model
neutral_model_data$Average_H_e <- mean(neutral_model_data$H_e_list)
# Print the average expected heterozygosity for the neutral model
print(neutral_model_expected_heterozygosity)
View(tables)
View(neutral_model_data)
tables[[1]]
# Clean the working environment
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
# Set the path to your GitHub folder
YOUR_GITHUB_ROOT_DIRECTORY <- "C:/Users/jonat/GitHub"
# Defining the relative path in the repository
repository_path <- "Computational-modelling-of-genomic-inbreeding-and-roh-islands-in-extremely-small-populations"
####################################
# Defining the input files
####################################
ROH_hotspot_allele_freq_dir <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"results/ROH-Hotspots/empirical/german_shepherd/gosling_plots/hotspots_allele_freq/")
neutral_model_allele_freq_dir <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"results/PLINK/simulated/allele_freq")
neutral_model_allele_freq <- file.path(neutral_model_allele_freq_dir,"neutral_model_chr_3_allele_freq.frq")
####################################
# Defining the working directory
####################################
output_dir_sweep_test <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"results/Sweep_test/german_shepherd/")
if (!dir.exists(output_dir_sweep_test)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_sweep_test)
}
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir_sweep_test)
####################################
# Defining the output files
####################################
#
# # Define the chromosome to be simulated
# chr_simulated <- "chr3"
#
# # Define the base name for the output .map & .ped PLINK files
# output_sim_files_basename <- paste0("Neutral_simulation_", chr_simulated)
# # Verify the current working directory
#getwd()
library(knitr)
#library(dplyr)
#library(ggplot2)
#library(patchwork)
#library(purrr)
#library(tibble)
# Set the working directory to the directory containing .bed files
setwd(ROH_hotspot_allele_freq_dir)
# Get a list of all .bed files in the directory
bed_files <- list.files(pattern = "\\.bed$")
# Initialize an empty list to store tables
tables <- list()
# cat("\n\n","Showing the first 10 rows of the ROH-hotspot allele frequency files")
# Loop through each .bed file
for (file in bed_files) {
# Extract chromosome number and window number from file name
chromosome <- sub(".*chr([0-9]+)_.*", "\\1", file)
window <- sub(".*window_([0-9]+)_.*", "\\1", file)
# Create table name
table_name <- paste("Hotspot_chr", chromosome, "_window_", window, "_allele_freq", sep = "")
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header and split it into column names
column_names <- sub("#", "", header)
column_names <- strsplit(column_names, "\t")[[1]]
# Read the .bed file into a data frame, skipping commented lines
bed_data <- read.table(file, header = FALSE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names)
# Create a list with table name and corresponding data frame
table_info <- list(name = table_name, data = bed_data)
# Append the table info to the list
tables <- c(tables, list(table_info))
}
# # Print the list of tables
# print(tables)
# Read the file as a table
neutral_model_data <- read.table(neutral_model_allele_freq, header = TRUE)
# # View the structure of the data
# str(neutral_model_data)
cat("Showing the first 10 rows of neutral_model_data file:\n")
kable(head(neutral_model_data, 10))
calculate_expected_heterozygosity <- function(p) {
# Calculate expected heterozygosity
heterozygosity <- 2 * p * (1 - p)
# Return the result
return(heterozygosity)
}
for (i in seq_along(tables)) {
# Extract table name and data frame
table_info <- tables[[i]]
table_name
table_data <- table_info$data
# Calculate expected heterozygosity for each window
window_H_e_list <- c()  # Initialize an empty list to store expected heterozygosity values
# Loop through each row in the table data
for (j in 1:nrow(table_data)) {
# Extract the MAF (p value)
p <- table_data[j, "MAF"]
# Calculate expected heterozygosity using the provided function
expected_heterozygosity <- calculate_expected_heterozygosity(p)
# Append the calculated expected heterozygosity to the list
window_H_e_list <- c(window_H_e_list, expected_heterozygosity)
}
# Assign the calculated expected heterozygosity list to the H_e attribute of table_info
tables[[i]]$H_e_list <- window_H_e_list
tables[[i]]$Average_H_e <- mean(tables[[i]]$H_e_list)
}
# Initialize an empty list to store expected heterozygosity values for the neutral model
neutral_model_H_e_list <- c()
# Loop through each row in neutral_model_data
for (i in 1:nrow(neutral_model_data)) {
# Extract the MAF (p value) from the fifth column
p <- neutral_model_data[i, "MAF"]
# Calculate expected heterozygosity using the provided function
expected_heterozygosity <- calculate_expected_heterozygosity(p)
# Append the calculated expected heterozygosity to the list
neutral_model_H_e_list <- c(neutral_model_H_e_list, expected_heterozygosity)
}
# Calculate the average expected heterozygosity for the neutral model
neutral_model_expected_heterozygosity <- mean(neutral_model_H_e_list)
# Assign the calculated expected heterozygosity list and average to the neutral model data as attributes
neutral_model_data$H_e_list <- neutral_model_H_e_list
neutral_model_data$Average_H_e <- neutral_model_expected_heterozygosity
# Print the neutral model data
print(neutral_model_data)
View(neutral_model_data)
# Clean the working environment
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
# Set the path to your GitHub folder
YOUR_GITHUB_ROOT_DIRECTORY <- "C:/Users/jonat/GitHub"
# Defining the relative path in the repository
repository_path <- "Computational-modelling-of-genomic-inbreeding-and-roh-islands-in-extremely-small-populations"
####################################
# Defining the input files
####################################
ROH_hotspot_allele_freq_dir <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"results/ROH-Hotspots/empirical/german_shepherd/gosling_plots/hotspots_allele_freq/")
neutral_model_allele_freq_dir <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"results/PLINK/simulated/allele_freq")
neutral_model_allele_freq <- file.path(neutral_model_allele_freq_dir,"neutral_model_chr_3_allele_freq.frq")
####################################
# Defining the working directory
####################################
output_dir_sweep_test <- file.path(YOUR_GITHUB_ROOT_DIRECTORY, repository_path,"results/Sweep_test/german_shepherd/")
if (!dir.exists(output_dir_sweep_test)) {
# Create the working directory if it doesn't exist
dir.create(output_dir_sweep_test)
}
# Set the working directory for notebook chunks
knitr::opts_knit$set(root.dir = output_dir_sweep_test)
####################################
# Defining the output files
####################################
#
# # Define the chromosome to be simulated
# chr_simulated <- "chr3"
#
# # Define the base name for the output .map & .ped PLINK files
# output_sim_files_basename <- paste0("Neutral_simulation_", chr_simulated)
# # Verify the current working directory
#getwd()
library(knitr)
#library(dplyr)
#library(ggplot2)
#library(patchwork)
#library(purrr)
#library(tibble)
# Set the working directory to the directory containing .bed files
setwd(ROH_hotspot_allele_freq_dir)
# Get a list of all .bed files in the directory
bed_files <- list.files(pattern = "\\.bed$")
# Initialize an empty list to store tables
tables <- list()
# cat("\n\n","Showing the first 10 rows of the ROH-hotspot allele frequency files")
# Loop through each .bed file
for (file in bed_files) {
# Extract chromosome number and window number from file name
chromosome <- sub(".*chr([0-9]+)_.*", "\\1", file)
window <- sub(".*window_([0-9]+)_.*", "\\1", file)
# Create table name
table_name <- paste("Hotspot_chr", chromosome, "_window_", window, "_allele_freq", sep = "")
# Read the header line
con <- file(file, "r")
header <- readLines(con, n = 1)
close(con)
# Remove "#" from the header and split it into column names
column_names <- sub("#", "", header)
column_names <- strsplit(column_names, "\t")[[1]]
# Read the .bed file into a data frame, skipping commented lines
bed_data <- read.table(file, header = FALSE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names)
# Create a list with table name and corresponding data frame
table_info <- list(name = table_name, data = bed_data)
# Append the table info to the list
tables <- c(tables, list(table_info))
}
# # Print the list of tables
# print(tables)
# Read the file as a table
neutral_model_data <- read.table(neutral_model_allele_freq, header = TRUE)
# # View the structure of the data
# str(neutral_model_data)
cat("Showing the first 10 rows of neutral_model_data file:\n")
kable(head(neutral_model_data, 10))
calculate_expected_heterozygosity <- function(p) {
# Calculate expected heterozygosity
heterozygosity <- 2 * p * (1 - p)
# Return the result
return(heterozygosity)
}
for (i in seq_along(tables)) {
# Extract table name and data frame
table_info <- tables[[i]]
table_name
table_data <- table_info$data
# Calculate expected heterozygosity for each window
window_H_e_list <- c()  # Initialize an empty list to store expected heterozygosity values
# Loop through each row in the table data
for (j in 1:nrow(table_data)) {
# Extract the MAF (p value)
p <- table_data[j, "MAF"]
# Calculate expected heterozygosity using the provided function
expected_heterozygosity <- calculate_expected_heterozygosity(p)
# Append the calculated expected heterozygosity to the list
window_H_e_list <- c(window_H_e_list, expected_heterozygosity)
}
# Assign the calculated expected heterozygosity list to the H_e attribute of table_info
tables[[i]]$H_e_list <- window_H_e_list
tables[[i]]$Average_H_e <- mean(tables[[i]]$H_e_list)
}
View(tables)
# Initialize an empty list to store expected heterozygosity values for the neutral model
neutral_model_H_e_list <- c()
# Loop through each row in neutral_model_data
for (i in 1:nrow(neutral_model_data)) {
# Extract the MAF (p value) from the fifth column
p <- neutral_model_data[i, "MAF"]
# Calculate expected heterozygosity using the provided function
expected_heterozygosity <- calculate_expected_heterozygosity(p)
# Append the calculated expected heterozygosity to the list
neutral_model_H_e_list <- c(neutral_model_H_e_list, expected_heterozygosity)
}
# Calculate the average expected heterozygosity for the neutral model
neutral_model_expected_heterozygosity <- mean(neutral_model_H_e_list)
# Assign the calculated expected heterozygosity list and average to the neutral model data as attributes
neutral_model_data$H_e_list <- neutral_model_H_e_list
neutral_model_data$Average_H_e <- neutral_model_expected_heterozygosity
# Print the neutral model data
print(neutral_model_data)
View(neutral_model_data)
