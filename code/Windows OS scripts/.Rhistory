pattern <- "^.*5th_percentiles_of_H_e_distribution.tsv$"
neutral_model_5th_percentiles_of_H_e_files_HO <- list.files(path = Neutral_model_H_e_dir_HO, pattern = pattern)
# Check if exactly one file is found
if (length(neutral_model_5th_percentiles_of_H_e_files_HO) != 1) {
stop("There should be exactly one file matching the pattern.")
}
# Read the file
file <- neutral_model_5th_percentiles_of_H_e_files_HO[1]
# Read the .tsv file into a data frame
data <- read.table(file, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# Store the data frame in a list as a subtable called "data"
H_e_5th_percentiles_Neutral_model_HO <- list(results = data)
H_e_5th_percentiles_Neutral_model_HO$Estimated_Mean_H_e_5th_percentile <- mean(H_e_5th_percentiles_Neutral_model_HO[["results"]][["Fifth_Percentile"]])
# Calculate the bootstrap confidence interval of the point estimate F_ROH across all 20 simulations
# Store the bootstrap confidence interval in the F_ROH_tables_Neutral_Model
H_e_5th_percentiles_Neutral_model_HO$SE_CI_Estimated_Mean_H_e_5th_percentile <- standard_error_confidence_interval_fun(H_e_5th_percentiles_Neutral_model_HO[["results"]][["Fifth_Percentile"]])
#View(H_e_5th_percentiles_Neutral_model_HO)
setwd(Neutral_model_H_e_dir_SAMS)
# Pattern for finding the specific file containing "5th_percentiles_of_H_e_distribution.tsv"
pattern <- "^.*5th_percentiles_of_H_e_distribution.tsv$"
neutral_model_5th_percentiles_of_H_e_files_SAMS <- list.files(path = Neutral_model_H_e_dir_SAMS, pattern = pattern)
# Check if exactly one file is found
if (length(neutral_model_5th_percentiles_of_H_e_files_SAMS) != 1) {
stop("There should be exactly one file matching the pattern.")
}
# Read the file
file <- neutral_model_5th_percentiles_of_H_e_files_SAMS[1]
# Read the .tsv file into a data frame
data <- read.table(file, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# Store the data frame in a list as a subtable called "data"
H_e_5th_percentiles_Neutral_model_SAMS <- list(results = data)
H_e_5th_percentiles_Neutral_model_SAMS$Estimated_Mean_H_e_5th_percentile <- mean(H_e_5th_percentiles_Neutral_model_SAMS[["results"]][["Fifth_Percentile"]])
# Calculate the bootstrap confidence interval of the point estimate F_ROH across all 20 simulations
# Store the bootstrap confidence interval in the F_ROH_tables_Neutral_Model
H_e_5th_percentiles_Neutral_model_SAMS$SE_CI_Estimated_Mean_H_e_5th_percentile <- standard_error_confidence_interval_fun(H_e_5th_percentiles_Neutral_model_SAMS[["results"]][["Fifth_Percentile"]])
#View(H_e_5th_percentiles_Neutral_model_SAMS)
cat("Uncommented because change of analysis")
setwd(Selection_model_H_e_dir_HO)
# Pattern for finding the specific file containing "5th_percentiles_of_H_e_distribution.tsv"
pattern <- "^.*5th_percentiles_of_H_e_distribution.tsv$"
selection_model_5th_percentiles_of_H_e_files_HO <- list.files(path = Selection_model_H_e_dir_HO, pattern = pattern)
# selection_model_5th_percentiles_of_H_e_files_HO
# Initialize an empty list to store H_e_5th_percentiles_Selection_models_HO
H_e_5th_percentiles_Selection_models_HO <- list()
# Loop through each selection coefficient and its associated file
for (i in seq_along(selection_model_5th_percentiles_of_H_e_files_HO)) {
# Extract the selection coefficient from the file name
selection_coefficient <- sub(tolower(".*(selection_model_s\\d+_chr\\d+).*"), "\\1", tolower(selection_model_5th_percentiles_of_H_e_files_HO[i]))
# Read the .tsv file into a data frame
subtable <- read.table(selection_model_5th_percentiles_of_H_e_files_HO[i], header = TRUE,sep = "\t", stringsAsFactors = FALSE)
H_e_5th_percentiles_Selection_models_HO[[selection_coefficient]]$file_name <- selection_model_5th_percentiles_of_H_e_files_HO[i]
# Add the subtable to the list with the selection coefficient as its name
H_e_5th_percentiles_Selection_models_HO[[selection_coefficient]]$results <- subtable
}
# # View the H_e_5th_percentiles_Selection_models_HO
# H_e_5th_percentiles_Selection_models_HO
# Calculating Average F_ROH for each table
# Loop through each selection_coefficient
for (selection_coefficient in names(H_e_5th_percentiles_Selection_models_HO)) {
# Calculate the point estimate F_ROH across all 20 simulations for the current selection coefficient
H_e_5th_percentiles_Selection_models_HO[[selection_coefficient]]$Estimated_Mean_H_e_5th_percentile <- mean(H_e_5th_percentiles_Selection_models_HO[[selection_coefficient]][["results"]][["Fifth_Percentile"]])
# Calculate the bootstrap confidence interval of the point estimate F_ROH across all 20 simulations for the current selection coefficient
# Store the bootstrap confidence interval in the H_e_5th_percentiles_Selection_models_HO table
H_e_5th_percentiles_Selection_models_HO[[selection_coefficient]]$SE_CI_Estimated_Mean_H_e_5th_percentile <- standard_error_confidence_interval_fun(H_e_5th_percentiles_Selection_models_HO[[selection_coefficient]][["results"]][["Fifth_Percentile"]])
}
# # View the dataframe
# View(H_e_5th_percentiles_Selection_models_HO)
cat("Uncommented because change of analysis")
setwd(Selection_model_H_e_dir_SAMS)
# Pattern for finding the specific file containing "5th_percentiles_of_H_e_distribution.tsv"
pattern <- "^.*5th_percentiles_of_H_e_distribution.tsv$"
selection_model_5th_percentiles_of_H_e_files_SAMS <- list.files(path = Selection_model_H_e_dir_SAMS, pattern = pattern)
# selection_model_5th_percentiles_of_H_e_files_SAMS
# Initialize an empty list to store H_e_5th_percentiles_Selection_models_SAMS
H_e_5th_percentiles_Selection_models_SAMS <- list()
# Loop through each selection coefficient and its associated file
for (i in seq_along(selection_model_5th_percentiles_of_H_e_files_SAMS)) {
# Extract the selection coefficient from the file name
selection_coefficient <- sub(tolower(".*(selection_model_s\\d+_chr\\d+).*"), "\\1", tolower(selection_model_5th_percentiles_of_H_e_files_SAMS[i]))
# Read the .tsv file into a data frame
subtable <- read.table(selection_model_5th_percentiles_of_H_e_files_SAMS[i], header = TRUE,sep = "\t", stringsAsFactors = FALSE)
H_e_5th_percentiles_Selection_models_SAMS[[selection_coefficient]]$file_name <- selection_model_5th_percentiles_of_H_e_files_SAMS[i]
# Add the subtable to the list with the selection coefficient as its name
H_e_5th_percentiles_Selection_models_SAMS[[selection_coefficient]]$results <- subtable
}
# # View the H_e_5th_percentiles_Selection_models_SAMS
# H_e_5th_percentiles_Selection_models_SAMS
# Calculating Average F_ROH for each table
# Loop through each selection_coefficient
for (selection_coefficient in names(H_e_5th_percentiles_Selection_models_SAMS)) {
# Calculate the point estimate F_ROH across all 20 simulations for the current selection coefficient
H_e_5th_percentiles_Selection_models_SAMS[[selection_coefficient]]$Estimated_Mean_H_e_5th_percentile <- mean(H_e_5th_percentiles_Selection_models_SAMS[[selection_coefficient]][["results"]][["Fifth_Percentile"]])
# Calculate the bootstrap confidence interval of the point estimate F_ROH across all 20 simulations for the current selection coefficient
# Store the bootstrap confidence interval in the H_e_5th_percentiles_Selection_models_SAMS table
H_e_5th_percentiles_Selection_models_SAMS[[selection_coefficient]]$SE_CI_Estimated_Mean_H_e_5th_percentile <- standard_error_confidence_interval_fun(H_e_5th_percentiles_Selection_models_SAMS[[selection_coefficient]][["results"]][["Fifth_Percentile"]])
}
# # View the dataframe
# View(H_e_5th_percentiles_Selection_models_SAMS)
# # Initialize vectors to store F_ROH values and CI bounds for the different selection coefficients
# selection_model_avg_values_HO <- c()
# selection_model_lower_ci_HO <- c()
# selection_model_upper_ci_HO <- c()
# selection_model_names_HO <- c(rownames(summary(H_e_5th_percentiles_Selection_models_HO)))
#
# # Loop through each selection_coefficient in H_es_Selection_models
# for (selection_coefficient in H_e_5th_percentiles_Selection_models_HO) {
#   selection_coefficient$Estimated_Mean_Population_H_e <- mean(selection_coefficient$results$Avg_H_e)
#   CI <- standard_error_confidence_interval_fun(selection_coefficient$results$Avg_H_e)
#
#   # Append values to the lists
#   selection_model_avg_values_HO <- c(selection_model_avg_values_HO, selection_coefficient$Estimated_Mean_Population_H_e)
#   selection_model_lower_ci_HO <- c(selection_model_lower_ci_HO, CI[1])
#   selection_model_upper_ci_HO <- c(selection_model_upper_ci_HO, CI[2])
# }
#
# # Initialize vectors to store F_ROH values and CI bounds for the different selection coefficients
# selection_model_avg_values_SAMS <- c()
# selection_model_lower_ci_SAMS <- c()
# selection_model_upper_ci_SAMS <- c()
# selection_model_names_SAMS <- c(rownames(summary(H_e_5th_percentiles_Selection_models_SAMS)))
#
# # Loop through each selection_coefficient in H_es_Selection_models
# for (selection_coefficient in H_e_5th_percentiles_Selection_models_SAMS) {
#   selection_coefficient$Estimated_Mean_Population_H_e <- mean(selection_coefficient$results$Avg_H_e)
#   CI <- standard_error_confidence_interval_fun(selection_coefficient$results$Avg_H_e)
#
#   # Append values to the lists
#   selection_model_avg_values_SAMS <- c(selection_model_avg_values_SAMS, selection_coefficient$Estimated_Mean_Population_H_e)
#   selection_model_lower_ci_SAMS <- c(selection_model_lower_ci_SAMS, CI[1])
#   selection_model_upper_ci_SAMS <- c(selection_model_upper_ci_SAMS, CI[2])
# }
#
# Extract neutral model values and CI bounds
H_e_5th_percentiles_Neutral_model_HO$Estimated_Mean_Population_H_e <- mean(H_e_5th_percentiles_Neutral_model_HO[["results"]][["Avg_H_e"]])
H_e_5th_percentiles_Neutral_model_HO$SE_CI_Estimated_Mean_H_e <- standard_error_confidence_interval_fun(H_e_5th_percentiles_Neutral_model_HO[["results"]][["Avg_H_e"]])
# Calculate the  standard deviation across all 20 simulations
H_e_5th_percentiles_Neutral_model_HO$H_e_Standard_deviation <- standard_deviation_fun(H_e_5th_percentiles_Neutral_model_HO[["results"]][["Avg_H_e"]])
neutral_avg_H_e_HO <- H_e_5th_percentiles_Neutral_model_HO$Estimated_Mean_Population_H_e
neutral_lower_ci_HO <- H_e_5th_percentiles_Neutral_model_HO$SE_CI_Estimated_Mean_H_e[1]
neutral_upper_ci_HO <- H_e_5th_percentiles_Neutral_model_HO$SE_CI_Estimated_Mean_H_e[2]
neutral_standard_deviation_HO <- H_e_5th_percentiles_Neutral_model_HO$H_e_Standard_deviation
neutral_HO_Coefficient_of_Variation <- 100*(neutral_standard_deviation_HO/neutral_avg_H_e_HO)
# Extract neutral model values and CI bounds
H_e_5th_percentiles_Neutral_model_SAMS$Estimated_Mean_Population_H_e <- mean(H_e_5th_percentiles_Neutral_model_SAMS[["results"]][["Avg_H_e"]])
H_e_5th_percentiles_Neutral_model_SAMS$SE_CI_Estimated_Mean_H_e <- standard_error_confidence_interval_fun(H_e_5th_percentiles_Neutral_model_SAMS[["results"]][["Avg_H_e"]])
# Calculate the  standard deviation across all 20 simulations
H_e_5th_percentiles_Neutral_model_SAMS$H_e_Standard_deviation <- standard_deviation_fun(H_e_5th_percentiles_Neutral_model_SAMS[["results"]][["Avg_H_e"]])
neutral_avg_H_e_SAMS <- H_e_5th_percentiles_Neutral_model_SAMS$Estimated_Mean_Population_H_e
neutral_lower_ci_SAMS <- H_e_5th_percentiles_Neutral_model_SAMS$SE_CI_Estimated_Mean_H_e[1]
neutral_upper_ci_SAMS <- H_e_5th_percentiles_Neutral_model_SAMS$SE_CI_Estimated_Mean_H_e[2]
neutral_standard_deviation_SAMS <- H_e_5th_percentiles_Neutral_model_SAMS$H_e_Standard_deviation
neutral_SAMS_Coefficient_of_Variation <- 100*(neutral_standard_deviation_SAMS/neutral_avg_H_e_SAMS)
# Extract empirical model value
empirical_avg_H_e <- empirical_H_e_distribution_table$Avg_H_e
empirical_lower_ci <- NA # Placeholder for confidence interval lower bound
empirical_upper_ci <- NA # Placeholder for confidence interval upper bound
empirical_standard_deviation <- NA # Placeholder value
empirical_Coefficient_of_Variation <- NA # Placeholder value
neutral_model_H_e_error_perc_HO <- round(100*( abs( 1-(H_e_5th_percentiles_Neutral_model_HO$Estimated_Mean_Population_H_e/empirical_H_e_distribution_table$Avg_H_e)))
,H_e_values_decimals)
neutral_model_H_e_error_perc_SAMS <- round(100*( abs( 1-(H_e_5th_percentiles_Neutral_model_SAMS$Estimated_Mean_Population_H_e/empirical_H_e_distribution_table$Avg_H_e)))
,H_e_values_decimals)
empirical_H_e_error_perc <- NA # Placeholder
# Combine all values into a data frame
H_e_values <- data.frame(
Model = c("Neutral - Sams ","Neutral - HO", "Empirical"),
H_e = c(neutral_avg_H_e_SAMS, neutral_avg_H_e_HO, empirical_avg_H_e),
Lower_CI = c(neutral_lower_ci_SAMS, neutral_lower_ci_HO, empirical_lower_ci),
Upper_CI = c(neutral_upper_ci_SAMS, neutral_upper_ci_HO, empirical_upper_ci),
Standard_Deviation = c(neutral_standard_deviation_SAMS,neutral_standard_deviation_HO,empirical_standard_deviation),
Coefficient_of_variation = c(neutral_SAMS_Coefficient_of_Variation,neutral_HO_Coefficient_of_Variation,empirical_Coefficient_of_Variation),
Error_percentage = c(neutral_model_H_e_error_perc_SAMS,neutral_model_H_e_error_perc_HO,empirical_H_e_error_perc)
)
# Format all numeric values to 5 decimal places
H_e_values$H_e <- round(H_e_values$H_e, H_e_values_decimals)
H_e_values$Lower_CI <- round(H_e_values$Lower_CI,H_e_values_decimals)
H_e_values$Upper_CI <- round(H_e_values$Upper_CI,H_e_values_decimals)
H_e_values$Error_percentage <- round(H_e_values$Error_percentage,Error_percentage_decimals)
H_e_values$Standard_Deviation <- round(H_e_values$Standard_Deviation,Standard_deviation_decimals)
H_e_values$Coefficient_of_variation <- round(H_e_values$Coefficient_of_variation,Error_percentage_decimals)
# # Update the Model column for selection models
# H_e_values$Model[1:length(selection_model_names)] <- selection_model_names
# Formatting the selection coefficient for when displaying it. Removing "chr[0-9]" and adding a decimal point to the selection coefficient
# # formatted_selection_coefficient_labels <- sub("^.*_s(0?)(\\d+)_chr\\d+$", "s=\\1.\\2", selection_model_names)
# formatted_selection_coefficient_labels <-sub("s(\\d)(\\d+)_.*", "s=\\1.\\2", selection_model_names)
# formatted_selection_coefficient_labels <- sub("selection_model_", "", formatted_selection_coefficient_labels)
# H_e_values$Model[1:length(selection_model_names)] <- formatted_selection_coefficient_labels
H_e_values$H_e <- as.numeric(round(H_e_values$H_e,H_e_values_decimals))
# Sort the data frame based on H_e column
H_e_values_sorted <- H_e_values[order(as.numeric(H_e_values$H_e)), ]
# Define the filename with the output directory path
filename <- file.path(output_dir, paste("HO_evaluation_NO_MAF_Genomic_Average_Expected_Heterozygosity_Summary",".csv", sep = ""))
# Write data to CSV file without quotes
write.table(H_e_values_sorted, file = filename, sep = ",", row.names = FALSE, quote = FALSE)
# # Use the write_latex_table() function to write the data to a LaTeX-compatible text file
# write_latex_table(
#   data_frame = H_e_values,
#   sort_column = "H_e",  # Column used for sorting
#   output_dir = output_dir,
#   output_filename = "Expected_Heterozygosity_Summary"  # File name without extension
# )
# Print the table using knitr::kable()
knitr::kable(H_e_values_sorted, row.names = FALSE)
# # Initialize vectors to store F_ROH values and CI bounds for the different selection coefficients
# selection_model_avg_values_HO <- c()
# selection_model_lower_ci_HO <- c()
# selection_model_upper_ci_HO <- c()
#
# # Loop through each selection_coefficient in H_e_5th_percentiles_Selection_models_HO
# for (selection_coefficient in H_e_5th_percentiles_Selection_models_HO) {
#   CI <- selection_coefficient$SE_CI_Estimated_Mean_H_e_5th_percentile
#
#   # Append values to the lists
#   selection_model_avg_values_HO <- c(selection_model_avg_values_HO, selection_coefficient$Estimated_Mean_H_e_5th_percentile)
#   selection_model_lower_ci_HO <- c(selection_model_lower_ci_HO, CI[1])
#   selection_model_upper_ci_HO <- c(selection_model_upper_ci_HO, CI[2])
# }
#
# # Initialize vectors to store F_ROH values and CI bounds for the different selection coefficients
# selection_model_avg_values_SAMS <- c()
# selection_model_lower_ci_SAMS <- c()
# selection_model_upper_ci_SAMS <- c()
#
# # Loop through each selection_coefficient in H_e_5th_percentiles_Selection_models_SAMS
# for (selection_coefficient in H_e_5th_percentiles_Selection_models_SAMS) {
#   CI <- selection_coefficient$SE_CI_Estimated_Mean_H_e_5th_percentile
#
#   # Append values to the lists
#   selection_model_avg_values_SAMS <- c(selection_model_avg_values_SAMS, selection_coefficient$Estimated_Mean_H_e_5th_percentile)
#   selection_model_lower_ci_SAMS <- c(selection_model_lower_ci_SAMS, CI[1])
#   selection_model_upper_ci_SAMS <- c(selection_model_upper_ci_SAMS, CI[2])
# }
#
# Extract neutral model values and CI bounds
neutral_avg_H_e_5th_percentile_HO <- H_e_5th_percentiles_Neutral_model_HO[["Estimated_Mean_H_e_5th_percentile"]]
neutral_lower_ci_HO <- H_e_5th_percentiles_Neutral_model_HO[["SE_CI_Estimated_Mean_H_e_5th_percentile"]][1]
neutral_upper_ci_HO <- H_e_5th_percentiles_Neutral_model_HO[["SE_CI_Estimated_Mean_H_e_5th_percentile"]][2]
# Extract neutral model values and CI bounds
neutral_avg_H_e_5th_percentile_SAMS <- H_e_5th_percentiles_Neutral_model_SAMS[["Estimated_Mean_H_e_5th_percentile"]]
neutral_lower_ci_SAMS <- H_e_5th_percentiles_Neutral_model_SAMS[["SE_CI_Estimated_Mean_H_e_5th_percentile"]][1]
neutral_upper_ci_SAMS <- H_e_5th_percentiles_Neutral_model_SAMS[["SE_CI_Estimated_Mean_H_e_5th_percentile"]][2]
# Extract empirical model value
empirical_avg_H_e_5th_percentile <- empirical_H_e_distribution_table$Fifth_Percentile
empirical_lower_ci <- NA # Placeholder for confidence interval lower bound
empirical_upper_ci <- NA # Placeholder for confidence interval upper bound
# Extract neutral model values and CI bounds
neutral_model_H_e_5th_percentiles_error_perc_HO <- round(100*( abs( 1-(H_e_5th_percentiles_Neutral_model_HO[["Estimated_Mean_H_e_5th_percentile"]]/empirical_H_e_distribution_table$Fifth_Percentile)))
,H_e_values_decimals)
neutral_model_H_e_5th_percentiles_error_perc_SAMS <- round(100*( abs( 1-(H_e_5th_percentiles_Neutral_model_SAMS[["Estimated_Mean_H_e_5th_percentile"]]/empirical_H_e_distribution_table$Fifth_Percentile)))
,H_e_values_decimals)
empirical_H_e_5th_percentiles_error_perc_SAMS <- NA # Placeholder
# Combine all values into a data frame
H_e_5th_percentile_values <- data.frame(
Model = c("Neutral - Sams", "Neutral - HO", "Empirical"),
H_e_5th_percentile = c(neutral_avg_H_e_5th_percentile_SAMS, neutral_avg_H_e_5th_percentile_HO, empirical_avg_H_e_5th_percentile),
Lower_CI = c(neutral_lower_ci_SAMS, neutral_lower_ci_HO, empirical_lower_ci),
Upper_CI = c(neutral_upper_ci_SAMS, neutral_upper_ci_HO, empirical_upper_ci),
Error_perc = c(neutral_model_H_e_5th_percentiles_error_perc_SAMS,neutral_model_H_e_5th_percentiles_error_perc_HO,empirical_H_e_5th_percentiles_error_perc_SAMS)
)
# Format all numeric values to 5 decimal places
H_e_5th_percentile_values$H_e_5th_percentile <- round(H_e_5th_percentile_values$H_e_5th_percentile, H_e_values_decimals)
H_e_5th_percentile_values$Lower_CI <- round(H_e_5th_percentile_values$Lower_CI,H_e_values_decimals)
H_e_5th_percentile_values$Upper_CI <- round(H_e_5th_percentile_values$Upper_CI,H_e_values_decimals)
H_e_5th_percentile_values$Error_perc <- round(H_e_5th_percentile_values$Error_perc,Error_percentage_decimals)
# # Formatting the selection coefficient for when displaying it. Removing "chr[0-9]" and adding a decimal point to the selection coefficient
# # formatted_selection_coefficient_labels <- sub("^.*_s(0?)(\\d+)_chr\\d+$", "s=\\1.\\2", selection_model_names)
# formatted_selection_coefficient_labels <-sub("s(\\d)(\\d+)_.*", "s=\\1.\\2", selection_model_names)
# H_e_5th_percentile_values$Model[1:length(selection_model_names)] <- formatted_selection_coefficient_labels
H_e_5th_percentile_values$H_e_5th_percentile <- as.numeric(round(H_e_5th_percentile_values$H_e_5th_percentile,H_e_values_decimals))
# Sort the data frame based on H_e_5th_percentile column
H_e_5th_percentile_values_sorted <- H_e_5th_percentile_values[order(as.numeric(H_e_5th_percentile_values$H_e_5th_percentile)), ]
# Define the filename with the output directory path
filename <- file.path(output_dir, paste("HO_evaluation_NO_MAF_5th_percentile_Expected_Heterozygosity_Summary",".csv", sep = ""))
# Write data to CSV file without quotes
write.table(H_e_5th_percentile_values_sorted, file = filename, sep = ",", row.names = FALSE, quote = FALSE)
# # Use the write_latex_table() function to write the data to a LaTeX-compatible text file
# write_latex_table(
#   data_frame = H_e_5th_percentile_values,
#   sort_column = "H_e_5th_percentile",  # Column used for sorting
#   output_dir = output_dir,
#   output_filename = "Expected_Heterozygosity_Summary"  # File name without extension
# )
# Print the table using knitr::kable()
knitr::kable(H_e_5th_percentile_values_sorted, row.names = FALSE)
# cat("\n ROH-hotspot threshold comparison between the different datasets")
# # Print the table using knitr::kable()
# knitr::kable(ROH_hotspot_threshold_values_sorted, row.names = FALSE)
# ```
# ### 4.0.2 F_ROH comparison
# ```{r echo = FALSE,warning = FALSE}
# setwd(output_dir)
#
# # Creating an image of the F_ROH plot
# # png(filename = "Population_F_ROH_comparison_with_CI.png", width = 800, height = 600, res = 300)
# png(filename = "Population_F_ROH_comparison_with_CI.png",width = 1920, height = 1080, res = 300)
#
#
# # Remove the empirical model from the plotting data
# plotting_data <- F_ROH_values[F_ROH_values$Model != "Empirical", ]
#
# # Add a column indicating whether the empirical F_ROH is within the CI of each model
# empirical_F_ROH <- empirical_avg_F_ROH
# plotting_data$Empirical_Within_CI <- (plotting_data$Lower_CI <= empirical_F_ROH) & (plotting_data$Upper_CI >= empirical_F_ROH)
#
# # Create the plot
# p <- ggplot(plotting_data, aes(x = Model, y = F_ROH, color = Empirical_Within_CI)) +
#   geom_point(size = 3) +
#   geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
#   # Force the empirical F_ROH line to always be shown
#   geom_hline(aes(yintercept = empirical_F_ROH), linetype = "dashed", color = "red", linewidth = 1, show.legend = TRUE) +
#   labs(title = "F_ROH Values and Confidence Intervals by Model",
#        x = "Model",
#        y = "F_ROH",
#        color = "Empirical F_ROH\nwithin CI",
#        linetype = "Empirical F_ROH") +
#   scale_linetype_manual(name = "Empirical F_ROH", values = c("dashed")) +
#   scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "black"), labels = c("TRUE" = "Inside CI", "FALSE" = "Outside CI")) +
#   theme_minimal() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
#
# # Print the plot
# print(p)
# # Print which models the empirical F_ROH is inside of
# inside_models <- plotting_data$Model[plotting_data$Empirical_Within_CI]
# outside_models <- plotting_data$Model[!plotting_data$Empirical_Within_CI]
#
# cat("Models where empirical F_ROH is within CI:\n")
# print(inside_models)
# cat("\nModels where empirical F_ROH is outside CI:\n")
# print(outside_models)
#
# # Close the graphics device
# dev.off()
## Print the table using knitr::kable()
# knitr::kable(F_ROH_values_sorted, row.names = FALSE)
# setwd(Sweep_test_dir_HO)
# # Pattern for finding files containing "F_ROH" and ending with ".tsv"
# pattern <- "^.*neutral_model.*.tsv$"
# selection_testing_files <- list.files(path = Sweep_test_dir_HO, pattern = pattern)
# # selection_testing_files
#
# # Extracting the ROH-hotspot threshold value from the suffix of the filename
# parts <- unlist(strsplit(selection_testing_files[1], "threshold_")) # Split the string by "threshold_"
# # Extract the decimal number using regular expressions
# fifth_percentile_H_e_neutral_model <- as.numeric(gsub("\\.tsv", "", unlist(strsplit(parts[length(parts)], "_"))[1]))
#
#
# for (file in selection_testing_files) {
#
#   file_name <- file
#
#   # Read the header line
#   con <- file(file, "r")
#   header <- readLines(con, n = 1)
#   close(con)
#
#   # Remove "#" from the header and split it into column names
#   column_names <- sub("#", "", header)
#   column_names <- strsplit(column_names, "\t")[[1]]
#
#
#   # # Read the .tsv frequency file into a data frame
#   Selection_testing_results <- read.table(selection_testing_files, header = TRUE, comment.char = "#", stringsAsFactors = FALSE, col.names = column_names)
#   Selection_testing_results[3] <- round(Selection_testing_results[3],H_e_values_decimals)
#   # Remove "_allele_freq" from the names
#   Selection_testing_results$Name <- gsub("_allele_freq$", "", Selection_testing_results$Name)
#
# }
# paste0("Selection test results")
# paste0("ROH-hotspot windows with an mean H_e Value lower or equal to the lower confidence interval of the fifth percentile of the neutral model are classified as being under selection")
# paste0("5th percentile of the neutral model is: ",fifth_percentile_H_e_neutral_model)
# # Print the table using knitr::kable()
# knitr::kable(Selection_testing_results, row.names = FALSE)
#
# formatted_selection_H_e_threshold <- round(fifth_percentile_H_e_neutral_model,H_e_values_decimals)
#
#
# #Define the filename with the output directory path
# filename_csv <- file.path(output_dir, paste("ROH_hotspots_Sweep_test_H_E_threshold_",formatted_selection_H_e_threshold,".csv", sep = ""))
#
# Selection_testing_results_latex <- Selection_testing_results
# # Escape underscores in the Name column
# Selection_testing_results_latex$Name <- gsub("_", "\\_", Selection_testing_results_latex$Name, fixed = TRUE)
#
# # # Write data to CSV file without quotes
# # write.table(Selection_testing_results_latex, file = filename_csv, sep = ",", row.names = FALSE, quote = FALSE)
# #
# # # Define the filename with the output directory path
# # filename <- file.path(paste("ROH_hotspots_Selection_testing_neutral_model_H_E_threshold_",formatted_selection_H_e_threshold,".csv", sep = ""))
#
#
# # # Use the write_latex_table() function to write the data to a LaTeX-compatible text file
# # write_latex_table(
# #   data_frame = Selection_testing_results,
# #   sort_column = "Window_based_Average_H_e",  #
# #   output_dir = output_dir,
# #   output_filename = filename
# # )
#
#
# # Subset the dataframe to extract rows where Under_selection is "Yes"
# under_selection_rows <- subset(Selection_testing_results, Under_selection == "Yes")
# paste0("ROH-hotspots under selection:")
# knitr::kable(under_selection_rows, row.names = FALSE)
# #View(Selection_testing_results)
#
# # Initialize vectors to store H_e values and CI bounds for the different selection coefficients
# selection_model_avg_values <- c()
# selection_model_lower_ci <- c()
# selection_model_upper_ci <- c()
# selection_model_names <- c()
#
# # Loop through each selection_coefficient in H_e_5th_percentiles_Selection_models
# for (selection_coefficient in names(window_H_e_causative_variant_tables)) {
#     # Formatting the selection coefficient for when displaying it. Removing "chr[0-9]" and adding a decimal point to the selection coefficient
#   formatted_selection_coefficient_labels <- sub("s(\\d)(\\d+)_.*", "s=\\1.\\2", selection_coefficient)
#
#   CI <- window_H_e_causative_variant_tables[[selection_coefficient]]$SE_CI_Estimated_Mean_Population_H_e
#
#   # Append values to the lists
#   selection_model_names <- c(selection_model_names,formatted_selection_coefficient_labels)
#   selection_model_avg_values <- c(selection_model_avg_values, window_H_e_causative_variant_tables[[selection_coefficient]]$Estimated_Mean_Population_H_e)
#   selection_model_lower_ci <- c(selection_model_lower_ci, CI[1])
#   selection_model_upper_ci <- c(selection_model_upper_ci, CI[2])
# }
#
# # Extract neutral model values and CI bounds
# neutral_avg_H_e_5th_percentile <- H_e_5th_percentiles_Neutral_model[["Estimated_Mean_H_e_5th_percentile"]]
# neutral_lower_ci <- H_e_5th_percentiles_Neutral_model[["SE_CI_Estimated_Mean_H_e_5th_percentile"]][1]
# neutral_upper_ci <- H_e_5th_percentiles_Neutral_model[["SE_CI_Estimated_Mean_H_e_5th_percentile"]][2]
#
# # Combine all values into a data frame
# H_e_values <- data.frame(
#   Model = c(selection_model_names, "Neutral"),
#   H_e = c(selection_model_avg_values, neutral_avg_H_e_5th_percentile),
#   Lower_CI = c(selection_model_lower_ci, neutral_lower_ci),
#   Upper_CI = c(selection_model_upper_ci, neutral_upper_ci)
# )
#
# # Format all numeric values to have the number of decimals defined by H_e_values_decimals
# H_e_values$H_e <- round(H_e_values$H_e,H_e_values_decimals)
# H_e_values$Lower_CI <- as.numeric(round(H_e_values$Lower_CI,H_e_values_decimals))
# H_e_values$Upper_CI <- as.numeric(round(H_e_values$Upper_CI,H_e_values_decimals))
#
# # # Update the Model column for selection models
# H_e_values$Model[1:length(selection_model_names)] <- selection_model_names
#
# # Extract labels for the different selection coefficients
# selection_labels <- gsub(".*_(s\\d+)_.*", "\\1", selection_model_names)
# # H_e_values$Model[1:length(selection_model_names)] <- selection_labels
#
#
# # Add a new column 'under_selection' to the data frame
# H_e_values$Under_Selection <- ifelse(H_e_values$H_e < neutral_lower_ci, "Yes", "No")
#
# # Filter the rows where 'under_selection' is 'Yes' and exclude 'Neutral'
# Causative_windows_under_selection <- subset(H_e_values, Under_Selection == "Yes" & Model != "Neutral")
# Causative_windows_under_selection <- Causative_windows_under_selection[, -which(names(Causative_windows_under_selection) == "Under_Selection")]
#
# # Sort the results table based on H_e
# H_e_values_sorted <- H_e_values[order(as.numeric(H_e_values$H_e)), ]
#
#
# # # Define the filename with the output directory path
# # filename <- file.path(output_dir, paste("Causative_windows_under_selection",".csv", sep = ""))
# #
# # # Write data to CSV file without quotes
# # write.table(H_e_values_sorted, file = filename, sep = ",", row.names = FALSE, quote = FALSE)
# #
# # # Use the write_latex_table() function to write the data to a LaTeX-compatible text file
# # write_latex_table(
# #   data_frame = H_e_values,
# #   sort_column = "H_e",  # Column used for sorting
# #   output_dir = output_dir,
# #   output_filename = "Causative_windows_under_selection"
# # )
#
# # Print the table using knitr::kable()
# knitr::kable(H_e_values_sorted, row.names = FALSE)
# # Initialize an empty list to store the new table
# hotspot_under_selection_H_e_table <- list()
#
# # If no Hotspot is under selection, then display all hotspots instead
# if (nrow(under_selection_rows) == 0) {
#   under_selection_rows <- Selection_testing_results
# }
#
#
# # Loop through each row in under_selection_rows
# for (i in 1:nrow(under_selection_rows)) {
#   # Extract information for the current ROH-hotspot window
#   current_window <- under_selection_rows[i, "Name"]
#   under_selection <- under_selection_rows[i, "Under_selection"]
#   Hotspot_Avg_H_e <- under_selection_rows[i, "Window_based_Average_H_e"]
#
#
#
#   # Initialize a subtable for the current ROH-hotspot window
#   subtable <- list()
#
#   # Remove the 'Under_Selection' column from the table
#   subtable <- Causative_windows_under_selection
#
#   # Create a list with table name and corresponding data frame
#   table_info <- list(Hotspot_Avg_H_e = Hotspot_Avg_H_e, coefficient_data = subtable)
#   # Add the subtable for the current ROH-hotspot window to the new table
#   hotspot_under_selection_H_e_table[[current_window]] <- c(hotspot_under_selection_H_e_table[[current_window]],table_info)
#   # hotspot_under_selection_H_e_table[[current_window]]$Hotspot_Avg_H_e <- Hotspot_Avg_H_e
# }
#
# # View the new table
# View(hotspot_under_selection_H_e_table)
