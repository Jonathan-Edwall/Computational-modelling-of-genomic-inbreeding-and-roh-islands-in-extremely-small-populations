#
#   # x = Hotspots_and_Causative_windows_comparison_sorted$H_e,
#   # y = Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb,
#   # z = Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq ,
#
#   # x = Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb ,
#   # y = Hotspots_and_Causative_windows_comparison_sorted$H_e,
#   # z = Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq ,
#
#   x = Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq,
#   y = Hotspots_and_Causative_windows_comparison_sorted$H_e,
#   z = Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb  ,
#
#
#   color = ifelse(Hotspots_and_Causative_windows_comparison_sorted$Type == "Hotspot", "red", "blue"),
#   pch = 19,
#   # xlab = "Avg ROH-frequency (%)",
#   # ylab = "Length (Mb)",
#   # zlab = "H_e",
#
#   # xlab = "Length (Mb) ",
#   # ylab = "H_e",
#   # zlab = "Avg ROH-frequency (%)",
#
#   # xlab = "Length (Mb) ",
#   # ylab = "H_e",
#   # zlab = "Avg ROH-frequency (%)",
#
#   xlab = "Avg ROH-frequency (%)",
#   ylab = "H_e",
#   zlab = "Length (Mb)",
#
#
#
#   main = plot_title
# )
# # # Add labels to the points
# # s3d.coords <- s3d$xyz.convert(
# #   Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq,
# #   Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb,
# #   Hotspots_and_Causative_windows_comparison_sorted$H_e
# # )
#
#
# # Add labels to the points
# s3d.coords <- s3d$xyz.convert(
#   Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq,
#   Hotspots_and_Causative_windows_comparison_sorted$H_e,
#   Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb
# )
#
# #
# # # Add jitter to the label positions
# # text(s3d.coords$x + runif(nrow(Hotspots_and_Causative_windows_comparison_sorted), -0.04, 0.04),
# #      s3d.coords$y + runif(nrow(Hotspots_and_Causative_windows_comparison_sorted), -0.04, 0.04),
# #      labels = Hotspots_and_Causative_windows_comparison_sorted$Label,
# #      pos = 3, cex = 0.5)
# #
# #
# text(s3d.coords$x, s3d.coords$y,
#      labels = Hotspots_and_Causative_windows_comparison_sorted$Label,
#      pos = 3, cex = 0.5) # pos=3 means above
# setwd(output_dir)
#
# # Identify indices for selection and non-selection points based on labels starting with '0'
# selection_indices <- grepl("^0", Hotspots_and_Causative_windows_comparison_sorted$Label)
# non_selection_indices <- !selection_indices
#
# # windows(width = 1920 / 96, height = 1080 / 96)  # 96 DPI is default
# # # # Create and save the 3D scatter plot as a PNG file
# # png(filename = "3dplot_Hotspot_Causative_Window_Comparison.png", width = 1920, height = 1080)
#
# # Create the 3D scatter plot with both selection and non-selection points
# s3d <- scatterplot3d(
#   Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq,
#   Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb,
#   Hotspots_and_Causative_windows_comparison_sorted$H_e,
#   color = ifelse(selection_indices, "blue", "red"), # Blue for selection, Red for hotspots
#   pch = 19, # Solid circle
#   xlab = "Avg ROH-frequency (%)",
#   ylab = "Length (Mb)",
#   zlab = "H_e",
#   main = plot_title
# )
# # Convert 3D coordinates for labeling
# s3d.coords <- s3d$xyz.convert(
#   Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq,
#   Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb,
#   Hotspots_and_Causative_windows_comparison_sorted$H_e
# )
# # Subset data for non-selection points
# non_selection_data <- Hotspots_and_Causative_windows_comparison_sorted[non_selection_indices, ]
# # s3d.coords$x[non_selection_indices]
# # 7.888889 6.278889 6.715556 7.655556 6.674444 5.723333 6.143333 5.773333 6.212222
# # custom_jitter_x_axis_hotspots <- c(0,0,-0.05,0,0.1,-0.4,0,0,0)  # Adjust as needed
# custom_jitter_x_axis_hotspots <- c(0,0,0,0,0,0,0,0,0)  # Adjust as needed
#
# # s3d.coords$y[non_selection_indices]
# #3.7711111 2.4511111 1.9444444 1.5644444 2.5355556 3.1066667 2.6066667 3.1466667 0.8977778
# # custom_jitter_y_axis_hotspots <- c(0,-0.7,-0.65,0,0,-0.3,0,0.1,0)   # Adjust as needed
# custom_jitter_y_axis_hotspots <- c(0,0,0,0,0,0,0,0,0)   # Adjust as needed
#
# # Add labels for non-selection points without jitter
# text(s3d.coords$x[non_selection_indices]+ custom_jitter_x_axis_hotspots,
#      s3d.coords$y[non_selection_indices]+ custom_jitter_y_axis_hotspots,
#      labels = Hotspots_and_Causative_windows_comparison_sorted$Label[non_selection_indices],
#      pos = 3, cex = 0.7)
#
#
#
# selection_data <- Hotspots_and_Causative_windows_comparison_sorted[selection_indices, ]
# custom_jitter_x_axis_sel_coeff <- c(0.2,0.05,0.025,0,-0.05,0,0)
# # custom_jitter_x_axis_sel_coeff <- c(0,0,0,0,0,0,0)
# custom_jitter_y_axis_sel_coeff <- c(-0.25,0,-0.57,-0.1,-0.6,0,0)
# # custom_jitter_y_axis_sel_coeff <- c(0,0,0,0,0,0,0)
# # Apply jitter to selection point labels
# label_jitter <- runif(sum(selection_indices), 0, 0.2) # Small random jitter
# # Add labels for selection points with jitter
# text(s3d.coords$x[selection_indices] + custom_jitter_x_axis_sel_coeff,
#      s3d.coords$y[selection_indices] + custom_jitter_y_axis_sel_coeff,
#      labels = Hotspots_and_Causative_windows_comparison_sorted$Label[selection_indices],
#      pos = 3, cex = 0.7)
# # Close the graphics device
# dev.off()
# kable(selection_data,row.names = FALSE)
# kable(non_selection_data,row.names = FALSE)
# # Create the 3D scatter plot with both selection and non-selection points
# s3d <- scatterplot3d(
#   Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq,
#   Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb,
#   Hotspots_and_Causative_windows_comparison_sorted$H_e,
#   color = ifelse(selection_indices, "blue", "red"), # Blue for selection, Red for hotspots
#   pch = 19, # Solid circle
#   xlab = "Avg ROH-frequency (%)",
#   ylab = "Length (Mb)",
#   zlab = "H_e",
#   main = plot_title
# )
#
# # Convert 3D coordinates for labeling
# s3d.coords <- s3d$xyz.convert(
#   Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq,
#   Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb,
#   Hotspots_and_Causative_windows_comparison_sorted$H_e
# )
#
# # Generate small random jitter for the y-axis (simulating z-axis movement)
# y_jitter <- runif(sum(selection_indices), -0.02, 0.02)
#
# # Adjust y-coordinates for selection labels only
# jittered_y <- s3d.coords$y[selection_indices] + y_jitter
#
# # Add labels for selection points with y-axis adjustment
# text(s3d.coords$x[selection_indices],
#      jittered_y,
#      labels = Hotspots_and_Causative_windows_comparison_sorted$Label[selection_indices],
#      pos = 3, cex = 0.7)
# #
# # Add labels for non-selection points without jitter
# text(s3d.coords$x[non_selection_indices],
#      s3d.coords$y[non_selection_indices],
#      labels = Hotspots_and_Causative_windows_comparison_sorted$Label[non_selection_indices],
#      pos = 3, cex = 0.7)
# Sort the data frame based on average fixation time, in descending order
kable(Hotspots_and_Causative_windows_comparison[order(-Hotspots_and_Causative_windows_comparison$ROH_Freq), ])
kable(Hotspots_and_Causative_windows_comparison[order(-Hotspots_and_Causative_windows_comparison$H_e), ])
# # Load the required packages
# library(rgl)
#
# # Identify indices for selection and non-selection points based on labels starting with '0'
# selection_indices <- grepl("^0", Hotspots_and_Causative_windows_comparison_sorted$Label)
# non_selection_indices <- !selection_indices
#
# # Open a new 3D plotting device
# open3d()
#
# # Plot with rgl
# plot3d(
#   Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq,
#   Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb,
#   Hotspots_and_Causative_windows_comparison_sorted$H_e,
#   col = ifelse(selection_indices, "blue", "red"), # Blue for selection, Red for hotspots
#   type = 's', # Use points
#   xlab = "Avg ROH-frequency (%)",
#   ylab = "Length (Mb)",
#   zlab = "H_e",
#   main = plot_title
# )
#
# # Convert 3D coordinates for labeling
# s3d_coords <- cbind(
#   Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq,
#   Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb,
#   Hotspots_and_Causative_windows_comparison_sorted$H_e
# )
#
# # Add labels for non-selection points with custom jitter
# text3d(
#   s3d_coords[non_selection_indices, ] + cbind(custom_jitter_x_axis_hotspots, custom_jitter_y_axis_hotspots, 0),
#   texts = Hotspots_and_Causative_windows_comparison_sorted$Label[non_selection_indices],
#   col = "red", # Color of the text
#   cex = 0.7
# )
#
# # Add labels for selection points with custom jitter
# text3d(
#   s3d_coords[selection_indices, ] + cbind(custom_jitter_x_axis_sel_coeff, custom_jitter_y_axis_sel_coeff, label_jitter),
#   texts = Hotspots_and_Causative_windows_comparison_sorted$Label[selection_indices],
#   col = "blue", # Color of the text
#   cex = 0.7
# )
# # Save the 3D plot as a PNG file
# rgl.postscript("3dplot_Hotspot_Causative_Window_Comparison.png", fmt = "png")
# # Close the 3D device
# rgl.close()
# Min-max-scaling normalization function, that normalizes a vector of values
min_max_normalization_fun <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
### Min max scaling ###
# Normalize Lengths_Mb
Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb)
# Normalize ROH Frequency
Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq)
# Normalize H_e
Hotspots_and_Causative_windows_comparison_sorted$H_e_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$H_e)
# Modify the labels by removing "Hotspot_" prefix and "_window" suffix from hotspot models
Hotspots_and_Causative_windows_comparison_sorted$Label <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
gsub("Hotspot_|_window", "", Hotspots_and_Causative_windows_comparison_sorted$Model),
Hotspots_and_Causative_windows_comparison_sorted$Model
)
# Create a new column for identifying the type
Hotspots_and_Causative_windows_comparison_sorted$Type <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
"Hotspot",
"Selection Coefficient"
)
plot_title <- paste("Normalized ROH Hotspot(s) & Causative Windows comparison")
# Create the 3D scatter plot
s3d <- scatterplot3d(
Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb_Normalized,
Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq_Normalized,
Hotspots_and_Causative_windows_comparison_sorted$H_e_Normalized,
color = ifelse(Hotspots_and_Causative_windows_comparison_sorted$Type == "Hotspot", "red", "blue"),
pch = 19, # Solid circle
xlab = "Normalized Lengths",
ylab = "Normalized Mean ROH Frequency",
zlab = "Normalized H_e",
main = plot_title
)
# Add labels to the points
s3d.coords <- s3d$xyz.convert(
Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb_Normalized,
Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq_Normalized,
Hotspots_and_Causative_windows_comparison_sorted$H_e_Normalized
)
text(s3d.coords$x, s3d.coords$y,
labels = Hotspots_and_Causative_windows_comparison_sorted$Label,
pos = 3, cex = 0.5) # pos=3 means above
# Min max scaling
# Normalize Lengths_Mb
Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb)
# Normalize ROH Frequency
Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq)
# Normalize H_e
Hotspots_and_Causative_windows_comparison_sorted$H_e_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$H_e)
# Modify the labels by removing "Hotspot_" prefix and "_window" suffix from hotspot models
Hotspots_and_Causative_windows_comparison_sorted$Label <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
gsub("Hotspot_|_window", "", Hotspots_and_Causative_windows_comparison_sorted$Model),
Hotspots_and_Causative_windows_comparison_sorted$Model
)
# Create a new column for identifying the type
Hotspots_and_Causative_windows_comparison_sorted$Type <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
"Hotspot",
"Selection Coefficient"
)
plot_title <- paste("Length And Average ROH % Comparison - ROH Hotspots & Causative Windows")
# Create the scatter plot with ggplot2
p <- ggplot(Hotspots_and_Causative_windows_comparison_sorted, aes(x = Lengths_Mb_Normalized, y = ROH_Freq_Normalized)) +
geom_point(aes(color = Type), size = 3) +                # Use 'Type' for color mapping
scale_color_manual(values = c("Hotspot" = "red", "Selection Coefficient" = "blue")) +
labs(title = plot_title,
x = "Normalized Lengths",
y = "Normalized Mean ROH Frequency",
color = "Type") +                                  # Legend title
theme_minimal() +
theme(legend.position = "top") +                         # Position legend at the top
geom_text(aes(label = Label), vjust = -1, size = 3)      # Add text labels with modified labels
print(p)
# # Save the plot with specified dimensions
# ggsave("Hotspots_and_Selection_Coefficients_plot.png", plot = p, width = 10, height = 8)
generate_H_e_plot <- function(hotspot_name, empirical_value) {
plotting_data <- data.frame()
# Initialize plotting_data by directly selecting relevant columns from causative_variant_window_results_df
plotting_data <- data.frame(
Lower_CI = causative_variant_window_results_df$H_e_lower_CI,
Upper_CI = causative_variant_window_results_df$H_e_upper_CI,
Model = causative_variant_window_results_df$Sel.coeff,
sim_mean_value = causative_variant_window_results_df$Avg_H_e
)
# Add a column indicating whether the empirical H_e is within the CI of each model
plotting_data$Empirical_Within_CI <- (plotting_data$Lower_CI <= empirical_value) & (plotting_data$Upper_CI >= empirical_value)
cat(plotting_data$Empirical_Within_CI)
# print(plotting_data)
# Determine the y-axis limits
min_y <- min(c(plotting_data$Lower_CI, empirical_value))
max_y <- max(c(plotting_data$Upper_CI, empirical_value))
# Create the plot
p <- ggplot(plotting_data, aes(x = Model, y = sim_mean_value, color = Empirical_Within_CI)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
geom_hline(aes(yintercept = empirical_value), linetype = "dashed", color = "red", linewidth = 1, show.legend = TRUE) +
labs(title = paste("Avg H_e % and CI for", hotspot_name),
x = "Model",
y = "H_e",
color = "Hotspot Avg H_e %\nwithin CI") +
scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "black"), labels = c("TRUE" = "Inside CI", "FALSE" = "Outside CI")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(limits = c(min_y, max_y),
breaks = round(seq(min_y, max_y, length.out = 10), 5))
# Print the plot
print(p)
# Print which models the empirical H_e is inside of
inside_models <- plotting_data$Model[plotting_data$Empirical_Within_CI]
outside_models <- plotting_data$Model[!plotting_data$Empirical_Within_CI]
cat("Models where empirical H_e is within CI for", hotspot_name, ":\n")
print(inside_models)
cat("\nModels where empirical H_e is outside CI for", hotspot_name, ":\n")
print(outside_models)
}
# Example call to the function
# generate_H_e_plot("Hotspot_chr1_window_1", 0.234)
# Loop through each hotspot and generate plots
for (i in 1:nrow(under_selection_rows)) {
hotspot_name <- Selection_testing_results$Name[i]
empirical_value <- Selection_testing_results$Window_based_Average_H_e[i]
generate_H_e_plot(hotspot_name, empirical_value)
}
generate_H_e_plot <- function(hotspot_name, empirical_value) {
plotting_data <- data.frame()
# Initialize plotting_data by directly selecting relevant columns from causative_variant_window_results_df
plotting_data <- data.frame(
Lower_CI = causative_variant_window_results_df$Lower_ci,
Upper_CI = causative_variant_window_results_df$Upper_ci,
Model = causative_variant_window_results_df$Sel.coeff,
sim_mean_value = causative_variant_window_results_df$Length_Mb
)
# Add a column indicating whether the empirical H_e is within the CI of each model
plotting_data$Empirical_Within_CI <- (plotting_data$Lower_CI <= empirical_value) & (plotting_data$Upper_CI >= empirical_value)
cat(plotting_data$Empirical_Within_CI)
# print(plotting_data)
# Determine the y-axis limits
min_y <- min(c(plotting_data$Lower_CI, empirical_value))
max_y <- max(c(plotting_data$Upper_CI, empirical_value))
# Create the plot
p <- ggplot(plotting_data, aes(x = Model, y = sim_mean_value, color = Empirical_Within_CI)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
geom_hline(aes(yintercept = empirical_value), linetype = "dashed", color = "red", linewidth = 1, show.legend = TRUE) +
labs(title = paste("Length (Mb) and CI for", hotspot_name),
x = "Model",
y = "Length (Mb)",
color = "Hotspot Avg H_e %\nwithin CI") +
scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "black"), labels = c("TRUE" = "Inside CI", "FALSE" = "Outside CI")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(limits = c(min_y, max_y),
breaks = round(seq(min_y, max_y, length.out = 10), 5))
# Print the plot
print(p)
# Print which models the empirical H_e is inside of
inside_models <- plotting_data$Model[plotting_data$Empirical_Within_CI]
outside_models <- plotting_data$Model[!plotting_data$Empirical_Within_CI]
cat("Models where empirical H_e is within CI for", hotspot_name, ":\n")
print(inside_models)
cat("\nModels where empirical H_e is outside CI for", hotspot_name, ":\n")
print(outside_models)
}
# Example call to the function
# generate_H_e_plot("Hotspot_chr1_window_1", 0.234)
Hotspot_windows_sel_strength_test <- Hotspots_and_Causative_windows_comparison[grepl("Hotspot", Hotspots_and_Causative_windows_comparison$Model), ]
# Loop through each hotspot and generate plots
for (i in 1:nrow(Hotspot_windows_sel_strength_test)) {
hotspot_name <- Hotspot_windows_sel_strength_test$Model[i]
empirical_value <- Hotspot_windows_sel_strength_test$Lengths_Mb[i]
generate_H_e_plot(hotspot_name, empirical_value)
}
generate_H_e_plot <- function(hotspot_name, empirical_value) {
plotting_data <- data.frame()
# Initialize plotting_data by directly selecting relevant columns from causative_variant_window_results_df
plotting_data <- data.frame(
Lower_CI = causative_variant_window_results_df$lower_ci,
Upper_CI = causative_variant_window_results_df$upper_ci,
Model = causative_variant_window_results_df$Sel.coeff,
sim_mean_value = causative_variant_window_results_df$ROH_freq
)
# Add a column indicating whether the empirical H_e is within the CI of each model
plotting_data$Empirical_Within_CI <- (plotting_data$Lower_CI <= empirical_value) & (plotting_data$Upper_CI >= empirical_value)
cat(plotting_data$Empirical_Within_CI)
# print(plotting_data)
# Determine the y-axis limits
min_y <- min(c(plotting_data$Lower_CI, empirical_value))
max_y <- max(c(plotting_data$Upper_CI, empirical_value))
# Create the plot
p <- ggplot(plotting_data, aes(x = Model, y = sim_mean_value, color = Empirical_Within_CI)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
geom_hline(aes(yintercept = empirical_value), linetype = "dashed", color = "red", linewidth = 1, show.legend = TRUE) +
labs(title = paste("ROH-frequency Comparison for", hotspot_name),
x = "Model",
y = "ROH Freq (%)",
color = "Hotspot ROH Freq (%) %\nwithin CI") +
scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "black"), labels = c("TRUE" = "Inside CI", "FALSE" = "Outside CI")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(limits = c(min_y, max_y),
breaks = round(seq(min_y, max_y, length.out = 10), 5))
# Print the plot
print(p)
# Print which models the empirical H_e is inside of
inside_models <- plotting_data$Model[plotting_data$Empirical_Within_CI]
outside_models <- plotting_data$Model[!plotting_data$Empirical_Within_CI]
cat("Models where empirical H_e is within CI for", hotspot_name, ":\n")
print(inside_models)
cat("\nModels where empirical H_e is outside CI for", hotspot_name, ":\n")
print(outside_models)
}
# Example call to the function
# generate_H_e_plot("Hotspot_chr1_window_1", 0.234)
Hotspot_windows_sel_strength_test <- Hotspots_and_Causative_windows_comparison[grepl("Hotspot", Hotspots_and_Causative_windows_comparison$Model), ]
# Loop through each hotspot and generate plots
for (i in 1:nrow(Hotspot_windows_sel_strength_test)) {
hotspot_name <- Hotspot_windows_sel_strength_test$Model[i]
empirical_value <- Hotspot_windows_sel_strength_test$ROH_Freq[i]
generate_H_e_plot(hotspot_name, empirical_value)
}
# # Initialize empty vectors to store selection coefficients and thresholds
# selection_labels <- c()
# thresholds <- c()
#
# # Extract selection coefficients and thresholds from the first hotspot data
# hotspot_name <- names(hotspot_under_selection_H_e_table)[1]
# hotspot_data <- hotspot_under_selection_H_e_table[[hotspot_name]]
#
# # Extract selection coefficient names and fifth percentile H_e thresholds
# selection_model_names <- names(hotspot_data)[-length(hotspot_data)]  # Exclude the Hotspot_Avg_H_e entry
#
# for (selection_model_name in selection_model_names) {
#   # Formatting the selection coefficient for when displaying it. Removing "chr[0-9]" and adding a decimal point to the selection coefficient
# formatted_selection_coefficient_label <- sub("^.*_s(0?)(\\d+)_chr\\d+$", "s=\\1.\\2", selection_model_name)
#
#   selection_labels <- c(selection_labels,formatted_selection_coefficient_label)
#
#   thresholds <- c(thresholds, hotspot_data[[selection_model_name]]$fifth_percentile_H_e_threshold)
# }
#
# # Create a dataframe with selection coefficients and thresholds
# selection_table <- data.frame(
#   Selection_Coefficient = selection_labels,
#   H_e_Threshold = as.numeric(thresholds)
# )
#
# # Print the table using knitr::kable()
# knitr::kable(selection_table, row.names = FALSE)
# # H_e_hotspot_visualization creates a visualization of the H_e distribution of the different selection coefficients, in comparison to each ROH-hotspot
# H_e_hotspot_visualization <- function(hotspot_name, hotspot_data) {
#
#   # Extract the Hotspot_Avg_H_e value
#   hotspot_avg_H_e <- hotspot_data$Hotspot_Avg_H_e
#
#   # Extract selection coefficient names and fifth percentile H_e thresholds
#   selection_coefficients <- names(hotspot_data)[-length(hotspot_data)]  # Exclude the Hotspot_Avg_H_e entry
#
#   thresholds <- sapply(hotspot_data[-length(hotspot_data)], function(x) x$fifth_percentile_H_e_threshold)
#
#   # Extract labels for the different selection coefficients
#   selection_labels <- gsub(".*_(s\\d+)_.*", "\\1", selection_coefficients)
#
#   # Create a dataframe with selection coefficients and thresholds
#   df <- data.frame(
#     Selection_Coefficient = selection_labels,
#     H_e = thresholds
#   )
#
#   # Plot the visualization
#   p <- ggplot(df, aes(x = Selection_Coefficient, y = H_e)) +
#     geom_point(size = 3, color = "blue") +
#     geom_hline(yintercept = hotspot_avg_H_e, linetype = "dashed", color = "red", size = 1) +
#     geom_text(aes(x = 1, y = hotspot_avg_H_e, label = paste("Hotspot Avg H_e =", round(hotspot_avg_H_e, 5))),
#               color = "red", hjust = -0.1, vjust = -1) +
#     labs(title = paste("5th percentile of the extreme H_e values", hotspot_name),
#          x = "Selection Coefficient",
#          y = "H_e Value") +
#     theme_minimal() +
#     theme(axis.text.x = element_text(angle = 45, hjust = 1))
#
#   return(p)
# }
#
# # Analyze and visualize each ROH hotspot independently
# for (hotspot_name in names(hotspot_under_selection_H_e_table)) {
#   cat("\nHotspot Name:", hotspot_name, "\n")
#
#   hotspot_data <- hotspot_under_selection_H_e_table[[hotspot_name]]
#   plot <- H_e_hotspot_visualization(hotspot_name, hotspot_data)
#   print(plot)
# }
causative_variant_window_results_df
