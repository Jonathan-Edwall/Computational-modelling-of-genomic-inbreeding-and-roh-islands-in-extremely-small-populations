#
#   # Add the subtable to the list with the selection coefficient as its name
#   Selection_Strength_test_results_tables[[selection_coefficient]]$results <- subtable
#
#
#
#   # Extracting the ROH-hotspot threshold value from the suffix of the filename
#     parts <- unlist(strsplit(selection_strength_testing_files[i], "threshold_")) # Split the string by "threshold_"
#     # # Extract the decimal number using regular expressions
#     fifth_percentile_H_e_selection_coefficient <- as.numeric(gsub("\\.tsv", "", unlist(strsplit(parts[length(parts)], "_"))[1]))
#     Selection_Strength_test_results_tables[[selection_coefficient]]$fifth_percentile_H_e_threshold <- fifth_percentile_H_e_selection_coefficient
#
# }
#
# # # View the Selection_Strength_test_results_tables
# # Selection_Strength_test_results_tables
#
#
# # View the dataframe
# # View(Selection_Strength_test_results_tables)
# Initialize vectors to store H_e values and CI bounds for the different selection coefficients
selection_model_avg_values <- c()
selection_model_lower_ci <- c()
selection_model_upper_ci <- c()
selection_model_names <- c()
# Loop through each selection_coefficient in H_e_5th_percentiles_Selection_models
for (selection_coefficient in names(window_H_e_causative_variant_tables)) {
# Formatting the selection coefficient for when displaying it. Removing "chr[0-9]" and adding a decimal point to the selection coefficient
formatted_selection_coefficient_labels <- sub("s(\\d)(\\d+)_.*", "s=\\1.\\2", selection_coefficient)
CI <- window_H_e_causative_variant_tables[[selection_coefficient]]$SE_CI_Estimated_Mean_Population_H_e
# Append values to the lists
selection_model_names <- c(selection_model_names,formatted_selection_coefficient_labels)
selection_model_avg_values <- c(selection_model_avg_values, window_H_e_causative_variant_tables[[selection_coefficient]]$Estimated_Mean_Population_H_e)
selection_model_lower_ci <- c(selection_model_lower_ci, CI[1])
selection_model_upper_ci <- c(selection_model_upper_ci, CI[2])
}
# Extract neutral model values and CI bounds
neutral_avg_H_e_5th_percentile <- H_e_5th_percentiles_Neutral_model[["Estimated_Mean_H_e_5th_percentile"]]
neutral_lower_ci <- H_e_5th_percentiles_Neutral_model[["SE_CI_Estimated_Mean_H_e_5th_percentile"]][1]
neutral_upper_ci <- H_e_5th_percentiles_Neutral_model[["SE_CI_Estimated_Mean_H_e_5th_percentile"]][2]
# Combine all values into a data frame
H_e_values <- data.frame(
Model = c(selection_model_names, "Neutral"),
H_e = c(selection_model_avg_values, neutral_avg_H_e_5th_percentile),
Lower_CI = c(selection_model_lower_ci, neutral_lower_ci),
Upper_CI = c(selection_model_upper_ci, neutral_upper_ci)
)
# Format all numeric values to have the number of decimals defined by H_e_values_decimals
H_e_values$H_e <- round(H_e_values$H_e,H_e_values_decimals)
H_e_values$Lower_CI <- as.numeric(round(H_e_values$Lower_CI,H_e_values_decimals))
H_e_values$Upper_CI <- as.numeric(round(H_e_values$Upper_CI,H_e_values_decimals))
# # Update the Model column for selection models
H_e_values$Model[1:length(selection_model_names)] <- selection_model_names
# Extract labels for the different selection coefficients
selection_labels <- gsub(".*_(s\\d+)_.*", "\\1", selection_model_names)
# H_e_values$Model[1:length(selection_model_names)] <- selection_labels
# Add a new column 'under_selection' to the data frame
H_e_values$Under_Selection <- ifelse(H_e_values$H_e < neutral_lower_ci, "Yes", "No")
# Filter the rows where 'under_selection' is 'Yes' and exclude 'Neutral'
Causative_windows_under_selection <- subset(H_e_values, Under_Selection == "Yes" & Model != "Neutral")
Causative_windows_under_selection <- Causative_windows_under_selection[, -which(names(Causative_windows_under_selection) == "Under_Selection")]
H_e_Causative_windows <- subset(H_e_values, Model != "Neutral")
# Sort the results table based on H_e
H_e_values_sorted <- H_e_values[order(as.numeric(H_e_values$H_e)), ]
# Define the filename with the output directory path
filename <- file.path(output_dir, paste("Causative_windows_under_selection",".csv", sep = ""))
# Write data to CSV file without quotes
write.table(H_e_values_sorted, file = filename, sep = ",", row.names = FALSE, quote = FALSE)
# Use the write_latex_table() function to write the data to a LaTeX-compatible text file
write_latex_table(
data_frame = H_e_values,
sort_column = "H_e",  # Column used for sorting
output_dir = output_dir,
output_filename = "Causative_windows_under_selection"
)
# Print the table using knitr::kable()
knitr::kable(H_e_values_sorted, row.names = FALSE)
# Initialize an empty list to store the new table
hotspot_under_selection_H_e_table <- list()
# If no Hotspot is under selection, then display all hotspots instead
if (nrow(under_selection_rows) == 0) {
under_selection_rows <- Selection_testing_results
}
# Loop through each row in under_selection_rows
for (i in 1:nrow(under_selection_rows)) {
# Extract information for the current ROH-hotspot window
current_window <- under_selection_rows[i, "Name"]
under_selection <- under_selection_rows[i, "Under_selection"]
Hotspot_Avg_H_e <- under_selection_rows[i, "Window_based_Average_H_e"]
# Initialize a subtable for the current ROH-hotspot window
subtable <- list()
# Remove the 'Under_Selection' column from the table
subtable <- Causative_windows_under_selection
# # Loop through each selection coefficient
# for (j in seq_along(Selection_Strength_test_results_tables)) {
#   # Get the selection coefficient and its corresponding table
#   selection_coefficient <- names(Selection_Strength_test_results_tables)[j]
#   table <- Selection_Strength_test_results_tables[[j]]
#
#   # Extract the filename and the fifth percentile H_e threshold
#   filename <- table$file_name
#   fifth_percentile_H_e_threshold <- table$fifth_percentile_H_e_threshold
#
#   if( fifth_percentile_H_e_threshold < fifth_percentile_H_e_neutral_model) {
#
#   # Create a subtable for the current selection coefficient
#   subtable[[selection_coefficient]] <- list(
#     fifth_percentile_H_e_threshold = fifth_percentile_H_e_threshold
#   )
#   }
# }
# Create a list with table name and corresponding data frame
table_info <- list(Hotspot_Avg_H_e = Hotspot_Avg_H_e, coefficient_data = subtable)
# Add the subtable for the current ROH-hotspot window to the new table
hotspot_under_selection_H_e_table[[current_window]] <- c(hotspot_under_selection_H_e_table[[current_window]],table_info)
# hotspot_under_selection_H_e_table[[current_window]]$Hotspot_Avg_H_e <- Hotspot_Avg_H_e
}
# View the new table
# View(hotspot_under_selection_H_e_table)
# Initialize an empty data frame to store the results
results_df <- data.frame()
# hotspot_avg_H_e <- Selection_testing_results$Window_based_Average_H_e
hotspot_avg_H_e <- c()
# hotspot_under_selection <- Selection_testing_results$Under_selection
hotspot_under_selection <- c()
hotspot_lengths_mb <- c()
hotspot_names <- c()
hotspot_avg_roh_freq <- c()
for (i in seq_along(empirical_hotspot_tables)) {
hotspot_name <- names(empirical_hotspot_tables)[i]
if (hotspot_name %in% under_selection_rows$Name) {
matching_row <- Selection_testing_results[Selection_testing_results$Name == hotspot_name, ]
hotspot_avg_H_e <- c(hotspot_avg_H_e,matching_row$Window_based_Average_H_e)
# hotspot_under_selection <- matching_row$Under_selection
hotspot_under_selection <- c(hotspot_under_selection,matching_row$Under_selection)
hotspot_length_mb <- empirical_hotspot_tables[[i]][["Hotspot_length_Mb"]]
hotspot_lengths_mb <- c(hotspot_lengths_mb,hotspot_length_mb)
hotspot_names <- c(hotspot_names,hotspot_name)
hotspot_avg_freq <- empirical_hotspot_tables[[i]][["Avg_frequency"]]
hotspot_avg_roh_freq <- c(hotspot_avg_roh_freq,hotspot_avg_freq)
# hotspot_avg_roh_freq <- c(hotspot_avg_roh_freq,empirical_hotspot_tables[[i]][["Avg_frequency"]])
} else {
}
}
# Scaling to percentage
hotspot_avg_roh_freq <- 100*hotspot_avg_roh_freq
causative_variant_windows_he <- subset(H_e_values, Model != "Neutral")
selection_coefficient_variant_windows_length_mb <- causative_variant_window_results_df$Length_Mb
selection_coefficient_variant_windows_length_mb_lower_ci <- causative_variant_window_results_df$Length_lower_CI
selection_coefficient_variant_windows_length_mb_upper_ci <- causative_variant_window_results_df$Length_Upper_CI
selection_coefficient_variant_windows_ROH_freq <- causative_variant_window_results_df$ROH_freq
selection_coefficient_variant_windows_ROH_freq_lower_ci <- causative_variant_window_results_df$ROH_freq_lower_CI
selection_coefficient_variant_windows_ROH_freq_upper_ci <- causative_variant_window_results_df$ROH_freq_upper_CI
selection_coefficient_variant_windows_avg_H_e <- causative_variant_window_results_df$Avg_H_e
selection_coefficient_variant_windows_H_e_lower_ci <- causative_variant_window_results_df$H_e_lower_CI
selection_coefficient_variant_windows_H_e_upper_ci <- causative_variant_window_results_df$H_e_upper_CI
# selection_coefficient_variant_windows_under_selection <- causative_variant_windows_he$Under_Selection
selection_coefficient_name <- causative_variant_window_results_df$Sel.coeff
empirical_na <- NA
# Combine all values into a data frame
Hotspots_and_Causative_windows_comparison <- data.frame(
Model = c(hotspot_names, selection_coefficient_name),
Lengths_Mb = c(hotspot_lengths_mb, selection_coefficient_variant_windows_length_mb),
Length_lower_ci = c(rep(NA, length(hotspot_names)), selection_coefficient_variant_windows_length_mb_lower_ci),
Length_upper_ci = c(rep(NA, length(hotspot_names)), selection_coefficient_variant_windows_length_mb_upper_ci),
ROH_Freq = c(hotspot_avg_roh_freq, selection_coefficient_variant_windows_ROH_freq),
ROH_freq_lower_ci = c(rep(NA, length(hotspot_names)), selection_coefficient_variant_windows_ROH_freq_lower_ci),
ROH_freq_upper_ci = c(rep(NA, length(hotspot_names)), selection_coefficient_variant_windows_ROH_freq_upper_ci),
H_e = c(hotspot_avg_H_e, selection_coefficient_variant_windows_avg_H_e),
H_e_lower_ci = c(rep(NA, length(hotspot_names)), selection_coefficient_variant_windows_H_e_lower_ci),
H_e_upper_ci = c(rep(NA, length(hotspot_names)), selection_coefficient_variant_windows_H_e_upper_ci)
)
Hotspots_and_Causative_windows_comparison$ROH_Freq <- round(Hotspots_and_Causative_windows_comparison$ROH_Freq,ROH_frequency_decimals)
Hotspots_and_Causative_windows_comparison$H_e <- round(Hotspots_and_Causative_windows_comparison$H_e,H_e_values_decimals)
Hotspots_and_Causative_windows_comparison$Lengths_Mb <- round(Hotspots_and_Causative_windows_comparison$Lengths_Mb,Window_lengths_decimals)
# # Sort the data frame based on length
# Hotspots_and_Causative_windows_comparison_sorted <- Hotspots_and_Causative_windows_comparison[order(-Hotspots_and_Causative_windows_comparison$Lengths_Mb), ]
# Sort the data frame based on the 'Model' column in descending order
Hotspots_and_Causative_windows_comparison_sorted <- Hotspots_and_Causative_windows_comparison[order(Hotspots_and_Causative_windows_comparison$Model, decreasing = TRUE), ]
# Now, create a new data frame with confidence intervals as tuples
Hotspots_and_Causative_windows_CI_tuples <- data.frame(
Model = Hotspots_and_Causative_windows_comparison$Model,
Lengths_Mb = Hotspots_and_Causative_windows_comparison$Lengths_Mb,
Length_CI = ifelse(is.na(Hotspots_and_Causative_windows_comparison$Length_lower_ci), NA,
paste0("(", Hotspots_and_Causative_windows_comparison$Length_lower_ci, ", ", Hotspots_and_Causative_windows_comparison$Length_upper_ci, ")")),
ROH_Freq = Hotspots_and_Causative_windows_comparison$ROH_Freq,
ROH_Freq_CI = ifelse(is.na(Hotspots_and_Causative_windows_comparison$ROH_freq_lower_ci), NA,
paste0("(", Hotspots_and_Causative_windows_comparison$ROH_freq_lower_ci, ", ", Hotspots_and_Causative_windows_comparison$ROH_freq_upper_ci, ")")),
H_e = Hotspots_and_Causative_windows_comparison$H_e,
H_e_CI = ifelse(is.na(Hotspots_and_Causative_windows_comparison$H_e_lower_ci), NA,
paste0("(", Hotspots_and_Causative_windows_comparison$H_e_lower_ci, ", ", Hotspots_and_Causative_windows_comparison$H_e_upper_ci, ")"))
)
# Sort the new data frame with tuples based on the 'Model' column in descending order
Hotspots_and_Causative_windows_CI_tuples_sorted <- Hotspots_and_Causative_windows_CI_tuples[order(Hotspots_and_Causative_windows_CI_tuples$Model, decreasing = TRUE), ]
Hotspots_and_Causative_windows_CI_tuples_sorted$Model <- gsub("_", "\\_", Hotspots_and_Causative_windows_CI_tuples_sorted$Model, fixed = TRUE)
Hotspots_and_Causative_windows_CI_tuples_sorted$Length_CI <- gsub(",", "\\,", Hotspots_and_Causative_windows_CI_tuples_sorted$Length_CI, fixed = TRUE)
Hotspots_and_Causative_windows_CI_tuples_sorted$ROH_Freq_CI <- gsub(",", "\\,", Hotspots_and_Causative_windows_CI_tuples_sorted$ROH_Freq_CI, fixed = TRUE)
Hotspots_and_Causative_windows_CI_tuples_sorted$H_e_CI <- gsub(",", "\\,", Hotspots_and_Causative_windows_CI_tuples_sorted$H_e_CI, fixed = TRUE)
# Define the filename for the new data frame with CI tuples
filename_tuples <- file.path(output_dir, paste("ROH_Hotspots_and_Causative_Windows_comparison",".csv", sep = ""))
# Write the new sorted data frame to CSV file without quotes
write.table(Hotspots_and_Causative_windows_CI_tuples_sorted, file = filename_tuples, sep = ",", row.names = FALSE, quote = FALSE)
# # Define the filename with the output directory path
# filename <- file.path(output_dir, paste("ROH_Hotspots_and_Causative_Windows_comparison",".csv", sep = ""))
#
# # Write data to CSV file without quotes
# write.table(Hotspots_and_Causative_windows_comparison_sorted_latex, file = filename, sep = ",", row.names = FALSE, quote = FALSE)
kable(Hotspots_and_Causative_windows_comparison_sorted, row.names = FALSE)
# View(causative_variant_window_results_df)
setwd(output_dir)
# plot_title <- paste("Length And Average ROH % Comparison - ROH Hotspots & Causative Windows")
plot_title <- paste("ROH Hotspot(s) & Causative Windows comparison")
# Modify the labels by removing "Hotspot_" prefix and "_window" suffix from hotspot models
Hotspots_and_Causative_windows_comparison_sorted$Label <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
gsub("Hotspot_|_window", "", Hotspots_and_Causative_windows_comparison_sorted$Model),
Hotspots_and_Causative_windows_comparison_sorted$Model
)
# Removing the "s=" part from the selection coefficients for the plot display
Hotspots_and_Causative_windows_comparison_sorted$Label <- gsub("^s=", "", Hotspots_and_Causative_windows_comparison_sorted$Label)
# Create a new column for identifying the type
Hotspots_and_Causative_windows_comparison_sorted$Type <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
"Hotspot",
"Selection Coefficient"
)
# Generate a color palette for the hotspots
hotspot_models <- unique(Hotspots_and_Causative_windows_comparison_sorted$Model[Hotspots_and_Causative_windows_comparison_sorted$Type == "Hotspot"])
num_hotspots <- length(hotspot_models)
# Choose the color palette based on the number of hotspots
if (num_hotspots == 2) {
color_palette_name <- "Set2"
} else {
color_palette_name <- "Set3"
}
# Get the colors for the hotspots
hotspot_colors <- setNames(brewer.pal(n = num_hotspots, name = color_palette_name), hotspot_models)
# Assign colors to each point
Hotspots_and_Causative_windows_comparison_sorted$Color <- ifelse(
Hotspots_and_Causative_windows_comparison_sorted$Type == "Hotspot",
hotspot_colors[Hotspots_and_Causative_windows_comparison_sorted$Model],
"blue"
)
x_value <- Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq
x_axis_label <- "Avg ROH-frequency (%)"
y_value <- Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb
y_axis_label <- "Length (Mb)"
z_value <- Hotspots_and_Causative_windows_comparison_sorted$H_e
z_axis_label <- "Avg H_e"
# x_value <- Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb
# x_axis_label <- "Length (Mb)"
# y_value <- Hotspots_and_Causative_windows_comparison_sorted$H_e
# y_axis_label <- "Avg H_e"
# z_value <- Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq
# z_axis_label <- "Avg ROH-frequency (%)"
x_value <- Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq
x_axis_label <- "Avg ROH-frequency (%)"
y_value <- Hotspots_and_Causative_windows_comparison_sorted$H_e
y_axis_label <- "Avg H_e"
z_value <- Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb
z_axis_label <- "Length (Mb)"
# x_value <- Hotspots_and_Causative_windows_comparison_sorted$H_e
# x_axis_label <- "Avg H_e"
# y_value <- Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq
# y_axis_label <- "Avg ROH-frequency (%)"
# z_value <- Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb
# z_axis_label <- "Length (Mb)"
# # Create and save the 3D scatter plot as a PNG file
# png(filename = "3dplot_Hotspot_Causative_Window_Comparison.png", width = 1920, height = 1080, res = 300)
# png(filename = "3dplot_Hotspot_Causative_Window_Comparison.png",width = 800, height = 600, res = 300)
# Create the 3D scatter plot
s3d <- scatterplot3d(
x_value  ,
y_value,
z_value,
color = Hotspots_and_Causative_windows_comparison_sorted$Color,
pch = 19, # Solid circle
xlab = x_axis_label,
ylab = y_axis_label,
zlab = z_axis_label,
main = plot_title
)
# Add shadows on the x-y plane (z = 0)
s3d$points3d(
x_value,
y_value,
rep(0, nrow(Hotspots_and_Causative_windows_comparison_sorted)),  # Set z to 0 for shadow
col = adjustcolor(Hotspots_and_Causative_windows_comparison_sorted$Color, alpha.f = 0.3), # Semi-transparent shadows
pch = 19
)
# Convert coordinates for adding labels
s3d.coords <- s3d$xyz.convert(
x_value,
y_value,
z_value
)
# Add labels to the original points
text(s3d.coords$x, s3d.coords$y,
labels = Hotspots_and_Causative_windows_comparison_sorted$Label,
pos = 3, cex = 0.5) # pos=3 means above
# # Close the graphics device
# dev.off()
# Sort the data frame based on average fixation time, in descending order
kable(Hotspots_and_Causative_windows_comparison[order(-Hotspots_and_Causative_windows_comparison$ROH_Freq), ])
kable(Hotspots_and_Causative_windows_comparison[order(-Hotspots_and_Causative_windows_comparison$H_e), ])
# Min-max-scaling normalization function, that normalizes a vector of values
min_max_normalization_fun <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
### Min max scaling ###
# Normalize Lengths_Mb
Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb)
# Normalize ROH Frequency
Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq)
# Normalize H_e
Hotspots_and_Causative_windows_comparison_sorted$H_e_Normalized <- min_max_normalization_fun(Hotspots_and_Causative_windows_comparison_sorted$H_e)
# Modify the labels by removing "Hotspot_" prefix and "_window" suffix from hotspot models
Hotspots_and_Causative_windows_comparison_sorted$Label <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
gsub("Hotspot_|_window", "", Hotspots_and_Causative_windows_comparison_sorted$Model),
Hotspots_and_Causative_windows_comparison_sorted$Model
)
# Create a new column for identifying the type
Hotspots_and_Causative_windows_comparison_sorted$Type <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
"Hotspot",
"Selection Coefficient"
)
plot_title <- paste("Normalized ROH Hotspot(s) & Causative Windows comparison")
# Create the 3D scatter plot
s3d <- scatterplot3d(
Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb_Normalized,
Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq_Normalized,
Hotspots_and_Causative_windows_comparison_sorted$H_e_Normalized,
color = ifelse(Hotspots_and_Causative_windows_comparison_sorted$Type == "Hotspot", "red", "blue"),
pch = 19, # Solid circle
xlab = "Normalized Lengths",
ylab = "Normalized Mean ROH Frequency",
zlab = "Normalized H_e",
main = plot_title
)
# Add labels to the points
s3d.coords <- s3d$xyz.convert(
Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb_Normalized,
Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq_Normalized,
Hotspots_and_Causative_windows_comparison_sorted$H_e_Normalized
)
text(s3d.coords$x, s3d.coords$y,
labels = Hotspots_and_Causative_windows_comparison_sorted$Label,
pos = 3, cex = 0.5) # pos=3 means above
setwd(output_dir)
generate_H_e_plot <- function(hotspot_name, empirical_value) {
image_name <- paste("Selection_strength_H_e_plot", hotspot_name)
# Create and save the 3D scatter plot as a PNG file
png(filename = paste(image_name, ".png"), width = 1920, height = 1080, res = 300)
# Initialize plotting_data by directly selecting relevant columns from causative_variant_window_results_df
plotting_data <- data.frame(
sim_mean_value = causative_variant_window_results_df$Avg_H_e,
Lower_CI = causative_variant_window_results_df$H_e_lower_CI,
Upper_CI = causative_variant_window_results_df$H_e_upper_CI,
Model = causative_variant_window_results_df$Sel.coeff
)
# Add a column indicating whether the empirical H_e is within the CI of each model
plotting_data$Empirical_Within_CI <- (plotting_data$Lower_CI <= empirical_value) & (plotting_data$Upper_CI >= empirical_value)
# Determine the y-axis limits
min_y <- min(c(plotting_data$Lower_CI, empirical_value))
max_y <- max(c(plotting_data$Upper_CI, empirical_value))
# Create the plot
p <- ggplot(plotting_data, aes(x = Model, y = sim_mean_value, color = Empirical_Within_CI)) +
geom_point(size = H_e_values_decimals) +
geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
geom_hline(aes(yintercept = empirical_value), linetype = "dashed", color = "red", linewidth = 1, show.legend = TRUE) +
labs(title = paste("H_e Comparison with CI:s - ", hotspot_name),
x = "Model",
y = "H_e",
color = "Hotspot Average H_e (Red) \nin relation to CI") +
scale_color_manual(values = c("TRUE" = "darkgreen", "FALSE" = "black"), labels = c("TRUE" = "Inside CI", "FALSE" = "Outside CI")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(
limits = c(min_y, max_y),
breaks = round(seq(min_y, max_y, length.out = 10), 5),
labels = scales::number_format(accuracy = 0.001)  # Format y-axis to 3 decimal places
)
# Print the plot
print(p)
# Print which models the empirical H_e is inside of
inside_models <- plotting_data$Model[plotting_data$Empirical_Within_CI]
outside_models <- plotting_data$Model[!plotting_data$Empirical_Within_CI]
cat("Models where empirical H_e is within CI for", hotspot_name, ":\n")
print(inside_models)
cat("\nModels where empirical H_e is outside CI for", hotspot_name, ":\n")
print(outside_models)
# Close the graphics device
dev.off()
}
# Loop through each hotspot and generate plots
for (i in 1:nrow(under_selection_rows)) {
hotspot_name <- Selection_testing_results$Name[i]
empirical_value <- Selection_testing_results$Window_based_Average_H_e[i]
generate_H_e_plot(hotspot_name, empirical_value)
}
setwd(output_dir)
generate_H_e_plot <- function(hotspot_name, empirical_value) {
image_name <- paste("Selection_strength_window_lengths_plot", hotspot_name)
# Create and save the 3D scatter plot as a PNG file
png(filename = paste(image_name, ".png"), width = 1920, height = 1080, res = 300)
plotting_data <- data.frame()
# Initialize plotting_data by directly selecting relevant columns from causative_variant_window_results_df
plotting_data <- data.frame(
sim_mean_value = causative_variant_window_results_df$Length_Mb,
Lower_CI = causative_variant_window_results_df$Length_lower_CI,
Upper_CI = causative_variant_window_results_df$Length_Upper_CI,
Model = causative_variant_window_results_df$Sel.coeff
)
# Add a column indicating whether the empirical H_e is within the CI of each model
plotting_data$Empirical_Within_CI <- (plotting_data$Lower_CI <= empirical_value) & (plotting_data$Upper_CI >= empirical_value)
cat(plotting_data$Empirical_Within_CI)
# print(plotting_data)
# Determine the y-axis limits
min_y <- min(c(plotting_data$Lower_CI, empirical_value))
max_y <- max(c(plotting_data$Upper_CI, empirical_value))
# Create the plot
p <- ggplot(plotting_data, aes(x = Model, y = sim_mean_value, color = Empirical_Within_CI)) +
geom_point(size = Window_lengths_decimals) +
geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
geom_hline(aes(yintercept = empirical_value), linetype = "dashed", color = "red", linewidth = 1, show.legend = TRUE) +
labs(title = paste("Length (Mb) Comparison with CI:s - ", hotspot_name),
x = "Model",
y = "Length (Mb)",
color = "Hotspot Window Length (Red) \nin relation to CI") +
scale_color_manual(values = c("TRUE" = "darkgreen", "FALSE" = "black"), labels = c("TRUE" = "Inside CI", "FALSE" = "Outside CI")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(limits = c(min_y, max_y),
breaks = round(seq(min_y, max_y, length.out = 10), 5))
# Print the plot
print(p)
# Print which models the empirical H_e is inside of
inside_models <- plotting_data$Model[plotting_data$Empirical_Within_CI]
outside_models <- plotting_data$Model[!plotting_data$Empirical_Within_CI]
cat("Models where empirical H_e is within CI for", hotspot_name, ":\n")
print(inside_models)
cat("\nModels where empirical H_e is outside CI for", hotspot_name, ":\n")
print(outside_models)
# Close the graphics device
dev.off()
}
Hotspot_windows_sel_strength_test <- Hotspots_and_Causative_windows_comparison[grepl("Hotspot", Hotspots_and_Causative_windows_comparison$Model), ]
# Loop through each hotspot and generate plots
for (i in 1:nrow(Hotspot_windows_sel_strength_test)) {
hotspot_name <- Hotspot_windows_sel_strength_test$Model[i]
empirical_value <- Hotspot_windows_sel_strength_test$Lengths_Mb[i]
generate_H_e_plot(hotspot_name, empirical_value)
}
setwd(output_dir)
generate_H_e_plot <- function(hotspot_name, empirical_value) {
image_name <- paste("Selection_strength_ROH_frequency_plot", hotspot_name)
# Create and save the 3D scatter plot as a PNG file
png(filename = paste(image_name, ".png"), width = 1920, height = 1080, res = 300)
plotting_data <- data.frame()
# Initialize plotting_data by directly selecting relevant columns from causative_variant_window_results_df
plotting_data <- data.frame(
sim_mean_value = causative_variant_window_results_df$ROH_freq,
Lower_CI = causative_variant_window_results_df$ROH_freq_lower_CI,
Upper_CI = causative_variant_window_results_df$ROH_freq_upper_CI,
Model = causative_variant_window_results_df$Sel.coeff
)
# Add a column indicating whether the empirical H_e is within the CI of each model
plotting_data$Empirical_Within_CI <- (plotting_data$Lower_CI <= empirical_value) & (plotting_data$Upper_CI >= empirical_value)
# cat(plotting_data$Empirical_Within_CI)
# print(plotting_data)
# Determine the y-axis limits
min_y <- min(c(plotting_data$Lower_CI, empirical_value))
max_y <- max(c(plotting_data$Upper_CI, empirical_value))
# Create the plot
p <- ggplot(plotting_data, aes(x = Model, y = sim_mean_value, color = Empirical_Within_CI)) +
geom_point(size = ROH_frequency_decimals) +
geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
geom_hline(aes(yintercept = empirical_value), linetype = "dashed", color = "red", linewidth = 1, show.legend = TRUE) +
labs(title = paste("ROH-frequency Comparison with CI:s - ", hotspot_name),
x = "Model",
y = "ROH Freq (%)",
color = "Hotspot ROH Freq (%) (Red) \nin relation to CI") +
scale_color_manual(values = c("TRUE" = "darkgreen", "FALSE" = "black"), labels = c("TRUE" = "Inside CI", "FALSE" = "Outside CI")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(
limits = c(min_y, max_y),
breaks = round(seq(min_y, max_y, length.out = 10), 5),
labels = scales::number_format(accuracy = 1/(10^ROH_frequency_decimals)))  # Format y-axis to 3 decimal places
# scale_y_continuous(limits = c(min_y, max_y),
#                    breaks = round(seq(min_y, max_y, length.out = 10), 5))
# Print the plot
print(p)
# Print which models the empirical H_e is inside of
inside_models <- plotting_data$Model[plotting_data$Empirical_Within_CI]
outside_models <- plotting_data$Model[!plotting_data$Empirical_Within_CI]
cat("Models where empirical H_e is within CI for", hotspot_name, ":\n")
print(inside_models)
cat("\nModels where empirical H_e is outside CI for", hotspot_name, ":\n")
print(outside_models)
# Close the graphics device
dev.off()
}
Hotspot_windows_sel_strength_test <- Hotspots_and_Causative_windows_comparison[grepl("Hotspot", Hotspots_and_Causative_windows_comparison$Model), ]
# Loop through each hotspot and generate plots
for (i in 1:nrow(Hotspot_windows_sel_strength_test)) {
hotspot_name <- Hotspot_windows_sel_strength_test$Model[i]
empirical_value <- Hotspot_windows_sel_strength_test$ROH_Freq[i]
generate_H_e_plot(hotspot_name, empirical_value)
}
