H_e_5th_percentile_values_NO_MAF$Lower_CI <- round(H_e_5th_percentile_values_NO_MAF$Lower_CI,H_e_values_decimals)
H_e_5th_percentile_values_NO_MAF$Upper_CI <- round(H_e_5th_percentile_values_NO_MAF$Upper_CI,H_e_values_decimals)
# Sort the data frame based on H_e_5th_percentile column
H_e_5th_percentile_values_NO_MAF_sorted <- H_e_5th_percentile_values_NO_MAF[order(as.numeric(H_e_5th_percentile_values_NO_MAF$H_e_5th_percentile)), ]
# Print the table using knitr::kable()
knitr::kable(H_e_5th_percentile_values_NO_MAF_sorted, row.names = FALSE)
# Extract neutral model values and CI bounds
neutral_avg_H_e <- H_e_5th_percentiles_Neutral_model_MAF_0_05[["Estimated_Avg_Window_based_H_e"]]
neutral_avg_H_e_5th_percentile <- H_e_5th_percentiles_Neutral_model_MAF_0_05[["Estimated_Mean_H_e_5th_percentile"]]
neutral_lower_ci <- H_e_5th_percentiles_Neutral_model_MAF_0_05[["SE_CI_Estimated_Mean_H_e"]][1]
neutral_upper_ci <- H_e_5th_percentiles_Neutral_model_MAF_0_05[["SE_CI_Estimated_Mean_H_e"]][2]
# Extract empirical model value
empirical_avg_H_e <- empirical_H_e_distribution_table_MAF_0_05$Avg_H_e
# empirical_avg_H_e <- NA
empirical_avg_H_e_5th_percentile <- empirical_H_e_distribution_table_MAF_0_05$Fifth_Percentile
# empirical_avg_H_e_5th_percentile <- NA
empirical_lower_ci <- NA # Placeholder for confidence interval lower bound
empirical_upper_ci <- NA # Placeholder for confidence interval upper bound
# Combine all values into a data frame
H_e_5th_percentile_values_MAF_0_05 <- data.frame(
Model = c("Neutral", "Empirical"),
Avg_H_e = c(neutral_avg_H_e, empirical_avg_H_e),
Lower_CI = c(neutral_lower_ci, empirical_lower_ci),
Upper_CI = c(neutral_upper_ci, empirical_upper_ci),
H_e_5th_percentile = c(neutral_avg_H_e_5th_percentile, empirical_avg_H_e_5th_percentile)
)
# Format all numeric values to 5 decimal places
H_e_5th_percentile_values_MAF_0_05$Avg_H_e <- round(H_e_5th_percentile_values_MAF_0_05$Avg_H_e, H_e_values_decimals)
H_e_5th_percentile_values_MAF_0_05$H_e_5th_percentile <- round(H_e_5th_percentile_values_MAF_0_05$H_e_5th_percentile, H_e_values_decimals)
H_e_5th_percentile_values_MAF_0_05$Lower_CI <- round(H_e_5th_percentile_values_MAF_0_05$Lower_CI,H_e_values_decimals)
H_e_5th_percentile_values_MAF_0_05$Upper_CI <- round(H_e_5th_percentile_values_MAF_0_05$Upper_CI,H_e_values_decimals)
# Sort the data frame based on H_e_5th_percentile column
H_e_5th_percentile_values_MAF_0_05_sorted <- H_e_5th_percentile_values_MAF_0_05[order(as.numeric(H_e_5th_percentile_values_MAF_0_05$H_e_5th_percentile)), ]
# Print the table using knitr::kable()
knitr::kable(H_e_5th_percentile_values_MAF_0_05_sorted, row.names = FALSE)
cat("\n ROH-hotspot threshold comparison between the different datasets")
# Print the table using knitr::kable()
knitr::kable(ROH_hotspot_threshold_values_sorted, row.names = FALSE)
# Print the table using knitr::kable()
knitr::kable(F_ROH_values_sorted, row.names = FALSE)
######################## H_E - NO MAF ########################
reference_Avg_H_e_No_MAF <- H_e_5th_percentile_values_NO_MAF_sorted$Avg_H_e[H_e_5th_percentile_values_NO_MAF_sorted$Model=="Empirical"]
# reference_Avg_H_e_No_MAF <- 0.244588241178689
neutral_model_Avg_H_e_No_MAF <- H_e_5th_percentile_values_NO_MAF_sorted$Avg_H_e[H_e_5th_percentile_values_NO_MAF_sorted$Model=="Neutral"]
neutral_model_Avg_H_e_No_MAF_lower_ci <- H_e_5th_percentile_values_NO_MAF_sorted$Lower_CI[H_e_5th_percentile_values_NO_MAF_sorted$Model=="Neutral"]
neutral_model_Avg_H_e_No_MAF_upper_ci <- H_e_5th_percentile_values_NO_MAF_sorted$Upper_CI[H_e_5th_percentile_values_NO_MAF_sorted$Model=="Neutral"]
# neutral_model_Avg_H_e_No_MAF <- 0.16407 # H05
# neutral_model_Avg_H_e_No_MAF <- 0.1678 # H06
# neutral_model_Avg_H_e_No_MAF <- 0.159 # test
reference_H_e_5th_percentile_No_MAF <- H_e_5th_percentile_values_NO_MAF_sorted$H_e_5th_percentile[H_e_5th_percentile_values_NO_MAF_sorted$Model=="Empirical"]
# reference_H_e_5th_percentile_No_MAF <- 0.0742
neutral_model_5th_percentile_No_MAF <- H_e_5th_percentile_values_NO_MAF_sorted$H_e_5th_percentile[H_e_5th_percentile_values_NO_MAF_sorted$Model=="Neutral"]
# neutral_model_5th_percentile_No_MAF <- 0.03083 # H05
# neutral_model_5th_percentile_No_MAF <- 0.02891 # H06
######################## H_E - MAF 0.01 ########################
reference_Avg_H_e_MAF_0_05 <- H_e_5th_percentile_values_MAF_0_05_sorted$Avg_H_e[H_e_5th_percentile_values_MAF_0_05_sorted$Model=="Empirical"]
neutral_model_Avg_H_e_MAF_0_05 <- H_e_5th_percentile_values_MAF_0_05_sorted$Avg_H_e[H_e_5th_percentile_values_MAF_0_05_sorted$Model=="Neutral"]
neutral_model_Avg_H_e_MAF_0_05_lower_ci <- H_e_5th_percentile_values_MAF_0_05_sorted$Lower_CI[H_e_5th_percentile_values_MAF_0_05_sorted$Model=="Neutral"]
neutral_model_Avg_H_e_MAF_0_05_upper_ci <- H_e_5th_percentile_values_MAF_0_05_sorted$Upper_CI[H_e_5th_percentile_values_MAF_0_05_sorted$Model=="Neutral"]
reference_H_e_5th_percentile_MAF_0_05 <- H_e_5th_percentile_values_MAF_0_05_sorted$H_e_5th_percentile[H_e_5th_percentile_values_MAF_0_05_sorted$Model=="Empirical"]
# reference_H_e_5th_percentile_MAF_0_05 <- 0.0742
neutral_model_5th_percentile_MAF_0_05 <- H_e_5th_percentile_values_MAF_0_05_sorted$H_e_5th_percentile[H_e_5th_percentile_values_MAF_0_05_sorted$Model=="Neutral"]
######################## F_ROH ########################
reference_F_ROH <- F_ROH_values_sorted$F_ROH[F_ROH_values_sorted$Model=="Empirical"]
# reference_F_ROH <- 0.233
neutral_model_F_ROH <- F_ROH_values_sorted$F_ROH[F_ROH_values_sorted$Model=="Neutral"]
neutral_model_F_ROH_lower_ci <- F_ROH_values_sorted$Lower_CI[F_ROH_values_sorted$Model=="Neutral"]
neutral_model_F_ROH_upper_ci <- F_ROH_values_sorted$Upper_CI[F_ROH_values_sorted$Model=="Neutral"]
# neutral_model_F_ROH <- 0.232 # H05
# neutral_model_F_ROH <- 0.255 # H06
# neutral_model_F_ROH <- 0.15 # test
######################## ROH-Hotspot Threshold ########################
reference_ROH_hotspot_threshold <- ROH_hotspot_threshold_values_sorted$Avg_ROH_hotspot_threshold[ROH_hotspot_threshold_values_sorted$Model=="Empirical"]
reference_ROH_hotspot_threshold <- ifelse(reference_ROH_hotspot_threshold == 0,
0,
reference_ROH_hotspot_threshold / 100)
# reference_ROH_hotspot_threshold <- 0.554
neutral_model_ROH_hotspot_threshold <- ROH_hotspot_threshold_values_sorted$Avg_ROH_hotspot_threshold[ROH_hotspot_threshold_values_sorted$Model=="Neutral"]
neutral_model_ROH_hotspot_threshold <- ifelse(neutral_model_ROH_hotspot_threshold == 0,
0,
neutral_model_ROH_hotspot_threshold / 100)
neutral_model_ROH_hotspot_threshold_lower_ci <- ROH_hotspot_threshold_values_sorted$Lower_CI[ROH_hotspot_threshold_values_sorted$Model=="Neutral"]
neutral_model_ROH_hotspot_threshold_lower_ci <- ifelse(neutral_model_ROH_hotspot_threshold_lower_ci == 0,
0,
neutral_model_ROH_hotspot_threshold_lower_ci / 100)
neutral_model_ROH_hotspot_threshold_upper_ci <- ROH_hotspot_threshold_values_sorted$Upper_CI[ROH_hotspot_threshold_values_sorted$Model=="Neutral"]
neutral_model_ROH_hotspot_threshold_upper_ci <- ifelse(neutral_model_ROH_hotspot_threshold_upper_ci == 0,
0,
neutral_model_ROH_hotspot_threshold_upper_ci / 100)
# # ######################## H_E - NO MAF ########################
# # # neutral_model_Avg_H_e_No_MAF <- 0.24459 # H11_V1
# # # neutral_model_5th_percentile_No_MAF <- 0.09425 # H11_V1
# # neutral_model_Avg_H_e_No_MAF <- 0.24056 # H11_V6
# # neutral_model_5th_percentile_No_MAF <- 0.09442 # H11_V6
# # neutral_model_Avg_H_e_No_MAF <- 0.23842 # H13_1
# # neutral_model_5th_percentile_No_MAF <- 0.07991 # H13_1
# # neutral_model_Avg_H_e_No_MAF <- 0.2364 # H13_2
# # neutral_model_5th_percentile_No_MAF <- 0.07818 # H13_2
# # neutral_model_Avg_H_e_No_MAF <- 0.24376 # H14_initial
# # neutral_model_5th_percentile_No_MAF <- 0.07599 # H14_initial
# # neutral_model_Avg_H_e_No_MAF <- 0.24384 # H14_3
# # neutral_model_5th_percentile_No_MAF <- 0.08144 # H14_3
# # neutral_model_Avg_H_e_No_MAF <- 0.24081 # H14_2
# # neutral_model_5th_percentile_No_MAF <- 0.0767 # H14_2
# neutral_model_Avg_H_e_No_MAF <- 0.24317 # H14_v1
# neutral_model_5th_percentile_No_MAF <- 0.07662 # H14_v1
# neutral_model_Avg_H_e_No_MAF <- 0.23879 # H16_v1
# neutral_model_5th_percentile_No_MAF <- 0.03512 # H16_v1
# neutral_model_Avg_H_e_No_MAF_lower_ci <- 0.23492
# neutral_model_Avg_H_e_No_MAF_upper_ci <- 0.24266
# # ######################## H_E - MAF 0.05 ########################
# # # neutral_model_Avg_H_e_MAF_0_05 <- 0.3504  # H11_V1
# # # neutral_model_5th_percentile_MAF_0_05 <- 0.2177  # H11_V1
# # neutral_model_Avg_H_e_MAF_0_05 <- 0.35241  # H11_V6
# # neutral_model_5th_percentile_MAF_0_05 <- 0.22056  # H11_V6
# # neutral_model_Avg_H_e_MAF_0_05 <- 0.35412  # H13_1
# # neutral_model_5th_percentile_MAF_0_05 <- 0.21593  # H13_1
# # neutral_model_Avg_H_e_MAF_0_05 <- 0.3541  # H13_2
# # neutral_model_5th_percentile_MAF_0_05 <- 0.21443  # H13_2
# # neutral_model_Avg_H_e_MAF_0_05 <- 0.35836  # H14_initial
# # neutral_model_5th_percentile_MAF_0_05 <- 0.21068  # H14_initial
# # neutral_model_Avg_H_e_MAF_0_05 <- 0.35753  # H14_3
# # neutral_model_5th_percentile_MAF_0_05 <- 0.2153  # H14_3
# # neutral_model_Avg_H_e_MAF_0_05 <- 0.35886  # H14_2
# # neutral_model_5th_percentile_MAF_0_05 <- 0.2132 # H14_2
# neutral_model_Avg_H_e_MAF_0_05 <- 0.35821  # H14_v1
# neutral_model_5th_percentile_MAF_0_05 <- 0.21066 # H14_v1
# neutral_model_Avg_H_e_MAF_0_05 <- 0.3496  # H16_v1
# neutral_model_5th_percentile_MAF_0_05 <- 0.1779 # # H16_v1
# neutral_model_Avg_H_e_MAF_0_05_lower_ci <- 0.34727
# neutral_model_Avg_H_e_MAF_0_05_upper_ci <- 0.35193
# #
# # ######################## F_ROH ########################
# # # neutral_model_F_ROH <- 0.234 # H11_V1
# # neutral_model_F_ROH <- 0.239 # H11_V6
# # neutral_model_F_ROH <- 0.237 # H13_1
# # neutral_model_F_ROH <- 0.24 # H13_2
# # neutral_model_F_ROH <- 0.23 # H14_initial
# # neutral_model_F_ROH <- 0.233 # H14_1
# # neutral_model_F_ROH <- 0.231 # H14_2
# neutral_model_F_ROH <- 0.235 #H14_v1
# neutral_model_F_ROH <- 0.235 # H16_v1
# neutral_model_F_ROH_lower_ci <- 0.226
# neutral_model_F_ROH_upper_ci <- 0.243
# # ######################## ROH-Hotspot Threshold ########################
# # # neutral_model_ROH_hotspot_threshold <- 0.483 # H11_V1
# # neutral_model_ROH_hotspot_threshold <- 0.518 # H11_V6
# # neutral_model_ROH_hotspot_threshold <- 0.511 # H13_1
# # neutral_model_ROH_hotspot_threshold <- 0.529 # H13_2
# # neutral_model_ROH_hotspot_threshold <- 0.516 # H14_initial
# # neutral_model_ROH_hotspot_threshold <- 0.557 # H14_3
# neutral_model_ROH_hotspot_threshold <- 0.55 # H14_v1
# neutral_model_ROH_hotspot_threshold <- 0.544 # H16_v1
# neutral_model_ROH_hotspot_threshold_lower_ci <- 0.50
# neutral_model_ROH_hotspot_threshold_upper_ci <- 0.588
#
######################## H_E - NO MAF ########################
neutral_Avg_H_e_CI_width_NO_MAF <- neutral_model_Avg_H_e_No_MAF_upper_ci - neutral_model_Avg_H_e_No_MAF_lower_ci
cat("\n\n neutral_model_Avg_H_e_No_MAF_upper_ci - neutral_model_Avg_H_e_No_MAF_lower_ci = \n ",neutral_model_Avg_H_e_No_MAF_upper_ci,"-",neutral_model_Avg_H_e_No_MAF_lower_ci,"=",neutral_Avg_H_e_CI_width_NO_MAF)
######################## H_E - MAF 0.01 ########################
neutral_Avg_H_e_CI_width_MAF_0_05 <- neutral_model_Avg_H_e_MAF_0_05_upper_ci - neutral_model_Avg_H_e_MAF_0_05_lower_ci
cat("\n\n neutral_model_Avg_H_e_MAF_0_05_upper_ci - neutral_model_Avg_H_e_MAF_0_05_lower_ci = \n ",neutral_model_Avg_H_e_MAF_0_05_upper_ci,"-",neutral_model_Avg_H_e_MAF_0_05_lower_ci,"=",neutral_Avg_H_e_CI_width_MAF_0_05)
######################## F_ROH ########################
neutral_F_ROH_CI_width <- neutral_model_F_ROH_upper_ci - neutral_model_F_ROH_lower_ci
cat("\n\n neutral_model_F_ROH_upper_ci - neutral_model_F_ROH_lower_ci = \n",neutral_model_F_ROH_upper_ci,"-",neutral_model_F_ROH_lower_ci,"=",neutral_F_ROH_CI_width)
######################## ROH-Hotspot Threshold ########################
neutral_ROH_hotspot_threshold_CI_width <- neutral_model_ROH_hotspot_threshold_upper_ci - neutral_model_ROH_hotspot_threshold_lower_ci
cat("\n\n neutral_model_ROH_hotspot_threshold_upper_ci - neutral_model_ROH_hotspot_threshold_lower_ci = \n ",neutral_model_ROH_hotspot_threshold_upper_ci,"-",neutral_model_ROH_hotspot_threshold_lower_ci,"=",neutral_ROH_hotspot_threshold_CI_width)
######################## H_E - NO MAF ########################
H_e_5th_percentile_diff_NO_MAF <- reference_H_e_5th_percentile_No_MAF- neutral_model_5th_percentile_No_MAF
cat("\n¤¤¤¤¤¤¤¤¤¤¤¤ NO MAF: ¤¤¤¤¤¤¤¤¤¤¤¤\nEmpirical H_e 5th % - Neutral Model H_e 5th% = \n ",reference_H_e_5th_percentile_No_MAF,"-",neutral_model_5th_percentile_No_MAF,"=",H_e_5th_percentile_diff_NO_MAF)
Avg_H_e_diff_NO_MAF <- reference_Avg_H_e_No_MAF- neutral_model_Avg_H_e_No_MAF
cat("\nEmpirical Avg H_e - Neutral Model Avg H_e = \n ",reference_Avg_H_e_No_MAF,"-",neutral_model_Avg_H_e_No_MAF,"=",Avg_H_e_diff_NO_MAF)
######################## H_E - MAF 0.01 ########################
H_e_5th_percentile_diff_MAF_0_05 <- reference_H_e_5th_percentile_MAF_0_05- neutral_model_5th_percentile_MAF_0_05
cat("\n\n¤¤¤¤¤¤¤¤¤¤¤¤ MAF 0.01: ¤¤¤¤¤¤¤¤¤¤¤¤\nEmpirical H_e 5th % - Neutral Model H_e 5th% = \n ",reference_H_e_5th_percentile_MAF_0_05,"-",neutral_model_5th_percentile_MAF_0_05,"=",H_e_5th_percentile_diff_MAF_0_05)
Avg_H_e_diff_MAF_0_05 <- reference_Avg_H_e_MAF_0_05- neutral_model_Avg_H_e_MAF_0_05
cat("\n Empirical Avg H_e - Neutral Model Avg H_e = \n ",reference_Avg_H_e_MAF_0_05,"-",neutral_model_Avg_H_e_MAF_0_05,"=",Avg_H_e_diff_MAF_0_05)
######################## F_ROH ########################
F_ROH_diff <- reference_F_ROH - neutral_model_F_ROH
cat("\n\nEmpirical F_ROH - Neutral Model F_ROH = \n",reference_F_ROH,"-",neutral_model_F_ROH,"=",F_ROH_diff)
######################## ROH-Hotspot Threshold ########################
ROH_hotspot_threshold_diff <- reference_ROH_hotspot_threshold - neutral_model_ROH_hotspot_threshold
cat("\n\nEmpirical ROH-Hotspot threshold - Neutral Model ROH-Hotspot threshold = \n ",reference_ROH_hotspot_threshold,"-",neutral_model_ROH_hotspot_threshold,"=",ROH_hotspot_threshold_diff)
######################## H_E - NO MAF ########################
# Calculate percentage deviation for H_e_5th_percentile
percentage_deviation_H_e_5th_percentile_NO_MAF <- ifelse(H_e_5th_percentile_diff_NO_MAF == 0,
0,
abs(H_e_5th_percentile_diff_NO_MAF) / reference_H_e_5th_percentile_No_MAF)
# Calculate percentage deviation for Average H_e
percentage_deviation_Avg_H_e_NO_MAF <- ifelse(Avg_H_e_diff_NO_MAF == 0,
0,
abs(Avg_H_e_diff_NO_MAF) / reference_Avg_H_e_No_MAF)
# Calculate CI width percentage for Average H_e
ci_width_percentage_Avg_H_e_NO_MAF <- ifelse(neutral_Avg_H_e_CI_width_NO_MAF == 0,
0,
neutral_Avg_H_e_CI_width_NO_MAF / neutral_model_Avg_H_e_No_MAF)
######################## H_E - MAF 0.01 ########################
# Calculate percentage deviation for H_e_5th_percentile
percentage_deviation_H_e_5th_percentile_MAF_0_05 <- ifelse(H_e_5th_percentile_diff_MAF_0_05 == 0,
0,
abs(H_e_5th_percentile_diff_MAF_0_05) / reference_H_e_5th_percentile_MAF_0_05)
# Calculate percentage deviation for Average H_e
percentage_deviation_Avg_H_e_MAF_0_05 <- ifelse(Avg_H_e_diff_MAF_0_05 == 0,
0,
abs(Avg_H_e_diff_MAF_0_05) / reference_Avg_H_e_MAF_0_05)
# Calculate CI width percentage for Average H_e
ci_width_percentage_Avg_H_e_MAF_0_05 <- ifelse(neutral_Avg_H_e_CI_width_MAF_0_05 == 0,
0,
neutral_Avg_H_e_CI_width_MAF_0_05 / neutral_model_Avg_H_e_MAF_0_05)
######################## F_ROH ########################
# Calculate percentage deviation for F_ROH
percentage_deviation_F_ROH <- ifelse(F_ROH_diff == 0,
0,
abs(F_ROH_diff) / reference_F_ROH)
# Calculate CI width percentage for F_ROH
ci_width_percentage_F_ROH <- ifelse(neutral_F_ROH_CI_width == 0,
0,
neutral_F_ROH_CI_width / neutral_model_F_ROH)
######################## ROH-Hotspot Threshold ########################
# Calculate percentage deviation for ROH_hotspot_threshold
percentage_deviation_ROH_hotspot_threshold <- ifelse(ROH_hotspot_threshold_diff == 0,
0,
abs(ROH_hotspot_threshold_diff) / reference_ROH_hotspot_threshold)
# Calculate CI width percentage for F_ROH
ci_width_percentage_ROH_hotspot_threshold <- ifelse(neutral_ROH_hotspot_threshold_CI_width == 0,
0,
neutral_ROH_hotspot_threshold_CI_width / neutral_model_ROH_hotspot_threshold)
# H_e_weight <- 2
# Avg_H_e_diff_NO_MAF <- 0.004588241
# Avg_H_e_diff_NO_MAF
# reference_Avg_H_e_No_MAF <- 0.2445882
# neutral_model_Avg_H_e_No_MAF <- 0.24
#
# percentage_diff_H_e <- neutral_model_Avg_H_e_No_MAF / reference_Avg_H_e_No_MAF
# percentage_diff_H_e
#
# H_e_percentage <- abs(1 - percentage_diff_H_e)
# H_e_percentage
# # neutral_model_Avg_H_e_No_MAF <- 0.235
# # neutral_model_F_ROH <- 0.245
# # neutral_model_ROH_hotspot_threshold <- 0.52
#
# cat("\n Neutral H_e NO MAF:",neutral_model_Avg_H_e_No_MAF,"\n Neutral F_ROH:",neutral_model_F_ROH,"\n ROH Hotspot:",neutral_model_ROH_hotspot_threshold)
#
# Avg_H_e_diff_NO_MAF <- reference_Avg_H_e_No_MAF - neutral_model_Avg_H_e_No_MAF
# cat("\nEmpirical H_e - Neutral Model H_e NO MAF= ",reference_Avg_H_e_No_MAF,"-",neutral_model_Avg_H_e_No_MAF,"\t=",Avg_H_e_diff_NO_MAF)
# F_ROH_diff <- reference_F_ROH - neutral_model_F_ROH
# cat("\nEmpirical F_ROH - Neutral Model F_ROH = ",reference_F_ROH,"-",neutral_model_F_ROH,"\t=",F_ROH_diff)
# ROH_hotspot_threshold_diff <- reference_ROH_hotspot_threshold - neutral_model_ROH_hotspot_threshold
# cat("\nEmpirical ROH-Hotspot threshold - Neutral Model ROH-Hotspot threshold =  ",reference_ROH_hotspot_threshold,"-",neutral_model_ROH_hotspot_threshold,"\t=",ROH_hotspot_threshold_diff)
#
#
# # Calculate percentage deviation for Average H_e
# percentage_deviation_Avg_H_e_NO_MAF <- ifelse(Avg_H_e_diff_NO_MAF == 0,  0,
#                                                  abs(Avg_H_e_diff_NO_MAF) / reference_Avg_H_e_No_MAF)
# # Calculate percentage deviation for F_ROH
# percentage_deviation_F_ROH <- ifelse(F_ROH_diff == 0,0,
#                                      abs(F_ROH_diff) / reference_F_ROH)
# # Calculate percentage deviation for ROH_hotspot_threshold
# percentage_deviation_ROH_hotspot_threshold <- ifelse(ROH_hotspot_threshold_diff == 0,   0,
#                                                     abs(ROH_hotspot_threshold_diff) / reference_ROH_hotspot_threshold)
# H_e_weight <- 4
# F_ROH_Weight <- 1
# ROH_hotspot_Weight <- 1
# cat("\n¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤\n H_e_weight",H_e_weight ,"Percentage diff \n¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤")
# H_e_num <- H_e_weight*percentage_deviation_Avg_H_e_NO_MAF
# F_ROH_num <- F_ROH_Weight*percentage_deviation_F_ROH
# ROH_hotspot_num <- ROH_hotspot_Weight*percentage_deviation_ROH_hotspot_threshold
# # Output the cost (percentage deviation)
# cost <- H_e_weight*percentage_deviation_Avg_H_e_NO_MAF  + F_ROH_Weight*percentage_deviation_F_ROH + ROH_hotspot_Weight*percentage_deviation_ROH_hotspot_threshold
# cost <- round(cost,decimals_output_values)
# cat("\nCost=",H_e_weight,"*",percentage_deviation_Avg_H_e_NO_MAF,"+",F_ROH_Weight,"*",percentage_deviation_F_ROH,"+",ROH_hotspot_Weight,"*",percentage_deviation_ROH_hotspot_threshold,"=",H_e_num,"+",F_ROH_num,"+",ROH_hotspot_num,"\n=",cost)
#
# H_e_weight <- 4
# F_ROH_Weight <- 1.5
# ROH_hotspot_Weight <- 1
#
# cat("\n¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤\n H_e_weight",H_e_weight ,"Percentage diff \n¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤")
# H_e_num <- H_e_weight*percentage_deviation_Avg_H_e_NO_MAF
# F_ROH_num <- F_ROH_Weight*percentage_deviation_F_ROH
# ROH_hotspot_num <- ROH_hotspot_Weight*percentage_deviation_ROH_hotspot_threshold
# # Output the cost (percentage deviation)
# cost <- H_e_weight*percentage_deviation_Avg_H_e_NO_MAF  + F_ROH_Weight*percentage_deviation_F_ROH + ROH_hotspot_Weight*percentage_deviation_ROH_hotspot_threshold
# cost <- round(cost,decimals_output_values)
# cat("\nCost=",H_e_weight,"*",percentage_deviation_Avg_H_e_NO_MAF,"+",F_ROH_Weight,"*",percentage_deviation_F_ROH,"+",ROH_hotspot_Weight,"*",percentage_deviation_ROH_hotspot_threshold,"=",H_e_num,"+",F_ROH_num,"+",ROH_hotspot_num,"\n=",cost)
# reference_Avg_H_e_MAF_0_05 <- 0.316
# neutral_model_Avg_H_e_MAF_0_05 <- 0.316
# neutral_model_F_ROH <- 0.228
# neutral_model_ROH_hotspot_threshold <- 0.455
#
#
# cat("\n Neutral H_e:",neutral_model_Avg_H_e_MAF_0_05,"\n Neutral F_ROH:",neutral_model_F_ROH,"\n ROH Hotspot:",neutral_model_ROH_hotspot_threshold)
#
# Avg_H_e_diff_NO_MAF <- reference_Avg_H_e_MAF_0_05 - neutral_model_Avg_H_e_MAF_0_05
# cat("\nEmpirical H_e - Neutral Model H_e = ",reference_Avg_H_e_MAF_0_05,"-",neutral_model_Avg_H_e_MAF_0_05,"\t=",Avg_H_e_diff_NO_MAF)
# F_ROH_diff <- reference_F_ROH - neutral_model_F_ROH
# cat("\nEmpirical F_ROH - Neutral Model F_ROH = ",reference_F_ROH,"-",neutral_model_F_ROH,"\t=",F_ROH_diff)
# ROH_hotspot_threshold_diff <- reference_ROH_hotspot_threshold - neutral_model_ROH_hotspot_threshold
# cat("\nEmpirical ROH-Hotspot threshold - Neutral Model ROH-Hotspot threshold =  ",reference_ROH_hotspot_threshold,"-",neutral_model_ROH_hotspot_threshold,"\t=",ROH_hotspot_threshold_diff)
# # Calculate percentage deviation for Average H_e
# percentage_deviation_Avg_H_e_NO_MAF <- ifelse(Avg_H_e_diff_NO_MAF == 0,  0,
#                                                  abs(Avg_H_e_diff_NO_MAF) / reference_Avg_H_e_MAF_0_05)
# # Calculate percentage deviation for F_ROH
# percentage_deviation_F_ROH <- ifelse(F_ROH_diff == 0,0,
#                                      abs(F_ROH_diff) / reference_F_ROH)
# # Calculate percentage deviation for ROH_hotspot_threshold
# percentage_deviation_ROH_hotspot_threshold <- ifelse(ROH_hotspot_threshold_diff == 0,   0,
#                                                     abs(ROH_hotspot_threshold_diff) / reference_ROH_hotspot_threshold)
# H_e_weight <- 4
# F_ROH_Weight <- 1
# ROH_hotspot_Weight <- 1
# cat("\n¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤\n H_e_weight",H_e_weight ,"Percentage diff \n¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤")
# H_e_num <- H_e_weight*percentage_deviation_Avg_H_e_NO_MAF
# F_ROH_num <- F_ROH_Weight*percentage_deviation_F_ROH
# ROH_hotspot_num <- ROH_hotspot_Weight*percentage_deviation_ROH_hotspot_threshold
# # Output the cost (percentage deviation)
# cost <- H_e_weight*percentage_deviation_Avg_H_e_NO_MAF  + F_ROH_Weight*percentage_deviation_F_ROH + ROH_hotspot_Weight*percentage_deviation_ROH_hotspot_threshold
# cost <- round(cost,decimals_output_values)
# cat("\nCost=",H_e_weight,"*",percentage_deviation_Avg_H_e_NO_MAF,"+",F_ROH_Weight,"*",percentage_deviation_F_ROH,"+",ROH_hotspot_Weight,"*",percentage_deviation_ROH_hotspot_threshold,"=",H_e_num,"+",F_ROH_num,"+",ROH_hotspot_num,"\n=",cost)
#
# H_e_weight <- 4
# F_ROH_Weight <- 1.5
# ROH_hotspot_Weight <- 1.5
#
# cat("\n¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤\n H_e_weight",H_e_weight ,"Percentage diff \n¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤")
# H_e_num <- H_e_weight*percentage_deviation_Avg_H_e_NO_MAF
# F_ROH_num <- F_ROH_Weight*percentage_deviation_F_ROH
# ROH_hotspot_num <- ROH_hotspot_Weight*percentage_deviation_ROH_hotspot_threshold
# # Output the cost (percentage deviation)
# cost <- H_e_weight*percentage_deviation_Avg_H_e_NO_MAF  + F_ROH_Weight*percentage_deviation_F_ROH + ROH_hotspot_Weight*percentage_deviation_ROH_hotspot_threshold
# cost <- round(cost,decimals_output_values)
# cat("\nCost=",H_e_weight,"*",percentage_deviation_Avg_H_e_NO_MAF,"+",F_ROH_Weight,"*",percentage_deviation_F_ROH,"+",ROH_hotspot_Weight,"*",percentage_deviation_ROH_hotspot_threshold,"=",H_e_num,"+",F_ROH_num,"+",ROH_hotspot_num,"\n=",cost)
H_e_weight <- 2
# Output the cost (percentage deviation)
Cost_H_e_5th <- H_e_weight*percentage_deviation_H_e_5th_percentile_NO_MAF + percentage_deviation_F_ROH + percentage_deviation_ROH_hotspot_threshold
Cost_H_e_5th <- round(Cost_H_e_5th,decimals_output_values)
cat("\n Cost=",H_e_weight,"*",percentage_deviation_H_e_5th_percentile_NO_MAF,"+",percentage_deviation_F_ROH,"+",percentage_deviation_ROH_hotspot_threshold,"=\n",Cost_H_e_5th)
H_e_weight <- 2
# Output the cost (percentage deviation)
Cost_Avg_H_e <- H_e_weight*percentage_deviation_Avg_H_e_NO_MAF + percentage_deviation_F_ROH + percentage_deviation_ROH_hotspot_threshold
Cost_Avg_H_e <- round(Cost_Avg_H_e,decimals_output_values)
cat("\n Cost=",H_e_weight,"*",percentage_deviation_Avg_H_e_NO_MAF,"+",percentage_deviation_F_ROH,"+",percentage_deviation_ROH_hotspot_threshold,"=\n",Cost_Avg_H_e)
H_e_weight <- 2
# Output the cost (percentage deviation)
cost_june <- H_e_weight*percentage_deviation_Avg_H_e_NO_MAF + percentage_deviation_H_e_5th_percentile_NO_MAF + percentage_deviation_F_ROH + percentage_deviation_ROH_hotspot_threshold
cost_june <- round(cost_june,decimals_output_values)
cat("\n Cost June=",H_e_weight,"*",percentage_deviation_Avg_H_e_NO_MAF,"+",percentage_deviation_H_e_5th_percentile_NO_MAF,"+",percentage_deviation_F_ROH,"+",percentage_deviation_ROH_hotspot_threshold,"=\n",cost_june)
H_e_weight_NO_MAF <- 4
H_e_weight_MAF_0_05 <- 1
F_ROH_Weight <- 3
ROH_hotspot_Weight <- 2
cat("\n¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤\n H_e_weight_NO_MAF",H_e_weight_NO_MAF ,"Percentage diff \n¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤")
H_e_num_No_MAF <- H_e_weight_NO_MAF*percentage_deviation_Avg_H_e_NO_MAF
cat("\n¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤\n H_e_weight_MAF_0_05",H_e_weight_MAF_0_05 ,"Percentage diff \n¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤")
H_e_num_MAF_0_05 <- H_e_weight_MAF_0_05*percentage_deviation_Avg_H_e_MAF_0_05
F_ROH_num <- F_ROH_Weight*percentage_deviation_F_ROH
ROH_hotspot_num <- ROH_hotspot_Weight*percentage_deviation_ROH_hotspot_threshold
# Output the cost (percentage deviation)
cost_NO_CI <- H_e_weight_NO_MAF*percentage_deviation_Avg_H_e_NO_MAF + H_e_weight_MAF_0_05*percentage_deviation_Avg_H_e_MAF_0_05  + F_ROH_Weight*percentage_deviation_F_ROH + ROH_hotspot_Weight*percentage_deviation_ROH_hotspot_threshold
cost_NO_CI <- round(cost_NO_CI,decimals_output_values)
cat("\nCost=",H_e_weight_NO_MAF,"*",percentage_deviation_Avg_H_e_NO_MAF,"+",H_e_weight_MAF_0_05,"*",percentage_deviation_Avg_H_e_MAF_0_05,"+",F_ROH_Weight,"*",percentage_deviation_F_ROH,"+",ROH_hotspot_Weight,"*",percentage_deviation_ROH_hotspot_threshold,"=",H_e_num_No_MAF,"+",H_e_num_MAF_0_05,"+",F_ROH_num,"+",ROH_hotspot_num,"\n=",cost_NO_CI)
ci_width_percentage_Avg_H_e_NO_MAF
ci_width_percentage_Avg_H_e_MAF_0_05
ci_width_percentage_F_ROH
ci_width_percentage_ROH_hotspot_threshold
accuracy <- 1
precision <- 1
H_e_weight_NO_MAF <- 5
H_e_weight_MAF_0_05 <- 1
F_ROH_Weight <- 3
ROH_hotspot_Weight <- 2
cat("\n¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤\n H_e_weight_NO_MAF",H_e_weight_NO_MAF ,"Percentage diff \n¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤")
H_e_num_No_MAF <- H_e_weight_NO_MAF*percentage_deviation_Avg_H_e_NO_MAF
cat("\n¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤\n H_e_weight_MAF_0_05",H_e_weight_MAF_0_05 ,"Percentage diff \n¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤")
H_e_num_MAF_0_05 <- H_e_weight_MAF_0_05*percentage_deviation_Avg_H_e_MAF_0_05
F_ROH_num <- F_ROH_Weight*percentage_deviation_F_ROH
ROH_hotspot_num <- ROH_hotspot_Weight*percentage_deviation_ROH_hotspot_threshold
# Output the cost (percentage deviation)
# Compute the cost
cost <- H_e_weight_NO_MAF * (accuracy * percentage_deviation_Avg_H_e_NO_MAF + precision * ci_width_percentage_Avg_H_e_NO_MAF) +
H_e_weight_MAF_0_05 * (accuracy * percentage_deviation_Avg_H_e_MAF_0_05 + precision * ci_width_percentage_Avg_H_e_MAF_0_05) +
F_ROH_Weight * (accuracy * percentage_deviation_F_ROH + precision * ci_width_percentage_F_ROH) +
ROH_hotspot_Weight * (accuracy * percentage_deviation_ROH_hotspot_threshold + precision * ci_width_percentage_ROH_hotspot_threshold)
# Round the cost value
cost <- round(cost, decimals_output_values)
# Print the detailed cost calculation
cat("\nCost Calculation Details:\n")
cat("\n H_e_weight_NO_MAF * (accuracy * percentage_deviation_Avg_H_e_NO_MAF + precision * ci_width_percentage_Avg_H_e_NO_MAF)\n")
cat("=", H_e_weight_NO_MAF, "* (", accuracy, "*", percentage_deviation_Avg_H_e_NO_MAF, " + ", precision, "*", ci_width_percentage_Avg_H_e_NO_MAF, ")\n")
cat("\n H_e_weight_MAF_0_05 * (accuracy * percentage_deviation_Avg_H_e_MAF_0_05 + precision * ci_width_percentage_Avg_H_e_MAF_0_05)\n")
cat("=", H_e_weight_MAF_0_05, "* (", accuracy, "*", percentage_deviation_Avg_H_e_MAF_0_05, " + ", precision, "*", ci_width_percentage_Avg_H_e_MAF_0_05, ")\n")
cat("\n F_ROH_Weight * (accuracy * percentage_deviation_F_ROH + precision * ci_width_percentage_F_ROH)\n")
cat("=", F_ROH_Weight, "* (", accuracy, "*", percentage_deviation_F_ROH, " + ", precision, "*", ci_width_percentage_F_ROH, ")\n")
cat("\n ROH_hotspot_Weight * (accuracy * percentage_deviation_ROH_hotspot_threshold + precision * ci_width_percentage_ROH_hotspot_threshold)\n")
cat("=", ROH_hotspot_Weight, "* (", accuracy, "*", percentage_deviation_ROH_hotspot_threshold, " + ", precision, "*", ci_width_percentage_ROH_hotspot_threshold, ")\n")
# Print the final cost value
cat("\nTotal Cost =", cost, "\n")
F_ROH_ci <- c(neutral_model_F_ROH_lower_ci, neutral_model_F_ROH_upper_ci)
# Format the vector as a string in the format "(lower_ci, upper_ci)"
F_ROH_ci <- paste0("(", format(F_ROH_ci[1], nsmall = 2), ", ", format(F_ROH_ci[2], nsmall = 2), ")")
H_e_No_MAF_ci <- c(neutral_model_Avg_H_e_No_MAF_lower_ci, neutral_model_Avg_H_e_No_MAF_upper_ci)
# Format the vector as a string in the format "(lower_ci, upper_ci)"
H_e_No_MAF_ci <- paste0("(", format(H_e_No_MAF_ci[1], nsmall = 2), ", ", format(H_e_No_MAF_ci[2], nsmall = 2), ")")
H_e_MAF_0_05_ci <- c(neutral_model_Avg_H_e_MAF_0_05_lower_ci, neutral_model_Avg_H_e_MAF_0_05_upper_ci)
# Format the vector as a string in the format "(lower_ci, upper_ci)"
H_e_MAF_0_05_ci <- paste0("(", format(H_e_MAF_0_05_ci[1], nsmall = 2), ", ", format(H_e_MAF_0_05_ci[2], nsmall = 2), ")")
ROH_hotspot_ci <- c(neutral_model_ROH_hotspot_threshold_lower_ci,neutral_model_ROH_hotspot_threshold_upper_ci)
# Format the vector as a string in the format "(lower_ci, upper_ci)"
ROH_hotspot_ci <- paste0("(", format(ROH_hotspot_ci[1], nsmall = 2), ", ", format(ROH_hotspot_ci[2], nsmall = 2), ")")
# # Create an empty data frame if the file does not exist
# column_names <- c("Chr","NeBurnIn","nInd","InbredFo","NeBottleneck","nGenBottleneck","nGenBreed","nBreed","SNPchipRefPop","Sim_H_e_5th_perc","Sim_F_ROH","Sim_ROH_hotspot_thr","Sim_Cost_Result")
#
#
# # Create a list of the values for the current simulation
# current_simulation_values <- list(chr,Ne_burn_in,nInd_fo,Inbred_fo,N_e_bottleneck,n_generations_bottleneck,n_gen_breed,n_breed,snp_chip,
#          round(neutral_model_5th_percentile_No_MAF,decimals_output_values),
#          round(neutral_model_F_ROH,decimals_output_values),
#          round(neutral_model_ROH_hotspot_threshold,decimals_output_values),
#          round(cost,decimals_output_values))
# # Create an empty data frame if the file does not exist
# column_names <- c("Chr","NeBurnIn","nInd","InbredFo","NeBottleneck","nGenBottleneck","nGenBreed","nBreed","SNPchipRefPop","Sim_H_e","Sim_F_ROH","Sim_ROH_hotspot_thr","Sim_Cost_Result")
#
#
# # Create a list of the values for the current simulation
# current_simulation_values <- list(chr,Ne_burn_in,nInd_fo,Inbred_fo,N_e_bottleneck,n_generations_bottleneck,n_gen_breed,n_breed,snp_chip,
#          round(neutral_model_Avg_H_e_No_MAF,decimals_output_values),
#          round(neutral_model_F_ROH,decimals_output_values),
#          round(neutral_model_ROH_hotspot_threshold,decimals_output_values),
#          round(cost,decimals_output_values))
# "chr_specific_recombination_rate"
# Create an empty data frame if the file does not exist
# column_names <- c("Chr","NeBurnIn","nBottleneck","nGenBottleneck","nGenBreed","nBreed","SNPchipRefPop","genomewide_recombination_rate","Mutations","Sim_F_ROH","F_ROH_CI","Sim_ROH_hotspot_thr","ROH_hotspot_thr_CI","H_e_No_MAF","H_e_No_MAF_ci","H_e_5th_perc_No_MAF","H_e_MAF_0_05","H_e_MAF_0_05_ci","H_e_5th_perc_MAF_0_05","Sim_Cost_Result")
column_names <- c("Chr","NeBurnIn","nBottleneck","nGenBottleneck","nGenBreed","nBreed","SNPchipRefPop","Chr_specific_recomb_rate","Mutations","Sim_F_ROH","F_ROH_CI","Sim_ROH_hotspot_thr","ROH_hotspot_thr_CI","H_e_No_MAF","H_e_No_MAF_ci","H_e_5th_perc_No_MAF","H_e_MAF_0_05","H_e_MAF_0_05_ci","H_e_5th_perc_MAF_0_05","Sim_Cost_Result")
# Create a list of the values for the current simulation
current_simulation_values <- list(chr,Ne_burn_in,N_e_bottleneck,n_generations_bottleneck,n_gen_breed,n_breed,snp_chip,chr_specific_recomb_rate,Introduce_mutations,
round(neutral_model_F_ROH,decimals_output_values),
F_ROH_ci,
round(neutral_model_ROH_hotspot_threshold,decimals_output_values),
ROH_hotspot_ci,
round(neutral_model_Avg_H_e_No_MAF,decimals_output_values),
H_e_No_MAF_ci,
round(neutral_model_5th_percentile_No_MAF,decimals_output_values),
round(neutral_model_Avg_H_e_MAF_0_05,decimals_output_values),
H_e_MAF_0_05_ci,
round(neutral_model_5th_percentile_MAF_0_05,decimals_output_values),
round(cost,decimals_output_values))
# Convert the list to a data frame
current_simulation_df <- data.frame(matrix(unlist(current_simulation_values), nrow=1, byrow=TRUE))
names(current_simulation_df) <- column_names
# Check if the file exists
if (file.exists(simulation_results_file)) {
# Read the existing data from the file
all_simulation_results_df <- read.table(simulation_results_file, header = TRUE, sep = "\t")
# Append the new row to the existing data frame
all_simulation_results_df <- rbind(all_simulation_results_df, current_simulation_df)
} else {
# Create an empty data frame if the file does not exist
all_simulation_results_df <- current_simulation_df
}
# # Create an empty data frame if the file does not exist
# column_names <- c("Chr","NeBurnIn","nInd","InbredFo","NeBottleneck","nGenBottleneck","nGenBreed","nBreed","SNPchipRefPop","Sim_H_e_5th_perc","Sim_F_ROH","Sim_ROH_hotspot_thr","Sim_Cost_Result")
#
#
# # Create a list of the values for the current simulation
# current_simulation_values <- list(chr,Ne_burn_in,nInd_fo,Inbred_fo,N_e_bottleneck,n_generations_bottleneck,n_gen_breed,n_breed,snp_chip,
#          round(neutral_model_5th_percentile_No_MAF,decimals_output_values),
#          round(neutral_model_F_ROH,decimals_output_values),
#          round(neutral_model_ROH_hotspot_threshold,decimals_output_values),
#          round(cost,decimals_output_values))
# # Create an empty data frame if the file does not exist
# column_names <- c("Chr","NeBurnIn","nInd","InbredFo","NeBottleneck","nGenBottleneck","nGenBreed","nBreed","SNPchipRefPop","Sim_H_e","Sim_F_ROH","Sim_ROH_hotspot_thr","Sim_Cost_Result")
#
#
# # Create a list of the values for the current simulation
# current_simulation_values <- list(chr,Ne_burn_in,nInd_fo,Inbred_fo,N_e_bottleneck,n_generations_bottleneck,n_gen_breed,n_breed,snp_chip,
#          round(neutral_model_Avg_H_e_No_MAF,decimals_output_values),
#          round(neutral_model_F_ROH,decimals_output_values),
#          round(neutral_model_ROH_hotspot_threshold,decimals_output_values),
#          round(cost,decimals_output_values))
# "chr_specific_recombination_rate"
# Create an empty data frame if the file does not exist
# column_names <- c("Chr","NeBurnIn","nBottleneck","nGenBottleneck","nGenBreed","nBreed","SNPchipRefPop","genomewide_recombination_rate","Mutations","Sim_F_ROH","F_ROH_CI","Sim_ROH_hotspot_thr","ROH_hotspot_thr_CI","H_e_No_MAF","H_e_No_MAF_ci","H_e_5th_perc_No_MAF","H_e_MAF_0_05","H_e_MAF_0_05_ci","H_e_5th_perc_MAF_0_05","Sim_Cost_Result")
column_names <- c("Chr","NeBurnIn","nBottleneck","nGenBottleneck","nGenBreed","nBreed","SNPchipRefPop","Chr_specific_recomb_rate","Mutations","Sim_F_ROH","F_ROH_CI","Sim_ROH_hotspot_thr","ROH_hotspot_thr_CI","H_e_No_MAF","H_e_No_MAF_ci","H_e_5th_perc_No_MAF","H_e_MAF_0_05","H_e_MAF_0_05_ci","H_e_5th_perc_MAF_0_05","Sim_Cost_Result")
# Create a list of the values for the current simulation
current_simulation_values <- list(chr,Ne_burn_in,N_e_bottleneck,n_generations_bottleneck,n_gen_breed,n_breed,snp_chip,chr_specific_recomb_rate,Introduce_mutations,
round(neutral_model_F_ROH,decimals_output_values),
F_ROH_ci,
round(neutral_model_ROH_hotspot_threshold,decimals_output_values),
ROH_hotspot_ci,
round(neutral_model_Avg_H_e_No_MAF,decimals_output_values),
H_e_No_MAF_ci,
round(neutral_model_5th_percentile_No_MAF,decimals_output_values),
round(neutral_model_Avg_H_e_MAF_0_05,decimals_output_values),
H_e_MAF_0_05_ci,
round(neutral_model_5th_percentile_MAF_0_05,decimals_output_values),
round(cost,decimals_output_values))
# Convert the list to a data frame
current_simulation_df <- data.frame(matrix(unlist(current_simulation_values), nrow=1, byrow=TRUE))
names(current_simulation_df) <- column_names
# Check if the file exists
if (file.exists(simulation_results_file)) {
# Read the existing data from the file
all_simulation_results_df <- read.table(simulation_results_file, header = TRUE, sep = "\t")
# Append the new row to the existing data frame
all_simulation_results_df <- rbind(all_simulation_results_df, current_simulation_df)
} else {
# Create an empty data frame if the file does not exist
all_simulation_results_df <- current_simulation_df
}
# Write data to TSV file without quotes and with tab separation
write.table(all_simulation_results_df, file = simulation_results_file, sep = "\t", row.names = FALSE, quote = FALSE)
