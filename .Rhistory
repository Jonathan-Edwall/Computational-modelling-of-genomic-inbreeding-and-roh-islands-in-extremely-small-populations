library(AlphaSimR)
library(dplyr)
library(ggplot2)
library(patchwork)
library(purrr)
library(tibble)
founders <- runMacs2(nInd = 100,
nChr = 1,
Ne = 2500,
histNe = NULL,
histGen = NULL)
simparam <- SimParam$new(founders)
simparam$addTraitA(nQtlPerChr = 10)
simparam$setSexes("yes_sys")
simparam$setVarE(h2 = 0.2)
simparam$addSnpChip(nSnpPerChr = 1000)
simparam$setTrackRec(TRUE)
founderpop <- newPop(founders, simParam = simparam)
breed1_founders <- founderpop[1:50]
breed2_founders <- founderpop[51:100]
## 10 generations of bottleneck
random_mating <- function(pop, simparam, n_gen) {
n_ind <- pop@nInd
generations <- vector(length = n_gen + 1,
mode = "list")
generations[[1]] <- pop
for (gen_ix in 2:(n_gen + 1)) {
generations[[gen_ix]] <- randCross(generations[[gen_ix - 1]], nCrosses = n_ind, nProgeny = 1,
simParam = simparam)
}
generations[-1]
}
breed1_bottleneck <- random_mating(breed1_founders, simparam, 5)
breed2_bottleneck <- random_mating(breed2_founders, simparam, 5)
breeding <- function(pop, simparam, n_gen, n_sires, size) {
generations <- vector(length = n_gen + 1,
mode = "list")
generations[[1]] <- pop
for (gen_ix in 2:(n_gen + 1)) {
n_females <- generations[[gen_ix - 1]]@nInd/2
generations[[gen_ix]] <- selectCross(generations[[gen_ix - 1]],
nMale = n_sires,
nFemale = n_females,
nCrosses = size,
use = "pheno",
nProgeny = 1,
simParam = simparam)
}
generations[-1]
}
breed1_selection <- breeding(breed1_bottleneck[[5]],
simparam = simparam,
n_gen = 20,
n_sires = 20,
size = 200)
breed2_selection <- breeding(breed2_bottleneck[[5]],
simparam = simparam,
n_gen = 20,
n_sires = 20,
size = 200)
# Clean the working environment
rm(list = ls())
# Set the default plot layout
par(mfrow = c(1, 1))
plot(cars)
```{r}
```{r}
plot(cars)
help(quickHaplo)
library(AlphaSimR)
library(AlphaSimR)
help(quickHaplo)
help(runMacs)
# Clean the working environment
rm(list = ls())
# Set the default plot layout
par(mfrow = c(1, 1))
# Clean the working environment
rm(list = ls())
# Set the default plot layout
par(mfrow = c(1, 1))
founderGenomes = runMacs(nInd = 5,
nChr = 2,
segSites = 4,
species = "CATTLE")
founderGenomes
Help(SimParam)
help(SimParam)
help(SimParam)
founderGenomes
# Create an object holding the global simulation parameter object (SP) from the founder genomes
SP = SimParam$new(founderGenomes)
SP$setSexes("yes_sys")
# yes_sys will systematically create a Male and female in a sequence
help(SimParam$setSexes())
# yes_sys will systematically create a Male and female in a sequence
help(SimParam$setSexes)
# yes_sys will systematically create a Male and female in a sequence
help(SimParam.setSexes)
SP$setSexes("yes_sys")
# yes_sys will systematically create a Male and female in a sequence
?SimParam::setSexes
# yes_sys will systematically create a Male and female in a sequence
SimParam::setSexes
# yes_sys will systematically create a Male and female in a sequence
help(SimParam::setSexes)
# yes_sys will systematically create a Male and female in a sequence
help(SimParam?setSexes)
# yes_sys will systematically create a Male and female in a sequence
help(SimParam?SetSexes)
# yes_sys will systematically create a Male and female in a sequence
help(SimParam.setSexes)
# yes_sys will systematically create a Male and female in a sequence
help(SimParam$setSexes)
# yes_sys will systematically create a Male and female in a sequence
help(SimParam$setSexes())
# yes_sys will systematically create a Male and female in a sequence
help(SimParam::setSexes())
# yes_sys will systematically create a Male and female in a sequence
help(SimParam::setSexes)
# yes_sys will systematically create a Male and female in a sequence
help(SimParam?setSexes())
# yes_sys will systematically create a Male and female in a sequence
help(SimParam.setSexes())
# yes_sys will systematically create a Male and female in a sequence
help(SimParam.setSexes()?)
?SimParam$setSexes
# yes_sys will systematically create a Male and female in a sequence
SP$setSexes("yes_sys")
help(newPop)
# Now create a population of individuals from founding genomes
maizePop = newPop(???)
help(newPop)
# Now create a population of individuals from founding genomes
maizePop = newPop(founderGenomes)
basePop
help(newPop)
# Now create a population of individuals from founding genomes
basePop = newPop(founderGenomes)
basePop
basePop
help(newPop)
# Now create a population of individuals from founding genomes
basePop = newPop(founderGenomes)
basePop
str(basePop)
str(basePop)
basepop@nInd
basePop@nInd
basePop$id
basePop@id
basePop@sex
basePop@nChr
basePop@nChr
basePop@nLoci
### Inspect the individuals identifications (their "name")
```{r}
```{r}
basePop@nLoci
# Access haplotypes of the individuals in our base population
pullSegSiteHaplo(basePop)
# Access haplotypes of the individuals in our base population
hap = pullSegSiteHaplo(basePop)
# # Access haplotypes of maize plants in the maizePop object
# maizeHaplo = pullSegSiteHaplo(???)
#
# # Check the first 10 haplotypes at the first 10 loci
# maizeHaplo[1:10, 1:10]
#
# # Check the first 5 genotypes at the first 10 loci
# maizeGeno = pullSegSiteGeno(???)
# maizeGeno[???, 1:10]
# Access haplotypes of the individuals in our base population
hap = pullSegSiteHaplo(basePop)
hap
# # Access haplotypes of maize plants in the maizePop object
# maizeHaplo = pullSegSiteHaplo(???)
#
# # Check the first 10 haplotypes at the first 10 loci
# maizeHaplo[1:10, 1:10]
#
# # Check the first 5 genotypes at the first 10 loci
# maizeGeno = pullSegSiteGeno(???)
# maizeGeno[???, 1:10]
hap[1,]
hap[1,:]
hap[1:2,]
hap[1,] + hap[2,]
# Access haplotypes of the individuals in our base population
hap = pullSegSiteHaplo(basePop)
hap
# # Access haplotypes of maize plants in the maizePop object
# maizeHaplo = pullSegSiteHaplo(???)
#
# # Check the first 10 haplotypes at the first 10 loci
# maizeHaplo[1:10, 1:10]
#
# # Check the first 5 genotypes at the first 10 loci
# maizeGeno = pullSegSiteGeno(???)
# maizeGeno[???, 1:10]
hap[1:2,]
hap[1,] + hap[2,]
hap[1:2,]
pullSegSiteGeno(basePop)
# Calculate frequency of mutant alleles in the haplotypes at each locus using the
# colMeans() function
alleleFreq = colMeans(hap)
# Summarise allele frequencies
print(alleleFreq)
hist(alleleFreq)
# We usually see more loci with lower allele frequencies indicating younger
# mutations or mutations that were selected against.
- Simulate founding genomes,
For each step, we have given you instructions with an `AlphaSimR` template code to complete (replace ??? with an appropriate code).
This exercise deliberately goes beyond the material we have covered up to now. To help you on this pathway, we indicate which functions should be used and we point to their documentation. Embracing this growth mindset is important for mastering AlphaSimR and combining it with other R functionality.
# Trait Definition
# Simulate founding genomes
```{r}
# Clean the working environment
rm(list = ls())
# Set the default plot layout
par(mfrow = c(1, 1))
library(AlphaSimR)
# Use the following parameters:
#   * 100 individuals (this simulation will need more time than before)
#   * 10 chromosomes
#   * 100 segregating loci (sites) per chromosomes
#   * MAIZE species
founderGenomes = runMacs(nInd = ???,
# Clean the working environment
rm(list = ls())
# Set the default plot layout
par(mfrow = c(1, 1))
library(AlphaSimR)
# Use the following parameters:
#   * 100 individuals (this simulation will need more time than before)
#   * 10 chromosomes
#   * 100 segregating loci (sites) per chromosomes
#   * MAIZE species
founderGenomes = runMacs(nInd = 50,
nChr = 2,
segSites = 10,
species = "CATTLE")
# Allocate sex at random
SP$setSexes("yes_rand")
# Create the simulation parameters object SP from founding genomes
SP = SimParam$new(founderGenomes)
# Allocate sex at random
SP$setSexes("yes_rand")
# Add trait 1
SP$addTraitA(nQtlPerChr = 5,mean = 500, var = 450)
SP$traits
# Create a population of individuals from founding genomes
basePop = newPop(founderGenomes)
basePop
# Inspecting the genetic values of the first 10 individuals
basePop@gv[1:10]
# Create a population of individuals from founding genomes
basePop = newPop(founderGenomes)
basePop
# Number of traits
SP$nTraits
# Create a population of individuals from founding genomes
basePop = newPop(founderGenomes)
basePop
# Inspecting the genetic values of the first 10 individuals
basePop@gv[1:10]
gv(basePop)[1:10]
# Inspecting the genetic values of the first 10 individuals
basePop@gv[1:10]
gv(basePop)[1:10]
# Plot histogram of all genetic values
hist(gv(basePop))
varG(gv(basePop))
var(gv(basePop))
basePop = setPheno(basePop, h2 = 0.5)
pheno(basePop)[1:10]
pheno(basePop)[1:10]
hist(pheno(basePop))
var(pheno(basePop))
plot(x = gv(basePop), y = pheno(basePop),
xlab = "Genetic values", ylab = "Phenotype value")
## Correlation between genetic and phenotype values
cor(gv(basePop),pheno(basePop))
cor(gv(basePop),pheno(basePop))
pheno(setPheno(basePop,h2=0.5))[1:5]
var(gv(basePop)) / var(pheno(basePop))
varG(basePop)
varP(basePop)
varG(basePop) / varP(basePop)
# Clean the working environment
rm(list = ls())
# Set the default plot layout
par(mfrow = c(1, 1))
# Load AlphaSimR
library(AlphaSimR)
# Simulate founder genomes
# ... this runMacs() call will take quite a bit of time!
# founderGenomes = runMacs(nInd = 2000,
#                          nChr = 30,
#                          segSites = 100,
#                          species = "CATTLE")
# ... therefore, we will speed up the demonstration with the quickHaplo()
# (we recommend use of runMacs() for research purposes!)
founderGenomes = quickHaplo(nInd = 2000,
nChr = 30,
segSites = 100)
# Global simulation parameters
SP = SimParam$new(founderGenomes)
SP$setSexes("yes_sys")
phenoVar = 400
heritability = 0.3
genVar = phenoVar * heritability
SP$addTraitA(nQtlPerChr = 100, mean = 250, var = genVar)
# Base population
founders = newPop(founderGenomes)
# Phenotype the base population
founders = setPheno(pop = founders, h2 = heritability)
# Set misc used for setting years of birth for the first indidivualas
year = 0
founders = setMisc(x = founders,
node = "yearOfBirth",
value = year)
head(getMisc(x = founders, node = "yearOfBirth"))
# Initial parent populations
Structure of the simulated breeding programme is shown in Figure 1. In the following we explain this breeding structure and show how to simulate it.
```{r, fig.align="center", fig.cap="Figure 1: Simulated beef breeding programme with 1000 cows (dams) and 50 bulls (sires) of different ages and different selection intensity .", echo=FALSE}
knitr::include_graphics("images/beef_scheme.png")
knitr::include_graphics("beef_scheme.png")
males = selectInd(pop = founders, nInd = 50, use = "pheno", sex = "M")
sires2 = males[ 1:10]
sires2 = setMisc(x = sires2,
node = "yearOfBirth",
value = -1)
sires1 = males[11:50]
sires1 = setMisc(x = sires1,
node = "yearOfBirth",
value = 0)
sires = c(sires2, sires1)
nInd(sires)
```{r}
table(unlist(getMisc(x = sires, node = "yearOfBirth")))
cat("Founder females\n")
(nFemales = sum(founders@sex == "F"))
females = selectInd(pop = founders, nInd = nFemales, use = "pheno", sex = "F")
# Here we define how many dams are kept in each year
nDams1 = 500
nDams2 = 250
nDams3 = 150
nDams4 = 75
nDams5 = 25
sum(nDams1, nDams2, nDams3, nDams4, nDams5)
cat("Dams5\n")
(start = 1)
(end = nDams5)
dams5 = females[start:end]
dams5 = setMisc(x = dams5,
node = "yearOfBirth",
value = -4)
nInd(dams5)
cat("Dams4\n")
(start = end + 1)
(end = start - 1 + nDams4)
dams4 = females[start:end]
dams4 = setMisc(x = dams4,
node = "yearOfBirth",
value = -3)
nInd(dams4)
cat("Dams3\n")
(start = end + 1)
(end = start - 1 + nDams3)
dams3 = females[start:end]
dams3 = setMisc(x = dams3,
node = "yearOfBirth",
value = -2)
nInd(dams3)
cat("Dams2\n")
(start = end + 1)
(end = start - 1 + nDams2)
dams2 = females[start:end]
dams2 = setMisc(x = dams2,
node = "yearOfBirth",
value = -1)
nInd(dams2)
cat("Dams1\n")
(start = end + 1)
(end = start - 1 + nDams1)
dams1 = females[start:end]
dams1 = setMisc(x = dams1,
node = "yearOfBirth",
value = 0)
nInd(dams1)
dams = c(dams5, dams4, dams3, dams2, dams1)
nInd(dams)
table(unlist(getMisc(x = dams, node = "yearOfBirth")))
# Function to record and collate data
recordData <- function(data = NULL, pop, yearOfUse = NA) {
popData = data.frame(id          = pop@id,
father      = pop@father,
mother      = pop@mother,
sex         = pop@sex,
gv          = pop@gv[, "Trait1"],
pheno       = pop@pheno[, "Trait1"],
yearOfBirth = unlist(getMisc(x = pop, node ="yearOfBirth")),
yearOfUse   = yearOfUse)
# Manage first instance of calling this function, when data is NULL
if (is.null(data)) {
ret = popData
} else {
ret = rbind(data, popData)
}
return(ret)
}
data4AllAnimals = recordData(pop = founders)
head(data4AllAnimals)
data4AllParents = recordData(pop = c(sires, dams), yearOfUse = year) # year is 0 at this stage in the script
head(data4AllParents)
data4NewParents = recordData(pop = c(sires1, dams1))
head(data4NewParents)
for (year in 1:20) {
cat("Working on the year:", year, "\n")
# Generate progeny from current dams and sires
candidates = randCross2(males = sires, females = dams, nCrosses = nInd(dams))
candidates = setMisc(x = candidates, node = "yearOfBirth", value = year)
candidates = setPheno(candidates, h2 = heritability)
# Record data for all newborn animals
data4AllAnimals = recordData(data = data4AllAnimals,
pop = candidates)
# Record data for the used sires and dams (young and old)
data4AllParents = recordData(data = data4AllParents,
pop = c(sires, dams),
yearOfUse = year)
# Update and select sires
sires2 = selectInd(pop = sires1, nInd = 10, use = "pheno")
sires1 = selectInd(pop = candidates, nInd = 40, use = "pheno", sex = "M")
sires = c(sires2, sires1)
# Update and select dams
dams5 = selectInd(pop = dams4, nInd = nDams5, use = "pheno")
dams4 = selectInd(pop = dams3, nInd = nDams4, use = "pheno")
dams3 = selectInd(pop = dams2, nInd = nDams3, use = "pheno")
dams2 = selectInd(pop = dams1, nInd = nDams2, use = "pheno")
dams1 = selectInd(pop = candidates, nInd = nDams1, use = "pheno", sex = "F")
dams = c(dams5, dams4, dams3, dams2, dams1)
# Record data for the newly selected sires and dams (just the new ones)
data4NewParents = recordData(data = data4NewParents,
pop = c(sires1, dams1))
}
# Install additional packages for plotting
install.packages(pkg = c("ggplot2", "ggridges"), repos = "https://cloud.r-project.org")
# Load the packages
library(ggplot2)
library(ggridges)
# Range of values
phenoRange = range(c(data4AllAnimals$pheno, data4AllAnimals$gv))
# Plot phenotype values for all newborn animals per year and sex
p = ggplot(data4AllAnimals, aes(x = pheno, y = as.factor(yearOfBirth))) +
geom_density_ridges(aes(fill = sex, linetype = sex), alpha = .4, rel_min_height = 0.01) +
xlim(phenoRange) +
ylab("Year of birth") +
xlab("Phenotype value (kg)") +
ggtitle("Newborn animals") +
theme(legend.position = "top")
print(p)
# Plot phenotype values for all parents per year and sex
p = ggplot(data4AllParents, aes(x = pheno, y = as.factor(yearOfUse))) +
geom_density_ridges(aes(fill = sex, linetype = sex), alpha = .4, rel_min_height = 0.01) +
xlim(phenoRange) +
ylab("Year of birth") +
xlab("Phenotype value (kg)") +
ggtitle("Parents") +
theme(legend.position = "top")
print(p)
# Plot genetic values for all parents per year and sex
p = ggplot(data4AllParents, aes(x = gv, y = as.factor(yearOfUse))) +
geom_density_ridges(aes(fill = sex, linetype = sex), alpha = .4, rel_min_height = 0.01) +
xlim(phenoRange) +
ylab("Year of birth") +
xlab("Genetic value (kg)") +
ggtitle("Parents") +
theme(legend.position = "top")
print(p)
# Plot genetic values for newly selected parents per year and sex
p = ggplot(data4NewParents, aes(x = gv, y = as.factor(yearOfBirth))) +
geom_density_ridges(aes(fill = sex, linetype = sex), alpha = .4, rel_min_height = 0.01) +
xlim(phenoRange) +
ylab("Year of birth") +
xlab("Genetic value (kg)") +
ggtitle("New parents") +
theme(legend.position = "top")
print(p)
