segSites = 10,
species = "CATTLE")
# Allocate sex at random
SP$setSexes("yes_rand")
# Create the simulation parameters object SP from founding genomes
SP = SimParam$new(founderGenomes)
# Allocate sex at random
SP$setSexes("yes_rand")
# Add trait 1
SP$addTraitA(nQtlPerChr = 5,mean = 500, var = 450)
SP$traits
# Create a population of individuals from founding genomes
basePop = newPop(founderGenomes)
basePop
# Inspecting the genetic values of the first 10 individuals
basePop@gv[1:10]
# Create a population of individuals from founding genomes
basePop = newPop(founderGenomes)
basePop
# Number of traits
SP$nTraits
# Create a population of individuals from founding genomes
basePop = newPop(founderGenomes)
basePop
# Inspecting the genetic values of the first 10 individuals
basePop@gv[1:10]
gv(basePop)[1:10]
# Inspecting the genetic values of the first 10 individuals
basePop@gv[1:10]
gv(basePop)[1:10]
# Plot histogram of all genetic values
hist(gv(basePop))
varG(gv(basePop))
var(gv(basePop))
basePop = setPheno(basePop, h2 = 0.5)
pheno(basePop)[1:10]
pheno(basePop)[1:10]
hist(pheno(basePop))
var(pheno(basePop))
plot(x = gv(basePop), y = pheno(basePop),
xlab = "Genetic values", ylab = "Phenotype value")
## Correlation between genetic and phenotype values
cor(gv(basePop),pheno(basePop))
cor(gv(basePop),pheno(basePop))
pheno(setPheno(basePop,h2=0.5))[1:5]
var(gv(basePop)) / var(pheno(basePop))
varG(basePop)
varP(basePop)
varG(basePop) / varP(basePop)
# Clean the working environment
rm(list = ls())
# Set the default plot layout
par(mfrow = c(1, 1))
# Load AlphaSimR
library(AlphaSimR)
# Simulate founder genomes
# ... this runMacs() call will take quite a bit of time!
# founderGenomes = runMacs(nInd = 2000,
#                          nChr = 30,
#                          segSites = 100,
#                          species = "CATTLE")
# ... therefore, we will speed up the demonstration with the quickHaplo()
# (we recommend use of runMacs() for research purposes!)
founderGenomes = quickHaplo(nInd = 2000,
nChr = 30,
segSites = 100)
# Global simulation parameters
SP = SimParam$new(founderGenomes)
SP$setSexes("yes_sys")
phenoVar = 400
heritability = 0.3
genVar = phenoVar * heritability
SP$addTraitA(nQtlPerChr = 100, mean = 250, var = genVar)
# Base population
founders = newPop(founderGenomes)
# Phenotype the base population
founders = setPheno(pop = founders, h2 = heritability)
# Set misc used for setting years of birth for the first indidivualas
year = 0
founders = setMisc(x = founders,
node = "yearOfBirth",
value = year)
head(getMisc(x = founders, node = "yearOfBirth"))
# Initial parent populations
Structure of the simulated breeding programme is shown in Figure 1. In the following we explain this breeding structure and show how to simulate it.
```{r, fig.align="center", fig.cap="Figure 1: Simulated beef breeding programme with 1000 cows (dams) and 50 bulls (sires) of different ages and different selection intensity .", echo=FALSE}
knitr::include_graphics("images/beef_scheme.png")
knitr::include_graphics("beef_scheme.png")
males = selectInd(pop = founders, nInd = 50, use = "pheno", sex = "M")
sires2 = males[ 1:10]
sires2 = setMisc(x = sires2,
node = "yearOfBirth",
value = -1)
sires1 = males[11:50]
sires1 = setMisc(x = sires1,
node = "yearOfBirth",
value = 0)
sires = c(sires2, sires1)
nInd(sires)
```{r}
table(unlist(getMisc(x = sires, node = "yearOfBirth")))
cat("Founder females\n")
(nFemales = sum(founders@sex == "F"))
females = selectInd(pop = founders, nInd = nFemales, use = "pheno", sex = "F")
# Here we define how many dams are kept in each year
nDams1 = 500
nDams2 = 250
nDams3 = 150
nDams4 = 75
nDams5 = 25
sum(nDams1, nDams2, nDams3, nDams4, nDams5)
cat("Dams5\n")
(start = 1)
(end = nDams5)
dams5 = females[start:end]
dams5 = setMisc(x = dams5,
node = "yearOfBirth",
value = -4)
nInd(dams5)
cat("Dams4\n")
(start = end + 1)
(end = start - 1 + nDams4)
dams4 = females[start:end]
dams4 = setMisc(x = dams4,
node = "yearOfBirth",
value = -3)
nInd(dams4)
cat("Dams3\n")
(start = end + 1)
(end = start - 1 + nDams3)
dams3 = females[start:end]
dams3 = setMisc(x = dams3,
node = "yearOfBirth",
value = -2)
nInd(dams3)
cat("Dams2\n")
(start = end + 1)
(end = start - 1 + nDams2)
dams2 = females[start:end]
dams2 = setMisc(x = dams2,
node = "yearOfBirth",
value = -1)
nInd(dams2)
cat("Dams1\n")
(start = end + 1)
(end = start - 1 + nDams1)
dams1 = females[start:end]
dams1 = setMisc(x = dams1,
node = "yearOfBirth",
value = 0)
nInd(dams1)
dams = c(dams5, dams4, dams3, dams2, dams1)
nInd(dams)
table(unlist(getMisc(x = dams, node = "yearOfBirth")))
# Function to record and collate data
recordData <- function(data = NULL, pop, yearOfUse = NA) {
popData = data.frame(id          = pop@id,
father      = pop@father,
mother      = pop@mother,
sex         = pop@sex,
gv          = pop@gv[, "Trait1"],
pheno       = pop@pheno[, "Trait1"],
yearOfBirth = unlist(getMisc(x = pop, node ="yearOfBirth")),
yearOfUse   = yearOfUse)
# Manage first instance of calling this function, when data is NULL
if (is.null(data)) {
ret = popData
} else {
ret = rbind(data, popData)
}
return(ret)
}
data4AllAnimals = recordData(pop = founders)
head(data4AllAnimals)
data4AllParents = recordData(pop = c(sires, dams), yearOfUse = year) # year is 0 at this stage in the script
head(data4AllParents)
data4NewParents = recordData(pop = c(sires1, dams1))
head(data4NewParents)
for (year in 1:20) {
cat("Working on the year:", year, "\n")
# Generate progeny from current dams and sires
candidates = randCross2(males = sires, females = dams, nCrosses = nInd(dams))
candidates = setMisc(x = candidates, node = "yearOfBirth", value = year)
candidates = setPheno(candidates, h2 = heritability)
# Record data for all newborn animals
data4AllAnimals = recordData(data = data4AllAnimals,
pop = candidates)
# Record data for the used sires and dams (young and old)
data4AllParents = recordData(data = data4AllParents,
pop = c(sires, dams),
yearOfUse = year)
# Update and select sires
sires2 = selectInd(pop = sires1, nInd = 10, use = "pheno")
sires1 = selectInd(pop = candidates, nInd = 40, use = "pheno", sex = "M")
sires = c(sires2, sires1)
# Update and select dams
dams5 = selectInd(pop = dams4, nInd = nDams5, use = "pheno")
dams4 = selectInd(pop = dams3, nInd = nDams4, use = "pheno")
dams3 = selectInd(pop = dams2, nInd = nDams3, use = "pheno")
dams2 = selectInd(pop = dams1, nInd = nDams2, use = "pheno")
dams1 = selectInd(pop = candidates, nInd = nDams1, use = "pheno", sex = "F")
dams = c(dams5, dams4, dams3, dams2, dams1)
# Record data for the newly selected sires and dams (just the new ones)
data4NewParents = recordData(data = data4NewParents,
pop = c(sires1, dams1))
}
# Install additional packages for plotting
install.packages(pkg = c("ggplot2", "ggridges"), repos = "https://cloud.r-project.org")
# Load the packages
library(ggplot2)
library(ggridges)
# Range of values
phenoRange = range(c(data4AllAnimals$pheno, data4AllAnimals$gv))
# Plot phenotype values for all newborn animals per year and sex
p = ggplot(data4AllAnimals, aes(x = pheno, y = as.factor(yearOfBirth))) +
geom_density_ridges(aes(fill = sex, linetype = sex), alpha = .4, rel_min_height = 0.01) +
xlim(phenoRange) +
ylab("Year of birth") +
xlab("Phenotype value (kg)") +
ggtitle("Newborn animals") +
theme(legend.position = "top")
print(p)
# Plot phenotype values for all parents per year and sex
p = ggplot(data4AllParents, aes(x = pheno, y = as.factor(yearOfUse))) +
geom_density_ridges(aes(fill = sex, linetype = sex), alpha = .4, rel_min_height = 0.01) +
xlim(phenoRange) +
ylab("Year of birth") +
xlab("Phenotype value (kg)") +
ggtitle("Parents") +
theme(legend.position = "top")
print(p)
# Plot genetic values for all parents per year and sex
p = ggplot(data4AllParents, aes(x = gv, y = as.factor(yearOfUse))) +
geom_density_ridges(aes(fill = sex, linetype = sex), alpha = .4, rel_min_height = 0.01) +
xlim(phenoRange) +
ylab("Year of birth") +
xlab("Genetic value (kg)") +
ggtitle("Parents") +
theme(legend.position = "top")
print(p)
# Plot genetic values for newly selected parents per year and sex
p = ggplot(data4NewParents, aes(x = gv, y = as.factor(yearOfBirth))) +
geom_density_ridges(aes(fill = sex, linetype = sex), alpha = .4, rel_min_height = 0.01) +
xlim(phenoRange) +
ylab("Year of birth") +
xlab("Genetic value (kg)") +
ggtitle("New parents") +
theme(legend.position = "top")
print(p)
library(AlphaSimR)
library(dplyr)
library(ggplot2)
library(patchwork)
library(purrr)
library(tibble)
# Clean the working environment
rm(list = ls())
help(runMacs2)
founderGenomes <- runMacs2(nInd = 100,
nChr = 1,
Ne = 2500,
histNe = NULL,
histGen = NULL)
# Inspecting the founderGenomes object
founderGenomes
help(SimParam)
# Creating a new Simparam object & Assigning the founder population population to it
SP <- SimParam$new(founderGenomes)
# SP
SP$addTraitA(nQtlPerChr = 10) # Trait 1 is affected by 10 QTL/chromosme
# Inspecting the traits element of the SB object
SP$traits
SP$setSexes("yes_sys")
SP$setVarE(h2 = 0.2)
SP$addSnpChip(nSnpPerChr = 1000)
SP$setTrackRec(TRUE)
recordData <- function(data = NULL, pop, generationOfUse = NA) {
if (is.null(pop) || length(pop@id) == 0) {
warning("Invalid 'pop' input for generation ", generationOfUse)
return(data)
}
# Debugging statements
cat("Generation: ", generationOfUse, "\n")
cat("Number of individuals in pop: ", length(pop@id), "\n")
cat("Number of rows in data: ", nrow(data), "\n")
popData = data.frame(id = pop@id,
father = pop@father,
mother = pop@mother,
sex = pop@sex,
generation = unlist(getMisc(x = pop, node = "generation")),
generation_progeny = generationOfUse
)
# Manage the first instance of calling this function when data is NULL
if (is.null(data)) {
ret = popData
} else {
ret = rbind(data, popData)
}
return(ret)
}
# # Function to record and collate data
# recordData <- function(data = NULL, pop, generationOfUse = NA) {
#   popData = data.frame(id          = pop@id,
#                        father      = pop@father,
#                        mother      = pop@mother,
#                        sex         = pop@sex,
#                        generation = unlist(getMisc(x = pop, node ="generation")),
#                        # gv          = pop@gv[, "Trait1"],
#                        # pheno       = pop@pheno[, "Trait1"],
#                        # yearOfBirth = unlist(getMisc(x = pop, node ="yearOfBirth")),
#                        generation_progeny   = generationOfUse
#   )
#
#   # Manage first instance of calling this function, when data is NULL
#   if (is.null(data)) {
#     ret = popData
#   } else {
#     ret = rbind(data, popData)
#   }
#
#   return(ret)
# }
# Generate the initial founder population
founderpop <- newPop(founderGenomes, simParam = SP)
# Set misc used for setting years of birth for the first individuals
current_generation = 0
founderpop = setMisc(x = founderpop,
node = "generation",
value = current_generation)
head(getMisc(x = founderpop, node = "generation"))
# Split the founder population into two breeding groups
breed1_founders <- founderpop[1:50]
breed1_founders
breed2_founders <- founderpop[51:100]
breed2_founders
random_mating <- function(pop, SP, n_gen) {
n_ind <- pop@nInd # Extracting number of individuals in the current population
generations <- vector(length = n_gen + 1, mode = "list")
generations[[1]] <- pop # The initial breeding group population gets stored as the first element
# Simulating random mating to perform simulation of the 2nd until the n+1:th generation
# Each mating Progenys are generated using randcross
for (gen_ix in 2:(n_gen + 1)) {
generations[[gen_ix]] <- randCross(pop = generations[[gen_ix - 1]], nCrosses = n_ind, nProgeny = 1,
simParam = SP)
}
last_generation <- generations[[n_gen + 1]]
if (length(last_generation@id) > 0) {
last_generation <- data.frame(
id = last_generation@id,
father = last_generation@father,
mother = last_generation@mother,
sex = last_generation@sex,
generation = unlist(getMisc(x = last_generation, node = "generation")),
generation_progeny = n_gen
)
} else {
warning("No individuals in the last generation.")
last_generation <- data.frame()
}
return(last_generation)
}
# Example usage
breed1_bottleneck <- random_mating(breed1_founders, SP, 5)
View(breed1_founders)
View(breed1_founders)
breed1_founders@geno[[1]]
breed1_founders@ebv
breed1_founders@miscPop
breed1_founders@fixEff
library(AlphaSimR)
library(dplyr)
library(ggplot2)
library(patchwork)
library(purrr)
library(tibble)
# Clean the working environment
rm(list = ls())
help(runMacs2)
founderGenomes <- runMacs2(nInd = 100,
nChr = 1,
Ne = 2500,
histNe = NULL,
histGen = NULL)
# Inspecting the founderGenomes object
founderGenomes
help(SimParam)
# Creating a new Simparam object & Assigning the founder population population to it
SP <- SimParam$new(founderGenomes)
# SP
SP$addTraitA(nQtlPerChr = 10) # Trait 1 is affected by 10 QTL/chromosme
# Inspecting the traits element of the SB object
SP$traits
SP$setSexes("yes_sys")
SP$setVarE(h2 = 0.2)
SP$addSnpChip(nSnpPerChr = 1000)
SP$setTrackRec(TRUE)
# # Function to record and collate data
# recordData <- function(data = NULL, pop, generationOfUse = NA) {
#   popData = data.frame(id = pop@id,
#                        father = pop@father,
#                        mother = pop@mother,
#                        sex = pop@sex,
#                        generation = unlist(getMisc(x = pop, node ="generation")),
#                        generation_progeny = generationOfUse
#   )
#
#   if (is.null(data)) {
#     ret = list(popData)
#   } else {
#     ret = c(data, list(popData))
#   }
#
#   return(ret)
# }
# Function to record and collate data
recordData <- function(data = NULL, pop, generationOfUse = NA) {
popData = data.frame(id          = pop@id,
father      = pop@father,
mother      = pop@mother,
sex         = pop@sex,
generation = unlist(getMisc(x = pop, node ="generation")),
# gv          = pop@gv[, "Trait1"],
# pheno       = pop@pheno[, "Trait1"],
# yearOfBirth = unlist(getMisc(x = pop, node ="yearOfBirth")),
generation_progeny   = generationOfUse
)
# Manage first instance of calling this function, when data is NULL
if (is.null(data)) {
ret = popData
} else {
ret = rbind(data, popData)
}
return(ret)
}
# Generate the initial founder population
founderpop <- newPop(founderGenomes, simParam = SP)
# Set misc used for setting years of birth for the first individuals
current_generation = 0
founderpop = setMisc(x = founderpop,
node = "generation",
value = current_generation)
head(getMisc(x = founderpop, node = "generation"))
# Split the founder population into two breeding groups
breed1_founders <- founderpop[1:50]
breed1_founders
breed2_founders <- founderpop[51:100]
breed2_founders
# breed1_founders <- founders[1:50]
# breed2_founders <- founders[51:100]
breed1_founders
breed1_founders@id
breed1_founders@father
breed1_founders@mother
breed1_founders@sex
breed2_founders@id
breed2_founders@father
breed2_founders@mother
breed2_founders@sex
founderpop
## Data for all animals
data4AllAnimals = recordData(pop = founderpop)
# data4AllAnimals = recordData(pop = founders)
# head(data4AllAnimals)
data4AllAnimals
data4AllParents = recordData(pop = founderpop, generationOfUse = 1) # year is 0 at this stage in the script
head(data4AllParents)
random_mating <- function(pop, SP, n_gen) {
n_ind <- pop@nInd # Extracting number of individuals in the current population
generations <- vector(length = n_gen + 1,
mode = "list")
generations[[1]] <- pop # The initial breeding group population gets stored as the first element
# Simulating randomm mating to perform simulation of the 2nd until the n+1:th generation
# Each mating Progenys are generated using randcross
for (gen_ix in 2:(n_gen + 1)) {
generations[[gen_ix]] <- randCross(pop=generations[[gen_ix - 1]], nCrosses = n_ind, nProgeny = 1,
simParam = SP)
}
generations[-1] # all generations except for the founder population gets returned (the simulated generations derived from the bottleneck)
}
# Simulating random mating within each breeding group for 5 generations
breed1_bottleneck <- random_mating(breed1_founders, SP, 5)
breed2_bottleneck <- random_mating(breed2_founders, SP, 5)
breed1_bottlenec
breed1_bottleneck
View(breed1_bottleneck)
View(breed1_bottleneck)
breed1_bottleneck[[5]]@geno[[1]]
library(AlphaSimR)
library(dplyr)
library(ggplot2)
library(patchwork)
library(purrr)
library(tibble)
# Clean the working environment
rm(list = ls())
help(runMacs2)
founderGenomes <- runMacs2(nInd = 100,
nChr = 1,
Ne = 2500,
histNe = NULL,
histGen = NULL)
# Inspecting the founderGenomes object
founderGenomes
help(SimParam)
# Creating a new Simparam object & Assigning the founder population population to it
SP <- SimParam$new(founderGenomes)
# SP
SP$addTraitA(nQtlPerChr = 10) # Trait 1 is affected by 10 QTL/chromosme
# Inspecting the traits element of the SB object
SP$traits
SP$setSexes("yes_sys")
SP$setVarE(h2 = 0.2)
