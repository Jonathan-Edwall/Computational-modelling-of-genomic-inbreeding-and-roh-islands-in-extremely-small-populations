library(AlphaSimR)
library(dplyr)
library(ggplot2)
library(patchwork)
library(purrr)
library(tibble)
founders <- runMacs2(nInd = 100,
nChr = 1,
Ne = 2500,
histNe = NULL,
histGen = NULL)
simparam <- SimParam$new(founders)
simparam$addTraitA(nQtlPerChr = 10)
simparam$setSexes("yes_sys")
simparam$setVarE(h2 = 0.2)
simparam$addSnpChip(nSnpPerChr = 1000)
simparam$setTrackRec(TRUE)
founderpop <- newPop(founders, simParam = simparam)
breed1_founders <- founderpop[1:50]
breed2_founders <- founderpop[51:100]
## 10 generations of bottleneck
random_mating <- function(pop, simparam, n_gen) {
n_ind <- pop@nInd
generations <- vector(length = n_gen + 1,
mode = "list")
generations[[1]] <- pop
for (gen_ix in 2:(n_gen + 1)) {
generations[[gen_ix]] <- randCross(generations[[gen_ix - 1]], nCrosses = n_ind, nProgeny = 1,
simParam = simparam)
}
generations[-1]
}
breed1_bottleneck <- random_mating(breed1_founders, simparam, 5)
breed2_bottleneck <- random_mating(breed2_founders, simparam, 5)
breeding <- function(pop, simparam, n_gen, n_sires, size) {
generations <- vector(length = n_gen + 1,
mode = "list")
generations[[1]] <- pop
for (gen_ix in 2:(n_gen + 1)) {
n_females <- generations[[gen_ix - 1]]@nInd/2
generations[[gen_ix]] <- selectCross(generations[[gen_ix - 1]],
nMale = n_sires,
nFemale = n_females,
nCrosses = size,
use = "pheno",
nProgeny = 1,
simParam = simparam)
}
generations[-1]
}
breed1_selection <- breeding(breed1_bottleneck[[5]],
simparam = simparam,
n_gen = 20,
n_sires = 20,
size = 200)
breed2_selection <- breeding(breed2_bottleneck[[5]],
simparam = simparam,
n_gen = 20,
n_sires = 20,
size = 200)
# Clean the working environment
rm(list = ls())
# Set the default plot layout
par(mfrow = c(1, 1))
plot(cars)
```{r}
```{r}
plot(cars)
help(quickHaplo)
library(AlphaSimR)
library(AlphaSimR)
help(quickHaplo)
help(runMacs)
# Clean the working environment
rm(list = ls())
# Set the default plot layout
par(mfrow = c(1, 1))
# Clean the working environment
rm(list = ls())
# Set the default plot layout
par(mfrow = c(1, 1))
founderGenomes = runMacs(nInd = 5,
nChr = 2,
segSites = 4,
species = "CATTLE")
founderGenomes
Help(SimParam)
help(SimParam)
help(SimParam)
founderGenomes
# Create an object holding the global simulation parameter object (SP) from the founder genomes
SP = SimParam$new(founderGenomes)
SP$setSexes("yes_sys")
# yes_sys will systematically create a Male and female in a sequence
help(SimParam$setSexes())
# yes_sys will systematically create a Male and female in a sequence
help(SimParam$setSexes)
# yes_sys will systematically create a Male and female in a sequence
help(SimParam.setSexes)
SP$setSexes("yes_sys")
# yes_sys will systematically create a Male and female in a sequence
?SimParam::setSexes
# yes_sys will systematically create a Male and female in a sequence
SimParam::setSexes
# yes_sys will systematically create a Male and female in a sequence
help(SimParam::setSexes)
# yes_sys will systematically create a Male and female in a sequence
help(SimParam?setSexes)
# yes_sys will systematically create a Male and female in a sequence
help(SimParam?SetSexes)
# yes_sys will systematically create a Male and female in a sequence
help(SimParam.setSexes)
# yes_sys will systematically create a Male and female in a sequence
help(SimParam$setSexes)
# yes_sys will systematically create a Male and female in a sequence
help(SimParam$setSexes())
# yes_sys will systematically create a Male and female in a sequence
help(SimParam::setSexes())
# yes_sys will systematically create a Male and female in a sequence
help(SimParam::setSexes)
# yes_sys will systematically create a Male and female in a sequence
help(SimParam?setSexes())
# yes_sys will systematically create a Male and female in a sequence
help(SimParam.setSexes())
# yes_sys will systematically create a Male and female in a sequence
help(SimParam.setSexes()?)
?SimParam$setSexes
# yes_sys will systematically create a Male and female in a sequence
SP$setSexes("yes_sys")
help(newPop)
# Now create a population of individuals from founding genomes
maizePop = newPop(???)
help(newPop)
# Now create a population of individuals from founding genomes
maizePop = newPop(founderGenomes)
basePop
help(newPop)
# Now create a population of individuals from founding genomes
basePop = newPop(founderGenomes)
basePop
basePop
help(newPop)
# Now create a population of individuals from founding genomes
basePop = newPop(founderGenomes)
basePop
str(basePop)
str(basePop)
basepop@nInd
basePop@nInd
basePop$id
basePop@id
basePop@sex
basePop@nChr
basePop@nChr
basePop@nLoci
### Inspect the individuals identifications (their "name")
```{r}
```{r}
basePop@nLoci
# Access haplotypes of the individuals in our base population
pullSegSiteHaplo(basePop)
# Access haplotypes of the individuals in our base population
hap = pullSegSiteHaplo(basePop)
# # Access haplotypes of maize plants in the maizePop object
# maizeHaplo = pullSegSiteHaplo(???)
#
# # Check the first 10 haplotypes at the first 10 loci
# maizeHaplo[1:10, 1:10]
#
# # Check the first 5 genotypes at the first 10 loci
# maizeGeno = pullSegSiteGeno(???)
# maizeGeno[???, 1:10]
# Access haplotypes of the individuals in our base population
hap = pullSegSiteHaplo(basePop)
hap
# # Access haplotypes of maize plants in the maizePop object
# maizeHaplo = pullSegSiteHaplo(???)
#
# # Check the first 10 haplotypes at the first 10 loci
# maizeHaplo[1:10, 1:10]
#
# # Check the first 5 genotypes at the first 10 loci
# maizeGeno = pullSegSiteGeno(???)
# maizeGeno[???, 1:10]
hap[1,]
hap[1,:]
hap[1:2,]
hap[1,] + hap[2,]
# Access haplotypes of the individuals in our base population
hap = pullSegSiteHaplo(basePop)
hap
# # Access haplotypes of maize plants in the maizePop object
# maizeHaplo = pullSegSiteHaplo(???)
#
# # Check the first 10 haplotypes at the first 10 loci
# maizeHaplo[1:10, 1:10]
#
# # Check the first 5 genotypes at the first 10 loci
# maizeGeno = pullSegSiteGeno(???)
# maizeGeno[???, 1:10]
hap[1:2,]
hap[1,] + hap[2,]
hap[1:2,]
pullSegSiteGeno(basePop)
# Calculate frequency of mutant alleles in the haplotypes at each locus using the
# colMeans() function
alleleFreq = colMeans(hap)
# Summarise allele frequencies
print(alleleFreq)
hist(alleleFreq)
# We usually see more loci with lower allele frequencies indicating younger
# mutations or mutations that were selected against.
